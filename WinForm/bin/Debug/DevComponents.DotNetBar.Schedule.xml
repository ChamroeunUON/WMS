<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevComponents.DotNetBar.Schedule</name>
    </assembly>
    <members>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.OnCategoryColorChanged(System.String,System.String)">
            <summary>
            Sends ChangedEvent for the CategoryColor property
            </summary>
            <param name="oldValue">Old CategoryColor</param>
            <param name="newValue">New CategoryColor</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles control MouseDown events
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.IsSimpleMouseDown">
            <summary>
            Determines if it is a simple, single-click MouseDown
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarItem.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the CalendarItem specific properties to new instance of the item.
            </summary>
            <param name="copy">New CalendarItem instance</param>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarItem.CategoryColorChanged">
            <summary>
            Occurs when CategoryColor has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarItem.StartTimeChanged">
            <summary>
            Occurs when StartTime has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarItem.EndTimeChanged">
            <summary>
            Occurs when EndTime has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarItem.IsSelectedChanged">
            <summary>
            Occurs when IsSelected has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarItem.CollateIdChanged">
            <summary>
            Occurs when CollateId has Changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.CollateId">
            <summary>
            Gets or sets the CollateId used for TimeLine row collation.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.StartTime">
            <summary>
            Gets or sets the CalendarItem Start time.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.EndTime">
            <summary>
            Gets or sets the CalendarItem End time.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.CategoryColor">
            <summary>
            Gets or sets the category color used for TimeLine CondensedView markers.
            Use static members on Appointment class to assign the category color for example Appointment.CategoryRed.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.ModelItem">
            <summary>
            Gets and sets the Model item
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.RootItem">
            <summary>
            Gets and sets the Root Model item
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.IsRecurring">
            <summary>
            Gets and sets the IsRecurring item status
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.IsSelected">
            <summary>
            Gets and sets the selection state
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.HitArea">
            <summary>
            Gets and sets the last hit area
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarItem.IsMarkupSupported">
            <summary>
            IsMarkupSupported
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.#ctor(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Constructor
            </summary>
            <param name="baseView"></param>
            <param name="appointment"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.AppointmentView_StartTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles StartTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.AppointmentView_EndTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles EndTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.DisplayTemplateText(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            DisplayTemplateText
            </summary>
            <param name="e"></param>
            <param name="r"></param>
            <returns>true is displayed</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.GetDisplayTemplateText(System.Drawing.Rectangle)">
            <summary>
            GetDisplayTemplateText
            </summary>
            <param name="r"></param>
            <returns>Templatized text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.GetItemBounds(System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Image)">
            <summary>
            Gets the item text and image bounds
            </summary>
            <param name="r"></param>
            <param name="rText"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.DrawContentImage(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            DrawContentImage
            </summary>
            <param name="e"></param>
            <param name="r"></param>
            <param name="rImage"></param>
            <param name="image"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.DrawTimeMarker(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Initiates the drawing of the appointment Time Marker
            </summary>
            <param name="g">Graphics</param>
            <param name="r">Appointment rectangle</param>
            <param name="corner">Corner radius</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.RenderMarker(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Int32)">
            <summary>
            RenderMarker
            </summary>
            <param name="g"></param>
            <param name="br">Brush</param>
            <param name="r">Rectangle</param>
            <param name="corner">Corner</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.GetLeftRoundedRectanglePath(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Creates a left rounded rectangle path to be
            used for the Time Marker
            </summary>
            <param name="r">Appointment rectangle</param>
            <param name="corner">Corner radius</param>
            <returns>Graphics path</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.BackBrush(System.Drawing.Rectangle)">
            <summary>
            Gets the appointment BackGround brush
            </summary>
            <param name="r">Bounding rectangle</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentView.TimeMarkerBrush(System.Drawing.Rectangle)">
            <summary>
            Gets the appointment TimeMarkerBrush
            </summary>
            <param name="r">Bounding rectangle</param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.Appointment">
            <summary>
            Gets and sets the view Appointment
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.AppointmentColor">
            <summary>
            Gets and sets the appointment color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.Font">
            <summary>
            Gets and sets the view font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.IsTextClipped">
            <summary>
            Gets whether the Appointment display Text is clipped
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.BaseView">
            <summary>
            BaseView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.BorderColor">
            <summary>
            Gets the border color for the Category
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.BorderPen">
            <summary>
            Gets the border pen
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.SelectedBorderPen">
            <summary>
            Gets the selected border pen
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentView.TextColor">
            <summary>
            Gets the Text color for the Category
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.#ctor(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Constructor
            </summary>
            <param name="baseView"></param>
            <param name="appointment"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.AppointmentView_StartTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles StartTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.AppointmentView_EndTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles EndTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.SetViewEnds">
            <summary>
            Sets the view display end types
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.DrawContentText(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            DrawContentText
            </summary>
            <param name="e"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.GetViewRect(DevComponents.WinForms.Drawing.CornerRadius@)">
            <summary>
            Gets the view rect for the appointment
            </summary>
            <param name="cornerRadius">Corner radius</param>
            <returns>View rect</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.GetItemPath(System.Drawing.Rectangle,System.Int32,DevComponents.WinForms.Drawing.CornerRadius)">
            <summary>
            Gets a path defining the item
            </summary>
            <param name="viewRect"></param>
            <param name="radius"></param>
            <param name="cornerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.DrawGribits(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            Draws the resize gribits for the view
            </summary>
            <param name="e"></param>
            <param name="r">View rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouseDown processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentHView.GetHitArea(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Gets the HitArea from the current
            mouse position
            </summary>
            <param name="objArg"></param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentHView.IsMutable">
            <summary>
            Gets whether the appointment is mutable
            </summary> 
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentMonthView.#ctor(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Constructor
            </summary>
            <param name="baseView"></param>
            <param name="appointment"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentMonthView.SetViewEnds">
            <summary>
            Sets the view display end types
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentMonthView.MonthWeek">
            <summary>
            Gets and sets View MonthWeek
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentTimeLineView.#ctor(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Constructor
            </summary>
            <param name="baseView"></param>
            <param name="appointment"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentTimeLineView.SetViewEnds">
            <summary>
            Sets the view display end types
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.#ctor(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Constructor
            </summary>
            <param name="baseView"></param>
            <param name="appointment"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.AppointmentView_StartTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles StartTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.AppointmentView_EndTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles EndTime value changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.SetViewEnds">
            <summary>
            Sets the view display end types
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.GetDateCol(System.DateTime,System.Int32@,System.Int32@)">
            <summary>
            Gets the initial starting DayColumn col and max col
            for the given date
            </summary>
            <param name="selDate">Selection date</param>
            <param name="col">Column</param>
            <param name="n">Max col</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.GetViewRect">
            <summary>
            Gets the view rect for the appointment
            </summary>
            <returns>View rect</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.DrawContent(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            DrawContent
            </summary>
            <param name="e"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.DrawContentText(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            Draws the content text
            </summary>
            <param name="e"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.DrawResizeHandles(DevComponents.DotNetBar.ItemPaintArgs,System.Drawing.Rectangle)">
            <summary>
            Draws the resize handles for the view
            </summary>
            <param name="e"></param>
            <param name="r">View rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouseDown processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.GetHitArea(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Gets the HitArea from the current
            mouse position
            </summary>
            <param name="objArg"></param>
            <returns>eHitArea</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.DayColumn">
            <summary>
            Gets and sets View DayColumn
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.AllDayPanel">
            <summary>
            Gets and sets View AllDayPanel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.HorizontalPadding">
            <summary>
            Gets the default horizontal padding
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentWeekDayView.IsMutable">
            <summary>
            Gets whether the appointment is mutable
            </summary> 
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.#ctor(DevComponents.DotNetBar.Schedule.CalendarView,DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
            <param name="ecv"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.OnCalendarColorChanged(DevComponents.DotNetBar.Schedule.eCalendarColor,DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            OnCalendarColorChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.OnSelectedItemChanged(DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            SelectedItemChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.HookEvents(System.Boolean)">
            <summary>
            Hooks and unhooks our object events
            </summary>
            <param name="hook">True - hook, false - unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.CalendarViewDateSelectionEndChanged(System.Object,DevComponents.DotNetBar.Schedule.DateSelectionEventArgs)">
            <summary>
            DateSelectionEndChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.CalendarViewDateSelectionStartChanged(System.Object,DevComponents.DotNetBar.Schedule.DateSelectionEventArgs)">
            <summary>
            DateSelectionStartChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.CalendarViewModelChanged(System.Object,DevComponents.DotNetBar.Schedule.ModelEventArgs)">
            <summary>
            ModelChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.RecalcSize">
            <summary>
            Performs NeedRecalcSize requests
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawHorizontalLayout(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Draws horizontal tab layout
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawBackBorder(System.Drawing.Graphics,System.Int32)">
            <summary>
            Draws the background border around
            the entire control view
            </summary>
            <param name="g"></param>
            <param name="width"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawHTab(DevComponents.DotNetBar.ItemPaintArgs,System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the tab - border and content
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="text">Tab text</param>
            <param name="width">Text measured width</param>
            <param name="r">Bounding rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetHTabPath(System.Int32)">
            <summary>
            Gets the tab graphics path
            </summary>
            <param name="tabWidth">Tab width</param>
            <returns>GraphicsPath</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawVerticalLayout(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Draws vertical tab layout
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawVTab(DevComponents.DotNetBar.ItemPaintArgs,System.String,System.Drawing.Rectangle)">
            <summary>
            Draws the tab - border and content
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="text">Tab text</param>
            <param name="r">Bounding rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetVTabPath(System.Int32)">
            <summary>
            Gets the tab graphics path
            </summary>
            <param name="tabWidth">Tab width</param>
            <returns>GraphicsPath</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DrawVTab2(DevComponents.DotNetBar.ItemPaintArgs,System.String,System.Drawing.Rectangle)">
            <summary>
            Draws the tab - border and content
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="text">Tab text</param>
            <param name="r">Bounding rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetVTab2Path(System.Int32)">
            <summary>
            Gets the tab graphics path
            </summary>
            <param name="tabWidth">Tab width</param>
            <returns>GraphicsPath</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetTabPath(System.Int32)">
            <summary>
            Gets the multiuser tab path
            </summary>
            <param name="tabWidth"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.PointInTab(System.Drawing.Point)">
            <summary>
            Determines if the given Point is
            within the View tab area
            </summary>
            <param name="pt">Point in question</param>
            <returns>true if the Point is in the tab</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InternalMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.ClearMouseStates">
            <summary>
            Clears all mouse related state flags
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.DragCopy">
            <summary>
            Initiates dragging of a copy of the
            current selectedItem - if the ctrl-key is pressed
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.UpdateReminders(DevComponents.DotNetBar.Schedule.CalendarItem,System.DateTime)">
            <summary>
            Updates associated appointment reminders
            after an appointment has been moved
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse
            point (tab, header, content, etc)
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the date selection from the given point. The startDate
            and endDate will vary based upon the view type (WeekDay / Month)
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">out start date</param>
            <param name="endDate">out end date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetAppointmentView(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the appointment view created for an appointment in this view
            </summary>
            <param name="appointment">The appointment</param>
            <returns>Reference to AppointmentView or null if no view is found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.GetCustomCalendarItem(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Gets the CustomCalendarItem created for this view
            </summary>
            <returns>Reference to CustomCalendarItem or null if none found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InvalidateRect">
            <summary>
            Invalidates the given rectangle
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InvalidateRect(System.Boolean)">
            <summary>
            Invalidates the entire calendar
            bounding rect area
            </summary>
            <param name="needRecalc">NeedRecalcSize flag</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InvalidateRect(System.Drawing.Rectangle)">
            <summary>
            Invalidates the entire calendar
            bounding rect area
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.InvalidateRect(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the given rectangle
            </summary>
            <param name="rect">Rectangle to invalidate</param>
            <param name="needRecalc">NeedRecalcSize flag</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.ResetView">
            <summary>
            Disconnects and resets the Model connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.SetSelectedItem(DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Sets the current selected item
            </summary>
            <param name="pci">Previously selected CalendarItem</param>
            <param name="nci">New CalendarItem to select</param>
            <returns>Base selected CalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.UpdateDateSelection">
            <summary>
            Updates each monthWeeks DayRects to reflect
            the date selection start and end values
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.AutoSyncViewDate(DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            AutoSync our view start date
            </summary>
            <param name="syncView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.ExtendSelection(System.DateTime@,System.DateTime@)">
            <summary>
            Extends the selection if the shift-key
            is pressed with selection
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.UpdatePosWin(System.Drawing.Rectangle)">
            <summary>
            Pos window update
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the BaseView specific properties to new instance of the item.
            </summary>
            <param name="copy">New BaseView instance</param>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.BaseView.SelectedItemChanged">
            <summary>
            Occurs when SelectedItem has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.BaseView.CalendarColorChanged">
            <summary>
            Occurs when CalendarColor has Changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.BoldFont">
            <summary>
            Gets the Bold display font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.Bounds">
            <summary>
            Gets and sets the view bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DisplayedOwnerKey">
            <summary>
            Gets and sets the DisplayedOwnerKey
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DisplayedOwnerKeyIndex">
            <summary>
            Gets and sets the DisplayedOwnerKeyIndex
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.OwnerKey">
            <summary>
            Gets and sets the view Owner Key
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DisplayName">
            <summary>
            Gets and sets the view Display Name
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.StartDate">
            <summary>
            Gets and sets the display start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.EndDate">
            <summary>
            Gets and sets the display end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DateSelectionStart">
            <summary>
            Gets and sets the date selection start
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DateSelectionEnd">
            <summary>
            Gets or sets the end date of selection.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.CalendarColorTable">
            <summary>
            Gets and sets the CalendarColorTable
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.CalendarColor">
            <summary>
            Gets and sets the display calendar color scheme
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.Font">
            <summary>
            Get and sets the calendar font.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.SelectedItem">
            <summary>
            Gets and sets the currently selected CalendarItem
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsViewSelected">
            <summary>
            Gets the selected state of the view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.SelectedAppointments">
            <summary>
            Gets a ReadOnlyCollection of the
            currently selected appointments for the view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.CalendarModel">
            <summary>
            Gets the View CalendarModel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsMouseDown">
            <summary>
            IsMouseDown
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsStartResizing">
            <summary>
            IsStartResizing
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsEndResizing">
            <summary>
            IsEndResizing
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsResizing">
            <summary>
            IsResizing
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsMoving">
            <summary>
            IsMoving
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsTabMoving">
            <summary>
            IsTabMoving
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsCondMoving">
            <summary>
            IsConMoving
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.CanDrag">
            <summary>
            CanDrag
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.OldStartTime">
            <summary>
            Pre-move/resize StartTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.OldEndTime">
            <summary>
            Pre-move/resize EndTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.MyCursor">
            <summary>
            Sets local view cursor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DefaultCursor">
            <summary>
            Gets CalendarView default cursor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.PosWin">
            <summary>
            Gets and sets the view position window
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.CalendarView">
            <summary>
            Gets the CalendarView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.ECalendarView">
            <summary>
            Gets the ECalendarView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.Connector">
            <summary>
            Gets and sets the ModelViewConnector
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DayOfWeekHeaderHeight">
            <summary>
            Gets the DayOfWeekHeader height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsCopyDrag">
            <summary>
            IsCopyDrag
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.OldOwnerKey">
            <summary>
            OldOwnerKey
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.MultiUserTabHeight">
            <summary>
            Gets the MultiUserTabHeight
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.MultiUserTabWidth">
            <summary>
            Gets the MultiUserTabWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.AppointmentHeight">
            <summary>
            Gets the Appointment height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DateSelectionAnchor">
            <summary>
            Gets and sets the date selection anchor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DaysOfTheWeek">
            <summary>
            Gets and sets the Days of the week object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.IsSelecting">
            <summary>
            Gets and sets the selecting status
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.NeedRecalcLayout">
            <summary>
            Gets and sets recalc layout need
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.ClientRect">
            <summary>
            Gets and sets the view client rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.DateRangeChanged">
            <summary>
            Gets and sets the DateRangeChanged state
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BaseView.NClientData">
            <summary>
            Gets and sets the base non-client data
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.BaseView.NonClientData.#ctor(DevComponents.DotNetBar.Schedule.eTabOrientation,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="tabOrientation">Tab Orientation</param>
            <param name="tabBorder">Tab border color</param>
            <param name="tabFore">Tab foreground color</param>
            <param name="tabBack">Tab background color</param>
            <param name="contBack">Tab content background</param>
            <param name="tabSelFore">Tab selected foreground</param>
            <param name="tabSelBack">Tab selected background</param>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.SelectedItemChangedEventArgs">
            <summary>
            SelectedItemChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ValueChangedEventArgs`2">
            <summary>
            Generic ValueChangedEventArgs
            </summary>
            <typeparam name="T1">oldValue type</typeparam>
            <typeparam name="T2">newValue type</typeparam>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ValueChangedEventArgs`2.OldValue">
            <summary>
            Gets the old value
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ValueChangedEventArgs`2.NewValue">
            <summary>
            Gets the new value
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.CalendarColorChangedEventArgs">
            <summary>
            CalendarColorChangedEventArgs
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor.
            This is the main container panel for all
            BaseView and TimeRulerPanel objects
            </summary>
            <param name="calendarView">CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel._CalendarView_SelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Handles SelectedView changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.RecalcSize">
            <summary>
            Performs object recalc processing
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.RecalcWeekDay">
            <summary>
            Recalculates all WeekDay views
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigureWeekDayItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the CalendarPanel subItems
            </summary>
            <param name="vCount">View count</param>
            <param name="trWidth">TimeRuler width</param>
            <param name="vsWidth">Vert Scrollbar width</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.RecalcMonth">
            <summary>
            Recalculates Month views
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigureMonthItems(System.Int32)">
            <summary>
            Configures the CalendarPanel subItems
            </summary>
            <param name="vCount">View count</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.RecalcYear">
            <summary>
            Recalculates all Year views
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigureYearItems(System.Int32,System.Int32)">
            <summary>
            Configures the CalendarPanel subItems
            </summary>
            <param name="vCount">View count</param>
            <param name="vsWidth">Vert Scrollbar width</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.RecalcTimeLine">
            <summary>
            Recalculates TimeLine views
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigureTItems(System.Int32)">
            <summary>
            Configures TimeLine view items
            </summary>
            <param name="vCount"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigDhScrollBar(System.Drawing.Rectangle@,System.Single@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures default view horizontal scrollBar
            </summary>
            <param name="r"></param>
            <param name="viewWidth"></param>
            <param name="vCount"></param>
            <param name="trWidth"></param>
            <param name="vsWidth"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.SetUpDhScrollBar">
            <summary>
            Sets up default view horizontal scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.UpdateDhScrollBar(System.Int32,System.Int32)">
            <summary>
            Updates default view horizontal scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.DhScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Processes default view horizontal
            scrollbar value changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.ConfigureTvScrollBar(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Configures TimeLine View vertical scrollbar
            </summary>
            <param name="r"></param>
            <param name="vCount"></param>
            <param name="vsWidth"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.SetUpTvScrollBar">
            <summary>
            Sets up TimeLine vertical scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.UpdateTvScrollBar(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Updates our vertical scrollbar
            </summary>
            <param name="r"></param>
            <param name="vsWidth"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.VScrollBar_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Processes TimeLine vertical scrollbar changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.PaintNonViewItems(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paints the non-BaseView items
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.PaintBaseViewItems(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paints the BaseView items
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarPanel.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the CalendarPanel specific properties to new instance of the item.
            </summary>
            <param name="copy">New CalendarPanel instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarPanel.HScrollBar">
            <summary>
            Gets the Horizontal scrollbar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarPanel.VScrollBar">
            <summary>
            Gets the Vertical scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.#ctor">
            <summary>
            CalendarView constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnSelectedViewChanged(DevComponents.DotNetBar.Schedule.eCalendarView,DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            SelectedViewChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnFixedAllDayPanelHeightChanged(System.Int32,System.Int32)">
            <summary>
            Propagates FixedAllDayPanelHeightChanged events
            </summary>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMaximumAllDayPanelHeightChanged(System.Int32,System.Int32)">
            <summary>
            Propagates MaximumAllDayPanelHeightChanged events
            </summary>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMinimumTimeSlotHeightChanged(System.Int32,System.Int32)">
            <summary>
            Propagates MinimumTimeSlotHeightChanged events
            </summary>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeSlotDurationChanged(System.Int32,System.Int32)">
            <summary>
            OnTimeSlotDurationChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnIs24HourFormatChanged(System.Boolean,System.Boolean)">
            <summary>
            OnIs24HourFormatChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnLabelTimeSlotsChanged(System.Boolean,System.Boolean)">
            <summary>
            OnLabelTimeSlotsChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnShowOnlyWorkDayHoursChanged(System.Boolean,System.Boolean)">
            <summary>
            OnShowOnlyWorkDayHoursChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnIsMonthSideBarVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            OnIsMonthSideBarVisibleChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnIsMonthMoreItemsIndicatorVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            OnIsMonthMoreItemsIndicatorVisibleChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnIsTimeRulerVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            OnIsTimeRulerVisibleChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnEnableDragDropChanged(System.Boolean,System.Boolean)">
            <summary>
            OnEnableDragDropChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewAllowDateSelectionChanged(System.Boolean,System.Boolean)">
            <summary>
            YearViewAllowDateSelectionChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewAppointmentLinkChanged(DevComponents.DotNetBar.Schedule.eYearViewDayLink,DevComponents.DotNetBar.Schedule.eYearViewDayLink)">
            <summary>
            YearViewAppointmentLinkChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewNonAppointmentLinkChanged(DevComponents.DotNetBar.Schedule.eYearViewDayLink,DevComponents.DotNetBar.Schedule.eYearViewDayLink)">
            <summary>
            YearViewNonAppointmentLinkChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearYearViewLinkViewChanged(DevComponents.DotNetBar.Schedule.eCalendarView,DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            YearYearViewLinkViewChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewLinkActionChanged(DevComponents.DotNetBar.Schedule.eYearViewLinkAction,DevComponents.DotNetBar.Schedule.eYearViewLinkAction)">
            <summary>
            YearViewLinkActionChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewLinkStyleChanged(DevComponents.DotNetBar.Schedule.eYearViewLinkStyle,DevComponents.DotNetBar.Schedule.eYearViewLinkStyle)">
            <summary>
            YearViewLinkStyleChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewShowGridLinesChanged(System.Boolean,System.Boolean)">
            <summary>
            OnYearViewShowGridLinesChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnWeekDayCanExtendRangeChanged(System.Boolean,System.Boolean)">
            <summary>
            OnWeekDayCanExtendRangeChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnModelChanged(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            OnModelChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnDateSelectionStartChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            OnDateSelectionStartChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnDateSelectionEndChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            OnDateSelectionEndChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnDayViewDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends DayViewDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnViewDateChanged(DevComponents.DotNetBar.Schedule.eCalendarView,System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Sends ViewDateChanged events
            </summary>
            <param name="calendarView">eCalendarView</param>
            <param name="oldStartDate">Old start date</param>
            <param name="newStartDate">New start date</param>
            <param name="oldEndDate">Old end date</param>
            <param name="newEndDate">New end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnWeekViewStartDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends WeekViewStartDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnWeekViewEndDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends WeekViewEndDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMonthViewStartDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends MonthViewStartDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMonthViewEndDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends MonthViewEndDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMonthViewHorizontalPaddingChanged(System.Int32,System.Int32)">
            <summary>
            Sends MonthViewHorizontalPaddingChanged events
            </summary>
            <param name="oldValue">Old padding</param>
            <param name="newValue">New padding</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewStartDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends OnYearViewStartDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnYearViewEndDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends OnYearViewEndDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineViewStartDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends TimeLineViewStartDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineViewEndDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends TimeLineViewEndDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.UpdateViewScroll(System.DateTime)">
            <summary>
            Updates the TimeLine scroll value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineViewScrollDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Sends TimeLineViewScrollDateChanged event
            </summary>
            <param name="oldDate">Old date</param>
            <param name="newDate">New date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.CalcTimeLineColumnCount(System.Boolean)">
            <summary>
            Calculates number of TimeLine columns
            </summary>
            <param name="alterEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineColumnWidthChanged(System.Int32,System.Int32)">
            <summary>
            Sends TimeLineColumnWidthChanged event
            </summary>
            <param name="oldValue">Old width</param>
            <param name="newValue">New width</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineHorizontalPaddingChanged(System.Int32,System.Int32)">
            <summary>
            Sends TimeLineHorizontalPaddingChanged events
            </summary>
            <param name="oldValue">Old padding</param>
            <param name="newValue">New padding</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineMaxColumnCountChanged(System.Int32,System.Int32)">
            <summary>
            Sends TimeLineMaxColumnCountChanged event
            </summary>
            <param name="oldValue">Old width</param>
            <param name="newValue">New width</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Sends TimeLineIntervalChanged events
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetValidInterval(System.Int32)">
            <summary>
            Coerces the user supplied interval period into
            an evenly divisible duration
            </summary>
            <param name="value">Original value</param>
            <returns>Validated value</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetValidIntervalMinutes(System.Int32)">
            <summary>
            Gets a valid minute interval from the
            given user supplied value
            </summary>
            <param name="value">Supplied value</param>
            <returns>Valid interval</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetValidIntervalHours(System.Int32)">
            <summary>
            Gets a valid hour interval from the
            given user supplied value
            </summary>
            <param name="value">Supplied value</param>
            <returns>Valid interval</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.UpdateBaseInterval">
            <summary>
            Updates the BaseInterval value (interval total minutes)
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineIntervalPeriodChanged(DevComponents.DotNetBar.Schedule.eTimeLinePeriod,DevComponents.DotNetBar.Schedule.eTimeLinePeriod)">
            <summary>
            Sends TimeLineIntervalPeriodChanged events
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.UpdateBasePeriod">
            <summary>
            Updates the view end date period given the
            new base interval
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineShowPeriodHeaderChanged(System.Boolean,System.Boolean)">
            <summary>
            Sends TimeLineShowPeriodHeaderChanged event
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineShowIntervalHeaderChanged(System.Boolean,System.Boolean)">
            <summary>
            Sends TimeLineShowIntervalHeader event
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineShowPageNavigationChanged(System.Boolean,System.Boolean)">
            <summary>
            Sends TimeLineShowPageNavigationChanged event
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineCondensedViewVisibilityChanged(DevComponents.DotNetBar.Schedule.eCondensedViewVisibility,DevComponents.DotNetBar.Schedule.eCondensedViewVisibility)">
            <summary>
            Sends OnTimeLineCondensedViewVisibilityChanged event
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnTimeLineCondensedViewHeightChanged(System.Int32,System.Int32)">
            <summary>
            Sends OnTimeLineCondensedViewHeightChanged event
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.RefreshDisplayTabs(System.Int32,System.Int32)">
            <summary>
            Refreshes the deselected and newly selected tabs
            </summary>
            <param name="oldValue">Old tab index</param>
            <param name="newValue">New tab index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.RefreshHTab(DevComponents.DotNetBar.Schedule.BaseView,System.Boolean)">
            <summary>
            Invalidates the given view tab
            </summary>
            <param name="view"></param>
            <param name="resetSelItem"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.RefreshVTab(DevComponents.DotNetBar.Schedule.TimeLineView,System.Boolean)">
            <summary>
            Invalidates the given view tab
            </summary>
            <param name="view"></param>
            <param name="resetSelItem"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InvalidateCondensedViews(DevComponents.DotNetBar.Schedule.TimeLineView)">
            <summary>
            InvalidateCondensedViews
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InvalidateTimeIndicators(DevComponents.DotNetBar.Schedule.BaseView)">
            <summary>
            InvalidateTimeIndicators
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InvalidateTimeIndicator(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.DotNetBar.Schedule.TimeIndicator,System.DateTime)">
            <summary>
            Invalidates TimeIndicator display area
             for the given view DateTime
            </summary>
            <param name="view"></param>
            <param name="ti"></param>
            <param name="dateTime"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnSelectedOwnerChanged(System.Int32,System.Int32)">
            <summary>
            Propagates SelectedOwnerChanged events
            </summary>
            <param name="oldValue">Old index</param>
            <param name="newValue">New index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ShowDate(System.DateTime)">
            <summary>
            Navigates the current calendar view to show the given date
            </summary>
            <param name="date">Date to show in the calendar view</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ShowViewDate(DevComponents.DotNetBar.Schedule.eCalendarView,System.DateTime)">
            <summary>
            Navigates the given view to show date
            </summary>
            <param name="view">View to navigate</param>
            <param name="date">Date to navigate to</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ScrollToTime(System.Int32,System.Int32)">
            <summary>
            Scrolls the Day/Week calendar view to the
            specified hour and minute
            </summary>
            <param name="hour">Hour to scroll to</param>
            <param name="minute">Minute to scroll to</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.EnsureVisible(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Ensures that the given Appointment is visible
            in the current view. It will change the view date and
            scroll as necessary to ensure the appointment is visible
            </summary>
            <param name="appointment">Appointment to bring into view</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.EnsureVisible(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Ensures that the given CustomCalendarItem is visible
            in the current view. It will change the view date and
            scroll as necessary to ensure the item is visible
            </summary>
            <param name="item">Appointment to bring into view</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.EnsureVisible(System.DateTime,System.DateTime)">
            <summary>
            Ensures that the given calendarItem is visible
            in the current view. It will change the view date and
            scroll as necessary to ensure it is visible
            </summary>
            <param name="startTime">Item start time</param>
            <param name="endTime">Item end time</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetAppointmentView(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the AppointmentView in the current displayed
            view that was created for the given appointment
            </summary>
            <returns>Reference to AppointmentView or null if not found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the default date selection from the given point. The startDate
            and endDate will vary based upon the view type (WeekDay / Month)
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">[out] Start date</param>
            <param name="endDate">[out] End date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetViewFromPoint(System.Drawing.Point)">
            <summary>
            Gets the View that contains the given point
            </summary>
            <param name="pt">Point in question</param>
            <returns>BaseView containing the given point, or null</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetSelectedView">
            <summary>
            Gets the current selected BaseView
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.HookModelEvents(System.Boolean)">
            <summary>
            Hooks needed events
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.StyleManagerStyleChanged(DevComponents.DotNetBar.eDotNetBarStyle)">
            <summary>
            Called by StyleManager to notify control that style on manager has changed and that control should refresh its appearance if
            its style is controlled by StyleManager.
            </summary>
            <param name="newStyle">New active style.</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.CalendarModelReminderNotification(System.Object,DevComponents.Schedule.Model.ReminderEventArgs)">
            <summary>
            ReminderNotification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReminderNotification(DevComponents.Schedule.Model.ReminderEventArgs)">
            <summary>
            Dispatches ReminderNotification to UI thread
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.CalendarModelAppointmentStartTimeReached(System.Object,DevComponents.Schedule.Model.AppointmentEventArgs)">
            <summary>
            AppointmentStartTimeReached
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.StartTimeReachedNotification(DevComponents.Schedule.Model.AppointmentEventArgs)">
            <summary>
            Dispatches AppointmentStartTimeReached to UI thread
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.CategoryColorsAppointmentCategoryColorCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            AppointmentCategoryColorCollectionChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorsTimeIndicatorCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            TimeIndicatorCollectionChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorsTimeIndicatorColorChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorColorChangedEventArgs)">
            <summary>
            Processes TimeIndicatorColorChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorsTimeIndicatorTimeChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs)">
            <summary>
            Processes TimeIndicatorTimeChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InitDefaultViews">
            <summary>
            InitDefaultViews
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.SetSelectedView(DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            Sets the selected view
            </summary>
            <param name="value">View to select</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallSingleCalendar(DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            Installs single-user calendar
            </summary>
            <param name="value">eCalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiCalendar(DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            Installs multi-user calendar
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiDayCalendar">
            <summary>
            Installs multi-user DayView calendar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiWeekCalendar">
            <summary>
            Installs multi-user WeekView calendar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiMonthCalendar">
            <summary>
            Installs multi-user MonthView calendar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiYearCalendar">
            <summary>
            Installs multi-user YearView calendar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallMultiTimeLineCalendar">
            <summary>
            Installs multi-user TimeLineView calendar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallTimerPanel">
            <summary>
            Installs the TimeRulerPanel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReleaseTimeRulerPanel">
            <summary>
            Release the TimeRulerPanel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReleaseTimeLineHeaderPanel">
            <summary>
            Release the TimeLineHeaderPanel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallTimeLineHScrollPanel">
            <summary>
            Installs the TimeLine Horizontal Scroll Panel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ScrollPanelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles Scroll Panel updates
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReleaseTimeLineHScrollPanel">
            <summary>
            Releases the Horizontal Scroll Panel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.InstallView(DevComponents.DotNetBar.Schedule.BaseView)">
            <summary>
            Installs the given View into the CalendarPanel
            </summary>
            <param name="view">View to install</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoAppointmentViewChanging(DevComponents.DotNetBar.Schedule.CalendarItem,System.String,System.DateTime,System.DateTime,DevComponents.DotNetBar.Schedule.eViewOperation,System.Boolean)">
            <summary>
            Routine to initiate the OnChange user events
            </summary>
            <param name="calendarItem">Affected item</param>
            <param name="ownerKey"></param>
            <param name="startTime">New start time</param>
            <param name="endTime">New end time</param>
            <param name="viewOperation">Move, resize, etc</param>
            <param name="isCopyDrag"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoBeforeAppointmentViewChange(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.eViewOperation)">
            <summary>
            Routine to initiate the BeforeAppointmentViewChange event
            </summary>
            <param name="baseView">BaseView</param>
            <param name="calendarItem">Affected item</param>
            <param name="viewOperation">Move, resize, etc</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnBeforeAppointmentViewChange(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.eViewOperation)">
            <summary>
            OnBeforeAppointmentViewChange event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnAppointmentViewChanging(DevComponents.DotNetBar.Schedule.CalendarItem,System.String,System.DateTime,System.DateTime,DevComponents.DotNetBar.Schedule.eViewOperation,System.Boolean)">
            <summary>
            OnAppointmentViewChanging event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoAppointmentViewChanged(DevComponents.DotNetBar.Schedule.CalendarItem,System.String,System.DateTime,System.DateTime,DevComponents.DotNetBar.Schedule.eViewOperation,System.Boolean)">
            <summary>
            DoAppointmentViewChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoGetAppointmentGroupId(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32)">
            <summary>
            DoGetDisplayTemplateText event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoGetDisplayTemplateText(DevComponents.DotNetBar.Schedule.CalendarItem,System.String,System.String)">
            <summary>
            DoGetDisplayTemplateText event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoAppointmentViewPreRender(DevComponents.DotNetBar.Schedule.CalendarItem,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Handles DoAppointmentViewPreRender events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoAppointmentViewPostRender(DevComponents.DotNetBar.Schedule.CalendarItem,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Handles DoAppointmentViewPostRender events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineViewRenderPeriodHeader(System.Drawing.Graphics,System.DateTime,System.DateTime,System.Drawing.Rectangle,System.String@)">
            <summary>
            Handles invocation of DoTimeLineViewRenderPeriodHeader event
            </summary>
            <param name="g"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="bounds"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineViewPreRenderSlotBackground(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.BaseView,System.DateTime,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState@)">
            <summary>
            Handles invocation of DoTimeLineViewPreRenderSlotBackground event
            </summary>
            <param name="g"></param>
            <param name="endTime"></param>
            <param name="bounds"></param>
            <param name="state"></param>
            <param name="view"></param>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineViewPostRenderSlotBackground(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.BaseView,System.DateTime,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState)">
            <summary>
            Handles invocation of DoTimeLineViewPostRenderSlotBackground event
            </summary>
            <param name="g"></param>
            <param name="endTime"></param>
            <param name="bounds"></param>
            <param name="state"></param>
            <param name="view"></param>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineViewRenderSlotBorder(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.TimeLineView,System.Int32,System.Boolean,DevComponents.DotNetBar.Schedule.eSlotDisplayState,System.Drawing.Point,System.Drawing.Point,System.Drawing.Pen)">
            <summary>
            DoTimeLineViewRenderSlotBorder
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="col"></param>
            <param name="hourly"></param>
            <param name="state"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pen"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineViewRenderViewBorder(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.TimeLineView,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            DoTimeLineViewRenderViewBorder
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="startColumn"></param>
            <param name="endColumn"></param>
            <param name="bounds"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineGetRowHeight(DevComponents.DotNetBar.Schedule.TimeLineGetRowHeightEventArgs)">
            <summary>
            DoTimeLineGetRowHeight
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineGetRowCollateId(DevComponents.DotNetBar.Schedule.TimeLineGetRowCollateIdEventArgs)">
            <summary>
            DoTimeLineGetRowCollateId
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoTimeLineGetHeaderText(DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel,System.DateTime,System.String@)">
            <summary>
            DoTimeLineGetHeaderText
            </summary>
            <param name="header"></param>
            <param name="date"></param>
            <param name="text"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoPageNavigatorClick(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.DotNetBar.Controls.PageNavigator,DevComponents.DotNetBar.Controls.PageNavigatorButton,System.DateTime@)">
            <summary>
            Handles invocation of PageNavigatorClick events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoYearViewLinkSelected(System.DateTime@,System.DateTime@,DevComponents.DotNetBar.Schedule.eCalendarView@)">
            <summary>
            Handles invocation of DoYearViewLinkSelected event
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoYearViewDrawDayBackground(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.YearMonth,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eYearViewLinkStyle@)">
            <summary>
            Handles invocation of YearViewDrawDayBackground event
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoYearViewDrawDayText(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.YearMonth,System.DateTime,System.Drawing.Rectangle)">
            <summary>
            Handles invocation of YearViewDrawDayText event
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoMonthViewPreRenderSlotBackground(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.BaseView,System.DateTime,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState@)">
            <summary>
            Handles invocation of MonthViewPreRenderSlotBackground event
            </summary>
            <param name="g"></param>
            <param name="endTime"></param>
            <param name="bounds"></param>
            <param name="state"></param>
            <param name="view"></param>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoMonthViewPostRenderSlotBackground(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.BaseView,System.DateTime,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState)">
            <summary>
            Handles invocation of MonthViewPostRenderSlotBackground event
            </summary>
            <param name="g"></param>
            <param name="endTime"></param>
            <param name="bounds"></param>
            <param name="state"></param>
            <param name="view"></param>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoRenderDaySlotAppearanceText(System.Drawing.Graphics,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.DaySlotAppearance,System.DateTime,System.DateTime,System.Boolean,System.String@)">
            <summary>
            Handles invocation of RenderDaySlotAppearanceText events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoRenderTabBackground(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,DevComponents.DotNetBar.Schedule.BaseView,System.Boolean)">
            <summary>
            Handles invocation of RenderTabBackground event
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoRenderTabContent(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,DevComponents.DotNetBar.Schedule.BaseView,System.String@,System.Boolean)">
            <summary>
            Handles invocation of RenderTabContent events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoRenderViewBorder(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.BaseView,System.Drawing.Rectangle)">
            <summary>
            DoRenderViewBorder
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoViewLoadComplete(DevComponents.DotNetBar.Schedule.BaseView)">
            <summary>
            Handles invocation of ViewLoadComplete events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DoMonthMoreItemsIndicatorClick(DevComponents.DotNetBar.Schedule.BaseView,DevComponents.DotNetBar.Schedule.eCalendarView@,System.DateTime@)">
            <summary>
            Handles invocation of MonthMoreItemsIndicatorClick events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DisplayedOwnersAdded(System.Int32)">
            <summary>
            This routine is called after an element has been
            added to the DisplayedOwners list.  It is responsible
            for updating the MultiCalendar views accordingly.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DisplayedOwnersRemoved(System.Int32,System.Int32)">
            <summary>
            This routine is called after an element has been
            removed from the DisplayedOwners list.  It is responsible
            for updating the MultiCalendar views accordingly.
            </summary>
            <param name="start">Starting index to remove</param>
            <param name="end">Ending index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.RemoveView(System.Int32)">
            <summary>
            Removes individual views
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.DisplayedOwnersSet(System.Int32)">
            <summary>
            This routine is called after an element has been
            reset in the DisplayedOwners list.  It is responsible
            for updating the MultiCalendar views accordingly.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetViewIndexFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view index from a given Point
            </summary>
            <param name="pt">Point</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderViews(System.Int32,System.Int32)">
            <summary>
            Reorders views in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnDisplayedOwnersChanged">
            <summary>
            SelectedViewChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderDayViews(System.Int32,System.Int32)">
            <summary>
            Reorders Day view in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderWeekViews(System.Int32,System.Int32)">
            <summary>
            Reorders Week view in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderMonthViews(System.Int32,System.Int32)">
            <summary>
            Reorders Month view in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderYearViews(System.Int32,System.Int32)">
            <summary>
            Reorders Year view in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderTimeLineViews(System.Int32,System.Int32)">
            <summary>
            Reorders TimeLine view in the MultiCalendar and
            DisplayOwner arrays
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ReorderDisplayedOwners(System.Int32,System.Int32)">
            <summary>
            Reorders the DisplayedOwner list
            </summary>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewView(System.Type,System.Int32)">
            <summary>
            Creates a new calendar base view of
            the given type
            </summary>
            <param name="type">Type of view to create</param>
            <param name="index">DisplayedOwner index</param>
            <returns>Created view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewDayView(System.Int32)">
            <summary>
            Creates new DayViews
            </summary>
            <param name="index">DisplayedOwner index</param>
            <returns>Created DayView</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewWeekView(System.Int32)">
            <summary>
            Creates new WeekViews
            </summary>
            <param name="index">DisplayedOwner index</param>
            <returns>Created WeekView</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewMonthView(System.Int32)">
            <summary>
            Creates new MonthViews
            </summary>
            <param name="index">DisplayedOwner index</param>
            <returns>Created MonthView</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewYearView(System.Int32)">
            <summary>
            Creates new YearView
            </summary>
            <param name="index">DisplayedOwner index</param>
            <returns>Created YearView</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.NewTimeLineView(System.Int32)">
            <summary>
            Creates new TimeLineViews
            </summary>
            <param name="index">DisplayedOwner index</param>
            <returns>Created WeekView</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.SetView(DevComponents.DotNetBar.Schedule.BaseView,System.Int32)">
            <summary>
            Completes the setup of the created view
            </summary>
            <param name="view">Newly created view</param>
            <param name="index">DisplayedOwner index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.GetViewColor(DevComponents.DotNetBar.Schedule.BaseView,System.Int32)">
            <summary>
            Gets the default eCalendarColor for the view
            </summary>
            <param name="view">View in question</param>
            <param name="index">Index of view</param>
            <returns>View color</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.UpdateAltViewCalendarColor(DevComponents.DotNetBar.Schedule.eCalendarColor,System.Int32)">
            <summary>
            Updates all view CalendarColor settings
            </summary>
            <param name="color">New color</param>
            <param name="index">Multi-user index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMouseWheel(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Mouse Wheel support
            </summary>
            <param name="hWnd">Window handle</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <returns>false</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes KeyDown events
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnResize(System.EventArgs)">
            <summary>
            Control resize processing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarView.OnCursorChanged(System.EventArgs)">
            <summary>
            OnCursorChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.ModelChanged">
            <summary>
            Occurs when CalendarModel has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.DateSelectionStartChanged">
            <summary>
            Occurs when DateSelectionStart has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.DateSelectionEndChanged">
            <summary>
            Occurs when DateSelectionEnd has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.ViewDateChanged">
            <summary>
            Occurs when the Day, Week, or Month view date(s) have changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.SelectedViewChanged">
            <summary>
            Occurs when SelectedView has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.SelectedOwnerChanged">
            <summary>
            Occurs when SelectedOwner has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.EnableDragDropChanged">
            <summary>
            Occurs when EnableDragDrop has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.DisplayedOwnersChanged">
            <summary>
            Occurs when DisplayedOwners has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorsChanged">
            <summary>
            Occurs when TimeIndicators has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorTimeChanged">
            <summary>
            Occurs when a TimeIndicator time has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicatorColorChanged">
            <summary>
            Occurs when a TimeIndicator Color has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.ViewDisplayCustomizationsChanged">
            <summary>
            Occurs when ViewDisplayCustomizations have changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.RenderTabBackground">
            <summary>
            Occurs when a Tab's background needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.RenderTabContent">
            <summary>
            Occurs when a Tab's content (text, etc) needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.RenderViewBorder">
            <summary>
            Occurs when a View Border needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.ViewLoadComplete">
            <summary>
            Occurs when a view load/reload has occurred
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.BeforeAppointmentViewChange">
            <summary>
            Occurs before an AppointmentView is about to change
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentViewChanging">
            <summary>
            Occurs when an AppointmentView is changing
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentViewChanged">
            <summary>
            Occurs when an AppointmentView has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentReminder">
            <summary>
            Occurs when Appointment Reminder has been reached.")]
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentStartTimeReached">
            <summary>
            Occurs when Appointment StartTime has been reached.")]
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.GetDisplayTemplateText">
            <summary>
            Occurs when Appointment DisplayTemplate text is needed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentViewPreRender">
            <summary>
            Occurs when an AppointmentView is about to be rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentViewPostRender">
            <summary>
            Occurs when an AppointmentView has been rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.GetAppointmentGroupId">
            <summary>
            Occurs when Appointment GroupId is needed (used to logically group
            appointments together when displayed in the WeekDay view)
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.DayViewDateChanged">
            <summary>
            Occurs when DayViewDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.WeekViewStartDateChanged">
            <summary>
            Occurs when WeekViewStartDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.WeekViewEndDateChanged">
            <summary>
            Occurs when WeekViewEndDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.LabelTimeSlotsChanged">
            <summary>
            Occurs when LabelTimeSlots has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeSlotDurationChanged">
            <summary>
            Occurs when TimeSlotDuration has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.Is24HourFormatChanged">
            <summary>
            Occurs when Is24HourFormat has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.FixedAllDayPanelHeightChanged">
            <summary>
            Occurs when FixedAllDayPanelHeight has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MaximumAllDayPanelHeightChanged">
            <summary>
            Occurs when MaximumAllDayPanelHeight has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MinimumTimeSlotHeightChanged">
            <summary>
            Occurs when MinimumTimeSlotHeight has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.IsTimeRulerVisibleChanged">
            <summary>
            Occurs when IsTimeRulerVisible has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.ShowOnlyWorkDayHoursChanged">
            <summary>
            Occurs when ShowOnlyWorkDayHours has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.RenderDaySlotAppearanceText">
            <summary>
            Occurs when DaySlotAppearance Text needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.WeekDayCanExtendRangeChanged">
            <summary>
            Occurs when WeekDayCanExtendRange has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.PreRenderWeekDayHeader">
            <summary>
            Occurs when the WeekDay header is about to be rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.PostRenderWeekDayHeader">
            <summary>
            Occurs when the WeekDay header has been rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewStartDateChanged">
            <summary>
            Occurs when MonthViewStartDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewEndDateChanged">
            <summary>
            Occurs when MonthViewEndDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.IsMonthSideBarVisibleChanged">
            <summary>
            Occurs when IsMonthSideBarVisible has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.IsMonthMoreItemsIndicatorVisibleChanged">
            <summary>
            Occurs when IsMonthMoreItemsIndicatorVisible has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewPreRenderSlotBackground">
            <summary>
            Occurs when a MonthView Slot Background is about to be rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewPostRenderSlotBackground">
            <summary>
            Occurs when a MonthView Slot Background has just been rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthMoreItemsIndicatorClick">
            <summary>
            Occurs when a MonthView 'MoreItemsIndicator' has been clicked
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.PreRenderMonthHeader">
            <summary>
            Occurs when the MonthView header is about to be rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.PostRenderMonthHeader">
            <summary>
            Occurs when the MonthView header has been rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewHorizontalPaddingChanged">
            <summary>
            Occurs when MonthViewHorizontalPadding has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewStartDateChanged">
            <summary>
            Occurs when YearViewStartDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewEndDateChanged">
            <summary>
            Occurs when YearViewEndDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewShowGridLinesChanged">
            <summary>
            Occurs when YearViewShowGridLines has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewAllowDateSelectionChanged">
            <summary>
            Occurs when YearViewAllowDateSelection has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkViewChanged">
            <summary>
            Occurs when YearViewLinkView has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewAppointmentLinkChanged">
            <summary>
            Occurs when YearViewAppointmentLink has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkActionChanged">
            <summary>
            Occurs when YearViewLinkAction has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewNonAppointmentLinkChanged">
            <summary>
            Occurs when YearViewNonAppointmentLink has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkStyleChanged">
            <summary>
            Occurs when YearViewLinkStyle has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkSelected">
            <summary>
            Occurs when YearViewLink has been selected
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewDrawDayBackground">
            <summary>
            Occurs when YearView Day Background needs drawn
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.YearViewDrawDayText">
            <summary>
            Occurs when YearView Day Text needs drawn
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewStartDateChanged">
            <summary>
            Occurs when TimeLineViewStartDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewEndDateChanged">
            <summary>
            Occurs when TimeLineViewEndDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewScrollDateChanged">
            <summary>
            Occurs when TimeLineViewViewScrollDate has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineIntervalChanged">
            <summary>
            Occurs when TimeLineInterval has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineIntervalPeriodChanged">
            <summary>
            Occurs when TimeLineIntervalPeriod has Changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineColumnWidthChanged">
            <summary>
            Occurs when TimeLineColumnWidth has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineMaxColumnCountChanged">
            <summary>
            Occurs when TimeLineMaxColumnCount has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineHorizontalPaddingChanged">
            <summary>
            Occurs when TimeLineHorizontalPadding has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowPeriodHeaderChanged">
            <summary>
            Occurs when TimeLineShowPeriodHeader has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowIntervalHeaderChanged">
            <summary>
            Occurs when TimeLineShowIntervalHeader has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowPageNavigationChanged">
            <summary>
            Occurs when TimeLineShowPageNavigation has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineCondensedViewVisibilityChanged">
            <summary>
            Occurs when TimeLineCondensedViewVisibility has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineCondensedViewHeightChanged">
            <summary>
            Occurs when TimeLineCondensedViewHeight has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineRenderPeriodHeader">
            <summary>
            Occurs when TimeLineView Period Header needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePreRenderSlotBackground">
            <summary>
            Occurs when a TimeLineView Slot Background is about to be rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePostRenderSlotBackground">
            <summary>
            Occurs when a TimeLineView Slot Background has just been rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineRenderSlotBorder">
            <summary>
            Occurs when a TimeLineView Slot Border needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineRenderViewBorder">
            <summary>
            Occurs when a TimeLineView Border needs rendered
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineGetRowHeight">
            <summary>
            Occurs when TimeLineView needs to get the Appointment row height
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineGetRowCollateId">
            <summary>
            Occurs when TimeLineView needs to get the row collate Id (used to group rows).
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.PageNavigatorClick">
            <summary>
            Occurs when a PageNavigator control button has been clicked
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineGetHeaderText">
            <summary>
            Occurs when the TimeLineView needs Date Header Text for a column
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.AllowTabReorder">
            <summary>
            Gets and sets whether the control will permit
            tab reordering via the user interface
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.AutoSyncViewDates">
            <summary>
            Gets or sets whether view dates are automatically
            synced to the currently viewed date range
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.AppointmentBorderWidth">
            <summary>
            Gets and sets the default appointment border width
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.EnableMarkup">
            <summary>
            Gets or sets whether Appointment text-markup support is enabled
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.SelectedView">
            <summary>
            Gets and sets the selected calendar view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.FixedAllDayPanelHeight">
            <summary>
            Gets and sets the fixed (constant) AllDayPanel
            height for all WeekDay views. Setting this value to -1
            will let the height change dynamically
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.HighlightCurrentDay">
            <summary>
            Gets or sets whether the current calendar day is highlighted
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MaximumAllDayPanelHeight">
            <summary>
            Gets or sets the maximum height of the All Day Appointment panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MinimumTimeSlotHeight">
            <summary>
            Gets or sets the minimum height of the WeekDay time slots
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiUserTabHeight">
            <summary>
            Gets and sets the Calendar multi-user tab height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicator">
            <summary>
            Gets or sets the default TimeIndicator
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeSlotDuration">
            <summary>
            Gets and sets the Time slot duration for all Day and Week views.
            This value, in minutes, must be greater than 0 and less than or
            equal to 30. Set values must also evenly divide the hour. This means
            that values like 6, 10 and 20 are valid values, whereas 7, 11 and 31 are not
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.Is24HourFormat">
            <summary>
            Gets and sets the 12 or 24 hour
            formatting that is used in the Day and Week views
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.LabelTimeSlots">
            <summary>
            Gets and sets whether time slot labels are
            displayed in the Day and Week view TimeRulerPanel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.ShowOnlyWorkDayHours">
            <summary>
            Gets and sets whether only WorkDay hours are
            displayed in the Day and Week views
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.ShowTabs">
            <summary>
            Gets and sets multi-user tab visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.IsMonthSideBarVisible">
            <summary>
            Gets and sets the default Month view SideBar visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.IsMonthMoreItemsIndicatorVisible">
            <summary>
            Gets and sets the Month view 'More Items' indicator visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.IsTimeRulerVisible">
            <summary>
            Gets and sets whether the Week/Day view TimeRuler is visible
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.EnableDragDrop">
            <summary>
            Gets and sets whether DragDrop across calendar views is enabled
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewAllowDateSelection">
            <summary>
            Gets and sets whether date selection is permitted
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewAppointmentLink">
            <summary>
            Gets and sets the YearView Appointment Link mode. This defines the
            interaction between the mouse and YearView days that contain appointments.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewNonAppointmentLink">
            <summary>
            Gets and sets the YearView Non-Appointment Link mode. This defines the
            interaction between the mouse and YearView days that do not contain appointments.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkView">
            <summary>
            Gets or sets the Link Calendar View. This defines the
            View that is activated when a YearView date 'link' is selected.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewLinkAction">
            <summary>
            Gets or sets the Link action. This defines the
            action that is taken when a YearView date 'link' is selected.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewAppointmentLinkStyle">
            <summary>
            Gets or sets the AppointmentLink display style. This defines the
            style that is used when 'highlighting' YearView date links.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewShowGridLines">
            <summary>
            Gets and sets the YearView grid lines visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.WeekDayCanExtendRange">
            <summary>
            Gets or sets whether the Week or Day View Start and End dates can be
            can be automatically extended by the control when the user presses
            the left or right arrow keys.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.CalendarModel">
            <summary>
            Gets and sets the calendar Model
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.CategoryColors">
            <summary>
            Appointment CategoryColors
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.CustomItems">
            <summary>
            Gets the collection of user defined custom
            CalendarItems
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DateSelectionStart">
            <summary>
            Gets or sets the selection start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DateSelectionEnd">
            <summary>
            Gets or sets the end date selection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DayView">
            <summary>
            Gets the Day View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DayViewDate">
            <summary>
            Gets and sets the DayView date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.HScrollBar">
            <summary>
            Gets and sets the Calendar Multiuser Horizontal scrollbar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.WeekView">
            <summary>
            Gets the Week View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.WeekViewStartDate">
            <summary>
            Gets and sets the week start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.WeekViewEndDate">
            <summary>
            Gets the week end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MonthView">
            <summary>
            Gets the Month View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewStartDate">
            <summary>
            Gets and sets the month start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewEndDate">
            <summary>
            Gets the month end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MonthViewHorizontalPadding">
            <summary>
            Gets and sets the horizontal padding used between
            items displayed in the Month view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearView">
            <summary>
            Gets the Year View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewStartDate">
            <summary>
            Gets and sets the YearView start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearViewEndDate">
            <summary>
            Gets the YearView end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineView">
            <summary>
            Gets the TimeLine View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewStartDate">
            <summary>
            Gets and sets the TimeLine start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewEndDate">
            <summary>
            Gets the TimeLine end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewScrollStartDate">
            <summary>
            Gets and sets the TimeLine Scrolled start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineViewScrollEndDate">
            <summary>
            Gets the TimeLine Scrolled end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineColumnWidth">
            <summary>
            Gets and sets the Calendar TimeLineColumnWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineHorizontalPadding">
            <summary>
            Gets and sets the horizontal padding used between
            items displayed in the TimeLine view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineIntervalHeaderHeight">
            <summary>
            Gets and sets the TimeLine Interval Header height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePeriodHeaderAlignment">
            <summary>
            Gets or sets the text alignment for the TimeLineView Period Header text
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePeriodHeaderEnableMarkup">
            <summary>
            Gets or sets whether text-markup support is enabled for the
            TimeLineView Period Header text
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineMaxColumnCount">
            <summary>
            Gets and sets the Calendar TimeLineMaxColumnCount
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineInterval">
            <summary>
            Gets and sets the Calendar TimeLineInterval
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePeriod">
            <summary>
            Gets and sets the Calendar TimeLinePeriod
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePeriodHeaderHeight">
            <summary>
            Gets or sets the TimeLine period header height. Set to -1 for default.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineHeight">
            <summary>
            Gets and sets the Calendar TimeLineHeight
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowPeriodHeader">
            <summary>
            Gets and sets the Calendar TimeLineShowPeriodHeader
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowIntervalHeader">
            <summary>
            Gets and sets the Calendar TimeLineShowIntervalHeader
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowPageNavigation">
            <summary>
            Gets and sets the Calendar TimeLineShowPageNavigation
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowHScrollBar">
            <summary>
            Gets or sets whether the Horizontal TimeLine scroll bar is shown
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineCondensedViewVisibility">
            <summary>
            Gets and sets the Condensed View visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineCondensedViewHeight">
            <summary>
            Gets and sets the Condensed View height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineStretchRowHeight">
            <summary>
            Gets or sets whether the row height is stretched
            to fill the TimeLine appointment content area
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineCanExtendRange">
            <summary>
            Gets or sets whether the TimeLine Start and End dates can be
            can be automatically extended by the control
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineShowCollateLines">
            <summary>
            Gets or sets whether the TimeLine view will draw collate lines
            between each group of collated rows (see TimeLineViewGetRowCollateId event)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineMultiUserTabWidth">
            <summary>
            Gets and sets the Calendar TimeLine horizontal tab width
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineMultiUserTabOrientation">
            <summary>
            Gets and sets the Calendar TimeLine horizontal tab orientation
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePageNavigatorTodayTooltip">
            <summary>
            Gets or sets the Calendar TimeLineView PageNavigator TodayTooltip
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePageNavigatorPreviousPageTooltip">
            <summary>
            Gets or sets the Calendar TimeLineView PageNavigator PreviousPageTooltip
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLinePageNavigatorNextPageTooltip">
            <summary>
            Gets or sets the Calendar TimeLineView PageNavigator NextPageTooltip
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.IsMultiCalendar">
            <summary>
            Gets the multiCalendar state or mode
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiCalendarDayViews">
            <summary>
            Gets the MultiCalendarDayViews collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiCalendarWeekViews">
            <summary>
            Gets the MultiCalendarWeekViews collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiCalendarMonthViews">
            <summary>
            Gets the MultiCalendarMonthViews collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiCalendarYearViews">
            <summary>
            Gets the MultiCalendarYearViews collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.MultiCalendarTimeLineViews">
            <summary>
            Gets the MultiCalendarTimeLineViews collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DisplayedOwners">
            <summary>
            Gets the DisplayedOwners collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.SelectedOwner">
            <summary>
            Gets and sets the current selected multi-user owner
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.SelectedOwnerIndex">
            <summary>
            Gets and sets the current selected multi-user owner
            using a DisplayedOwner index
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.SelectedAppointments">
            <summary>
            Gets the read-only collection of currently selected
            appointments in the current view
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeIndicators">
            <summary>
            TimeIndicators
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.ViewDisplayCustomizations">
            <summary>
            Gets the CalendarView ViewDisplayCustomizations
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.ViewWidth">
            <summary>
            Gets and sets the Calendar ViewWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.VScrollBar">
            <summary>
            Gets and sets the Calendar Multiuser Vertical scrollbar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.Style">
            <summary>
            Gets/Sets the visual style of the CalendarView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DefaultCalendarColor">
            <summary>
            Gets the default (cycling) color scheme
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.CalendarPanel">
            <summary>
            Gets the CalendarPanel object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.VsWidth">
            <summary>
            Gets the width of a vertical scrollbar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.HsHeight">
            <summary>
            Gets the height of a horizontal scrollbar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.AutoSyncDate">
            <summary>
            Gets and sets the AutoSyncDate
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.HasCategoryColors">
            <summary>
            Gets whether any CategoryColors have been defined
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeSliceHeight">
            <summary>
            Gets the default TimeSlice height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.NumberOfSlices">
            <summary>
            Gets the number of WeekDay time slices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.NumberOfActiveSlices">
            <summary>
            Gets the NumberOfActiveSlices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.StartSlice">
            <summary>
            WeekDay starting Slice
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.SlotsPerHour">
            <summary>
            Gets the number of slots per hour
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.WeekDayVScrollPanel">
            <summary>
            Gets the WeekDay Vertical Scroll panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.YearVScrollPanel">
            <summary>
            Gets the Year Vertical Scroll panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.AllDayPanelHeight">
            <summary>
            Gets the AllDay panel height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeRulerWidth">
            <summary>
            Gets the TimerRuler width
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.BaseInterval">
            <summary>
            Gets the base interval (total minutes)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineColumnCount">
            <summary>
            Gets the TimeLine column count
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.TimeLineHScrollPanel">
            <summary>
            Gets the TimeLine Horizontal Scroll panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.HasViewDisplayCustomizations">
            <summary>
            Gets whether the user has defined any ViewDisplayCustomizations
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.ViewCursor">
            <summary>
            Sets the local view cursor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarView.DefaultViewCursor">
            <summary>
            Gets the default cursor
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eViewOperation">
            <summary>
            Defines the available view operations
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCalendarView">
            <summary>
            Defines views available on CalendarView control.
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eTimeLinePeriod">
            <summary>
            Defines TimeLine interval period
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCondensedViewVisibility">
            <summary>
            Defines Condensed View visibility
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eYearViewDayLink">
            <summary>
            Defines link mode for YearView dates containing appointments
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eYearViewLinkAction">
            <summary>
            Defines link action for YearView dates containing Appointments or CalendarItems
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eYearViewLinkStyle">
            <summary>
            Defines link mode for YearView dates containing appointments
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.SelectedViewEventArgs">
            <summary>
            SelectedViewEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ModelEventArgs">
            <summary>
            ModelEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateSelectionEventArgs">
            <summary>
            DateSelectionEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LabelTimeSlotsChangedEventArgs">
            <summary>
            LabelTimeSlotsChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeSlotDurationChangedEventArgs">
            <summary>
            TimeSlotDurationChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.Is24HourFormatChangedEventArgs">
            <summary>
            Is24HourFormatChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.IsMonthSideBarVisibleChangedEventArgs">
            <summary>
            IsMonthSideBarVisibleChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.IsMonthMoreItemsIndicatorVisibleChangedEventArgs">
            <summary>
            IsMonthMoreItemsIndicatorVisibleChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.IsTimeRulerVisibleChangedEventArgs">
            <summary>
            IsTimeRulerVisibleChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.BeforeAppointmentViewChangeEventArgs">
            <summary>
            BeforeAppointmentViewChangeEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BeforeAppointmentViewChangeEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem being affected
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BeforeAppointmentViewChangeEventArgs.eViewOperation">
            <summary>
            Gets the operation to be performed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.BeforeAppointmentViewChangeEventArgs.IsCopyDrag">
            <summary>
            Gets whether the operation is being 
            performed on a drag created copy item
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs">
            <summary>
            AppointmentViewChangingEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem being changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.OwnerKey">
            <summary>
            Gets the OwnerKey to be applied. 
            This value will be null if no new OwnerKey is to be applied.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.StartTime">
            <summary>
            Gets the new StartTime to be applied
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.EndTime">
            <summary>
            Gets the new EndTime to be applied
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.eViewOperation">
            <summary>
            Gets the operation to be performed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangingEventArgs.IsCopyDrag">
            <summary>
            Gets whether the operation is being 
            performed on a drag created copy item
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs">
            <summary>
            AppointmentViewChangedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem that was changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.OldOwnerKey">
            <summary>
            Gets th old, previous OwnerKey
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.OldStartTime">
            <summary>
            Gets th old, previous start time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.OldEndTime">
            <summary>
            Gets the old, previous end time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.eViewOperation">
            <summary>
            Gets the operation that was performed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewChangedEventArgs.IsCopyDrag">
            <summary>
            Gets whether the operation is being 
            performed on a drag created copy item
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.AppointmentViewPostRenderEventArgs">
            <summary>
            AppointmentViewPostRenderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewPostRenderEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem being changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewPostRenderEventArgs.Graphics">
            <summary>
            Gets the associated Graphics object.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewPostRenderEventArgs.GraphicsPath">
            <summary>
            Gets the associated GraphicsPath. 
            This item may be null, based upon appointment style.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewPostRenderEventArgs.Bounds">
            <summary>
            Gets the item bounding rectangle
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.AppointmentViewPreRenderEventArgs">
            <summary>
            AppointmentViewPreRenderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentViewPreRenderEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel
            further item rendering.
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.GetAppointmentGroupIdEventArgs">
            <summary>
            GetAppointmentGroupIdEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.GetAppointmentGroupIdEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem that was changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.GetAppointmentGroupIdEventArgs.GroupId">
            <summary>
            Gets or sets the GroupId
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.GetDisplayTemplateTextEventArgs">
            <summary>
            GetDisplayTemplateTextEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.GetDisplayTemplateTextEventArgs.CalendarItem">
            <summary>
            Gets the CalendarItem that was changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.GetDisplayTemplateTextEventArgs.DisplayTemplate">
            <summary>
            Gets the DisplayTemplate
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.GetDisplayTemplateTextEventArgs.DisplayText">
            <summary>
            Gets or sets the Display Text for the given DisplayTemplate
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateChangeEventArgs">
            <summary>
            DateChangeEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs">
            <summary>
            ViewDateChangedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs.eCalendarView">
            <summary>
            Gets the eCalendarView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs.OldStartTime">
            <summary>
            Gets th old, previous start time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs.NewStartTime">
            <summary>
            Gets th new start time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs.OldEndTime">
            <summary>
            Gets the old, previous end time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs.NewEndTime">
            <summary>
            Gets the new end time
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.SelectedOwnerChangedEventArgs">
            <summary>
            SelectedOwnerChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.FixedAllDayPanelHeightChangedEventArgs">
            <summary>
            FixedAllDayPanelHeightChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MaximumAllDayPanelHeightChangedEventArgs">
            <summary>
            MaximumAllDayPanelHeightChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MinimumTimeSlotHeightChangedEventArgs">
            <summary>
            MinimumTimeSlotHeightChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineIntervalChangedEventArgs">
            <summary>
            TimeLineIntervalChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineIntervalPeriodChangedEventArgs">
            <summary>
            TimeLineIntervalPeriodChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.EnableDragDropChangedEventArgs">
            <summary>
            EnableDragDropChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineColumnWidthChangedEventArgs">
            <summary>
            TimeLineColumnWidthChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineMaxColumnCountChangedEventArgs">
            <summary>
            TimeLineMaxColumnCountChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineHorizontalPaddingChangedEventArgs">
            <summary>
            TimeLineHorizontalPaddingChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineShowPeriodHeaderChangedEventArgs">
            <summary>
            TimeLineShowPeriodHeaderChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineShowIntervalHeaderChangedEventArgs">
            <summary>
            TimeLineShowIntervalHeaderChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineShowPageNavigationChangedEventArgs">
            <summary>
            TimeLineShowPageNavigationChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineCondensedViewVisibilityChangedEventArgs">
            <summary>
            TimeLineCondensedViewVisibilityChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineCondensedViewHeightChangedEventArgs">
            <summary>
            TimeLineCondensedViewHeightChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs">
            <summary>
            TimeLineRenderPeriodHeaderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to render
            the Period Header
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs.Bounds">
            <summary>
            Gets the Bounding Text Rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs.StartTime">
            <summary>
            Gets the visible display StartTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs.EndTime">
            <summary>
            Gets the visible display EndTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderPeriodHeaderEventArgs.Text">
            <summary>
            Gets or sets the header Text
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLinePreRenderSlotBackgroundEventArgs">
            <summary>
            TimeLinePreRenderSlotBackgroundEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs">
            <summary>
            TimeLinePreRenderSlotBackgroundEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to render
            the slot
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.Bounds">
            <summary>
            Gets the slot bounding Rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.StartTime">
            <summary>
            Gets the slot StartTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.EndTime">
            <summary>
            Gets the slot EndTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.State">
            <summary>
            Gets the slot display state
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePostRenderSlotBackgroundEventArgs.View">
            <summary>
            Gets the associated View
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLinePreRenderSlotBackgroundEventArgs.Cancel">
            <summary>
            Gets or Sets whether the event should be canceled
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs">
            <summary>
            TimeLineRenderSlotBorderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to render
            the slot
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.Hourly">
            <summary>
            Gets whether the border if an hourly border
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.State">
            <summary>
            Gets the slot display state
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.StartTime">
            <summary>
            Gets the slot Starting Time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.StartPoint">
            <summary>
            Gets the slot starting Point
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.EndPoint">
            <summary>
            Gets the slot ending Point
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderSlotBorderEventArgs.Color">
            <summary>
            Gets the slot border Color
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs">
            <summary>
            TimeLineRenderViewBorderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to render
            the slot
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs.ColumnStart">
            <summary>
            Gets the starting column
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs.ColumnEnd">
            <summary>
            Gets the ending column
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineRenderViewBorderEventArgs.Color">
            <summary>
            Gets the default border Pen
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ShowOnlyWorkDayHoursChangedEventArgs">
            <summary>
            ShowOnlyWorkDayHoursChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineGetRowHeightEventArgs">
            <summary>
            TimeLineGetRowHeightEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetRowHeightEventArgs.Height">
            <summary>
            Gets or sets the Height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetRowHeightEventArgs.CalendarItem">
            <summary>
            Gets the associated CalendarItem
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineGetRowCollateIdEventArgs">
            <summary>
            TimeLineGetRowCollateIdEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetRowCollateIdEventArgs.CollateId">
            <summary>
            Gets or sets the row CollateId
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetRowCollateIdEventArgs.CalendarItem">
            <summary>
            Gets the associated CalendarItem
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.PageNavigatorClickEventArgs">
            <summary>
            PageNavigatorClickEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PageNavigatorClickEventArgs.PageNavigator">
            <summary>
            Gets the PageNavigator
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PageNavigatorClickEventArgs.View">
            <summary>
            Gets the associated CalendarView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PageNavigatorClickEventArgs.Button">
            <summary>
            Gets which button was clicked
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PageNavigatorClickEventArgs.NavigateTime">
            <summary>
            Gets or sets the time to navigate to 
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.AllowDateSelectionChangedEventArgs">
            <summary>
            AllowDateSelectionChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DayLinkChangedEventArgs">
            <summary>
            DayLinkChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LinkViewChangedEventArgs">
            <summary>
            LinkViewChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LinkViewActionChangedEventArgs">
            <summary>
            LinkViewActionChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LinkViewStyleChangedEventArgs">
            <summary>
            LinkViewStyleChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LinkViewSelectedEventArgs">
            <summary>
            LinkViewSelectedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.LinkViewSelectedEventArgs.StartDate">
            <summary>
            Gets the selected StartDate
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.LinkViewSelectedEventArgs.EndDate">
            <summary>
            Gets the selected EndDate
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.LinkViewSelectedEventArgs.ECalendarView">
            <summary>
            Gets the eCalendarView to activate
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ShowGridLinesChangedEventArgs">
            <summary>
            ShowGridLinesChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs">
            <summary>
            YearViewDrawDayBackgroundEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs.YearMonth">
            <summary>
            Gets the YearMonth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs.Date">
            <summary>
            Gets the date to draw
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayBackgroundEventArgs.LinkStyle">
            <summary>
            Gets or sets the Appointment Link style
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.YearViewDrawDayTextEventArgs">
            <summary>
            YearViewDrawDayTextEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayTextEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayTextEventArgs.YearMonth">
            <summary>
            Gets the YearMonth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayTextEventArgs.Date">
            <summary>
            Gets the date to draw
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearViewDrawDayTextEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs">
            <summary>
            RenderDaySlotAppearanceTextEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.Appearance">
            <summary>
            Gets the DaySlotAppearance
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.StartTime">
            <summary>
            Gets the start DateTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.EndTime">
            <summary>
            Gets the end DateTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.Selected">
            <summary>
            Gets whether the area is selected
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderDaySlotAppearanceTextEventArgs.Text">
            <summary>
            Gets or Sets the Text to render
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MonthViewPreRenderSlotBackgroundEventArgs">
            <summary>
            MonthViewPreRenderSlotBackgroundEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MonthViewPostRenderSlotBackgroundEventArgs">
            <summary>
            MonthViewPreRenderSlotBackgroundEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MonthViewHorizontalPaddingChangedEventArgs">
            <summary>
            MonthViewHorizontalPaddingChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.RenderTabBackgroundEventArgs">
            <summary>
            RenderTabBackgroundEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderTabBackgroundEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderTabBackgroundEventArgs.Path">
            <summary>
            Gets the tab GraphicsPath
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderTabBackgroundEventArgs.View">
            <summary>
            Gets the tab BaseView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderTabBackgroundEventArgs.IsSelected">
            <summary>
            Gets whether the tab is selected or not
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.RenderTabContentEventArgs">
            <summary>
            RenderTabBackgroundEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderTabContentEventArgs.Text">
            <summary>
            Gets or sets the tab text
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.RenderViewBorderEventArgs">
            <summary>
            RenderViewBorderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderViewBorderEventArgs.Graphics">
            <summary>
            Gets the Graphics object used to render
            the slot
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.RenderViewBorderEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ViewLoadCompleteEventArgs">
            <summary>
            ViewLoadCompleteEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewLoadCompleteEventArgs.View">
            <summary>
            Gets the tab BaseView
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.MonthMoreItemsIndicatorClickEventArgs">
            <summary>
            MonthMoreItemsIndicatorClickEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthMoreItemsIndicatorClickEventArgs.View">
            <summary>
            Gets the associated MonthView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthMoreItemsIndicatorClickEventArgs.SelectView">
            <summary>
            Gets the eCalendarView to select
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthMoreItemsIndicatorClickEventArgs.StartTime">
            <summary>
            Gets or sets the starting time to navigate to 
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeLineGetHeaderTextEventArgs">
            <summary>
            TimeLineGetHeaderTextEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetHeaderTextEventArgs.Header">
            <summary>
            Gets the associated TimeLineHeaderPanel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetHeaderTextEventArgs.Date">
            <summary>
            Gets the Header date / time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineGetHeaderTextEventArgs.Text">
            <summary>
            Gets or sets the Header Text
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.WeekDayCanExtendRangeChangedEventArgs">
            <summary>
            WeekDayCanExtendRangeChangedEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.PostRenderWeekDayHeaderEventArgs">
            <summary>
            PostRenderWeekDayHeaderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderWeekDayHeaderEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderWeekDayHeaderEventArgs.View">
            <summary>
            Gets the WeekDayView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderWeekDayHeaderEventArgs.ColumnIndex">
            <summary>
            Gets the DayColumn index
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderWeekDayHeaderEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.PreRenderWeekDayHeaderEventArgs">
            <summary>
            PreRenderWeekDayHeaderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PreRenderWeekDayHeaderEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel default rendering
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.PostRenderMonthHeaderEventArgs">
            <summary>
            PostRenderMonthHeaderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderMonthHeaderEventArgs.Graphics">
            <summary>
            Gets the Graphics object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderMonthHeaderEventArgs.View">
            <summary>
            Gets the MonthView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderMonthHeaderEventArgs.ColumnIndex">
            <summary>
            Gets the column index
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PostRenderMonthHeaderEventArgs.Bounds">
            <summary>
            Gets the bounding rectangle
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.PreRenderMonthHeaderEventArgs">
            <summary>
            PreRenderMonthHeaderEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PreRenderMonthHeaderEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel default rendering
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.FindDisplayedOwner(System.String)">
            <summary>
            Locates the view index from the given
            DisplayedOwner text
            </summary>
            <param name="key">DisplayedOwner</param>
            <returns>View index, or -1 if not found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.GetView(System.Int32)">
            <summary>
            Returns the given view at the specified index.
            
            This routine will initiate the creation
            of the view if it has not previously been created.
            </summary>
            <param name="index">Index</param>
            <returns>Requested view</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.Count">
            <summary>
            Gets the count of items in the collection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.Item(System.Int32)">
            <summary>
            Gets the view at the given index
            </summary>
            <param name="index">Index</param>
            <returns>Requested view</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.Item(System.String)">
            <summary>
            Gets the view for the given DisplayedOwner
            </summary>
            <param name="key">DisplayedOwner</param>
            <returns>Requested view</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarViewCollection`1.Views">
            <summary>
            Gets the collection view list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.AddRange(System.String[])">
            <summary>
            Adds a range of Owners to the DisplayedOwner collection
            </summary>
            <param name="items">Array of Owners to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.RemoveItem(System.Int32)">
            <summary>
            Processes list RemoveItem calls
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.InsertItem(System.Int32,System.String)">
            <summary>
            Processes list InsertItem calls
            </summary>
            <param name="index">Index to add</param>
            <param name="item">Text to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.SetItem(System.Int32,System.String)">
            <summary>
            Processes list SetItem calls (e.g. replace)
            </summary>
            <param name="index">Index to replace</param>
            <param name="newItem">Text to replace</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.ClearItems">
            <summary>
            Processes list Clear calls (e.g. remove all)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DisplayedOwnerCollection.SuspendUpdate">
            <summary>
            Gets and sets the SuspendUpdate state
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations">
            <summary>
            ViewDisplayCustomizations
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            ViewDisplayCustomizations
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations._DaySlotBackgrounds_CollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles DaySlotBackgrounds CollectionChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.GetDaySlotAppearance(System.String,System.DateTime,DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Retrieves the DaySlotAppearance from the given criteris
            </summary>
            <param name="ownerKey"></param>
            <param name="dateTime"></param>
            <param name="wkStart"></param>
            <param name="wkEnd"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.IsValidSlot(DevComponents.DotNetBar.Schedule.DaySlotBackground,System.DateTime,DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Determines if the given slot is a valid
            day and time slot
            </summary>
            <param name="dsb"></param>
            <param name="dateTime"></param>
            <param name="wkStart"></param>
            <param name="wkEnd"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.IsValidTimeSlot(DevComponents.DotNetBar.Schedule.DaySlotBackground,DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Determines if the given slot is a valid time slot
            </summary>
            <param name="dsb"></param>
            <param name="wkStart"></param>
            <param name="wkEnd"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.IsValidDaySlot(DevComponents.DotNetBar.Schedule.DaySlotBackground,System.DateTime)">
            <summary>
            Determines if the given slot is a valid time slot
            </summary>
            <param name="dsb"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.IsValidOwner(DevComponents.DotNetBar.Schedule.DaySlotBackground,System.String)">
            <summary>
            Determines if the given owner key is valid for the slot
            </summary>
            <param name="dsb"></param>
            <param name="ownerKey"></param>
            <returns></returns>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.CollectionChanged">
            <summary>
            Occurs when the ViewDisplayCustomizations have changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ViewDisplayCustomizations.DaySlotBackgrounds">
            <summary>
            DaySlotBackgrounds
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds">
            <summary>
            DaySlotBackgrounds
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.Remove(System.DateTime)">
            <summary>
            Removes the DaySlotBackground for the given DateTime
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.Remove(System.DayOfWeek)">
            <summary>
            Removes the DaySlotBackground for the given DayOfWeek
            </summary>
            <param name="dayOfWeek"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.AddRange(DevComponents.DotNetBar.Schedule.DaySlotBackgrounds)">
            <summary>
            Adds a range of DaySlotBackgrounds
            </summary>
            <param name="daySlotBackgrounds"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.RemoveItem(System.Int32)">
            <summary>
            Processes list RemoveItem calls
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.InsertItem(System.Int32,DevComponents.DotNetBar.Schedule.DaySlotBackground)">
            <summary>
            Processes list InsertItem calls
            </summary>
            <param name="index">Index to add</param>
            <param name="item">Text to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.SetItem(System.Int32,DevComponents.DotNetBar.Schedule.DaySlotBackground)">
            <summary>
            Processes list SetItem calls (e.g. replace)
            </summary>
            <param name="index">Index to replace</param>
            <param name="newItem">Text to replace</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.ClearItems">
            <summary>
            Processes list Clear calls (e.g. remove all)
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.OnCollectionChanged">
            <summary>
            Handles collection change notification
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.CollectionChanged">
            <summary>
            Occurs when the DaySlotBackgrounds collection changes
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackgrounds.SuspendUpdate">
            <summary>
            Gets and sets the SuspendUpdate state
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DaySlotBackground">
            <summary>
            DaySlotBackground
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackground.OwnerKeys_CollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Processes OwnerKeys_CollectionChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaySlotBackground.OnCollectionChanged">
            <summary>
            Handles collection change notification
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.DaySlotBackground.CollectionChanged">
            <summary>
            Occurs when the DaySlotBackground collection changes
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.Appearance">
            <summary>
            Gets or sets the Appearance
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.DateTime">
            <summary>
            Gets or sets the DateTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.DayOfWeek">
            <summary>
            Gets or sets the DayOfWeek
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.OwnerKeys">
            <summary>
            Gets or sets the OwnerKeyCollection
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.DaySlotBackgrounds">
            <summary>
            Gets or sets the DaySlotBackgrounds
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotBackground.HasOwnerKeys">
            <summary>
            HasOwnerKeys
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DaySlotAppearance">
            <summary>
            DaySlotAppearance
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.BackColor">
            <summary>
            Gets or sets the BackColor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.EndTime">
            <summary>
            Gets or sets the Appearance end time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.Font">
            <summary>
            Gets or sets the DaySlot Font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.HalfHourBorderColor">
            <summary>
            Gets or sets the HalfHourBorderColor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.HourBorderColor">
            <summary>
            Gets or sets the HourBorderColor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.OnTop">
            <summary>
            Gets or sets whether the Text is on top of the borders
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.StartTime">
            <summary>
            Gets or sets the Appearance start time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.Text">
            <summary>
            Gets or sets the Text
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.TextAlignment">
            <summary>
            Gets or sets the Text Alignment
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.TextColor">
            <summary>
            Gets or sets the Text Color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.SelectedTextColor">
            <summary>
            Gets or sets the Selected Text Color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaySlotAppearance.ShowTextWhenSelected">
            <summary>
            Gets or sets wheter the Text is displayed when cells are selected
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.OwnerKeyCollection">
            <summary>
            OwnerKeyCollection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.RemoveItem(System.Int32)">
            <summary>
            Processes list RemoveItem calls
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.InsertItem(System.Int32,System.String)">
            <summary>
            Processes list InsertItem calls
            </summary>
            <param name="index">Index to add</param>
            <param name="item">Text to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.SetItem(System.Int32,System.String)">
            <summary>
            Processes list SetItem calls (e.g. replace)
            </summary>
            <param name="index">Index to replace</param>
            <param name="newItem">Text to replace</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.ClearItems">
            <summary>
            Processes list Clear calls (e.g. remove all)
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.OnCollectionChanged">
            <summary>
            Handles collection change notification
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.OwnerKeyCollection.CollectionChanged">
            <summary>
            Occurs when the OwnerKeyCollection changes
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,DevComponents.DotNetBar.Schedule.ColorDef)">
            <summary>
            AppointmentCategoryColor
            </summary>
            <param name="colorName">Color name</param>
            <param name="textColor">Text Color</param>
            <param name="borderColor">Border Color</param>
            <param name="backColor">Background Color</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.#ctor(System.String)">
            <summary>
            AppointmentCategoryColor
            </summary>
            <param name="colorName">Color name</param>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.AppointmentCategoryColorChanged">
            <summary>
            Occurs when AppointmentCategoryColorCollection has changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.ColorName">
            <summary>
            Color name
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.TextColor">
            <summary>
            Text Color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.BorderColor">
            <summary>
            Border Color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColor.BackColor">
            <summary>
            Background Color
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.#ctor">
            <summary>
            AppointmentCategoryColorCollection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Add(DevComponents.DotNetBar.Schedule.AppointmentCategoryColor)">
            <summary>
            Adds a AppointmentCategoryColor to the collection
            </summary>
            <param name="acc"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Remove(System.String)">
            <summary>
            Removes an entry from the collection, by color name
            </summary>
            <param name="colorName">Color name</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Remove(DevComponents.DotNetBar.Schedule.AppointmentCategoryColor)">
            <summary>
            Removes an entry from the collection, by AppointmentCategoryColor
            </summary>
            <param name="categoryColor">AppointmentCategoryColor</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Clear">
            <summary>
            Clears the AppointmentCategoryColor collection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.CategoryColorChanged(System.Object,System.EventArgs)">
            <summary>
            CategoryColorChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.OnAppointmentCategoryColorCollectionChanged">
            <summary>
            OnAppointmentCategoryColorCollectionChanged
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.AppointmentCategoryColorCollectionChanged">
            <summary>
            Occurs when AppointmentCategoryColorCollection has changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Count">
            <summary>
            Gets the Count of items defined
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Items">
            <summary>
            Gets the entire list of added AppointmentCategoryColor items
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AppointmentCategoryColorCollection.Item(System.String)">
            <summary>
            Gets the AppointmentCategoryColor from the given
            color name string index
            </summary>
            <param name="colorName"></param>
            <returns></returns>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eAppointmentPart">
            <summary>
            Appointment parts enum
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.#ctor(DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Constructor
            </summary>
            <param name="colorSch">eCalendarColor</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.GetColor(System.Int32)">
            <summary>
            Gets the Color of the calendar part
            </summary>
            <param name="part">Calendar part</param>
            <returns>Color</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.GetColorDef(System.Int32)">
            <summary>
            Gets the ColorDef of the part
            </summary>
            <param name="part">Calendar part</param>
            <returns>Part ColorDef</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.BrushPart(System.Int32,System.Drawing.Rectangle)">
            <summary>
            Creates a LinearGradientBrush from the given part
            </summary>
            <param name="part">Color part</param>
            <param name="r">Gradient Rectangle</param>
            <returns>Created Brush</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.BrushPart(DevComponents.DotNetBar.Schedule.ColorDef,System.Drawing.Rectangle)">
            <summary>
            Creates a LinearGradientBrush from the given ColorDef
            </summary>
            <param name="cDef">ColorDef</param>
            <param name="r">Gradient Rectangle</param>
            <returns>Created Brush</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.BrushPart(DevComponents.DotNetBar.Schedule.ColorDef,System.Drawing.Rectangle,System.Single)">
            <summary>
            Creates a LinearGradientBrush from the given ColorDef
            </summary>
            <param name="cDef">ColorDef</param>
            <param name="r">Gradient Rectangle</param>
            <param name="angle">Gradient angle</param>
            <returns>Created Brush</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.GetColorBlend(DevComponents.DotNetBar.Schedule.ColorDef)">
            <summary>
            Creates a ColorBlend from the given ColorDef
            </summary>
            <param name="cDef">ColorDef for blend</param>
            <returns>ColorBlend</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarColor.GetPositions(DevComponents.DotNetBar.Schedule.ColorDef)">
            <summary>
            Gets the array of color positions
            </summary>
            <param name="cDef"></param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarColor.ColorTable">
            <summary>
            Gets and sets ColorTable
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CalendarColor.ColorSch">
            <summary>
            Gets and sets calendar color scheme
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AppointmentColor.SetColorTable">
            <summary>
            Sets our current color table to either
            a local or global definition
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCalendarMonthPart">
            <summary>
            Month calendar parts enum
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarMonthColor.#ctor(DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Constructor
            </summary>
            <param name="eColor">Default color</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarMonthColor.SetColorTable">
            <summary>
            Sets our current color table to either
            a local or global definition
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCalendarViewPart">
            <summary>
            View calendar parts enum
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCalendarColor">
            <summary>
            Defines available custom calendar color
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarViewColor.#ctor(DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Constructor
            </summary>
            <param name="eColor">Default color</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarViewColor.SetColorTable">
            <summary>
            Sets our current color table to either
            a local or global definition
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eCalendarWeekDayPart">
            <summary>
            Week/Day calendar parts enum
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarWeekDayColor.#ctor(DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Constructor
            </summary>
            <param name="eColor">Default color</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CalendarWeekDayColor.SetColorTable">
            <summary>
            Sets our current color table to either
            a local or global definition
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eTimeRulerPart">
            <summary>
            Week/Day calendar parts enum
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerColor.SetColorTable">
            <summary>
            Sets our current color table to either
            a local or global definition
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItem.OnOwnerKeyChanged(System.String,System.String)">
            <summary>
            Sends ChangedEvent for the OwnerKey property
            </summary>
            <param name="oldValue">Old OwnerKey</param>
            <param name="newValue">New OwnerKey</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItem.OnLockedChanged(System.Boolean,System.Boolean)">
            <summary>
            Sends ChangedEvent for the Locked property
            </summary>
            <param name="oldValue">Old OwnerKey</param>
            <param name="newValue">New OwnerKey</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItem.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItem.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the CustomCalendarItem specific properties to new instance of the item.
            </summary>
            <param name="copy">New CustomCalendarItem instance</param>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CustomCalendarItem.OwnerKeyChanged">
            <summary>
            Occurs when the OwnerKey has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CustomCalendarItem.LockedChanged">
            <summary>
            Occurs when Locked has changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.CollateId">
            <summary>
            Gets or sets the CollateId used for TimeLine row collation.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.OwnerKey">
            <summary>
            Gets and sets the item OwnerKey
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.Locked">
            <summary>
            Gets and set whether modification is enabled
            through the user interface"
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.BaseCalendarItem">
            <summary>
            Base CalendarItem
            
            This property holds the base CalendarItem from which
            each displayed CustomItem (of this type) is based.
            
            In order to keep all displayed items "in-sync", it is necessary
            to propagate data to and from the base CalendarItem.  This is
            accomplished via hooking those members you are interested in, at
            both the item (HookEvents) and BaseCalendarItem (HookBaseEvents)
            level.
            
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.CategoryColor">
            <summary>
            Gets or sets the category color used for TimeLine CondensedView markers.
            Use static members on Appointment class to assign the category color for example Appointment.CategoryRed.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.IsSelected">
            <summary>
            Gets or sets whether the item is selected.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.CustomCalendarItem.Visible">
            <summary>
            Gets and sets the item Visibility
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.OwnerKeyChangedEventArgs">
            <summary>
            OwnerKeyChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.LockedChangedEventArgs">
            <summary>
            LockedChangedEventArgs
            </summary>
            
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.CategoryColorChangedEventArgs">
            <summary>
            CategoryColorChangedEventArgs
            </summary>
            
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.AddRange(DevComponents.DotNetBar.Schedule.CustomCalendarItem[])">
            <summary>
            Adds a range of CustomCalendarItems to the collection
            </summary>
            <param name="items">Array of items to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.Remove(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Removes a CustomCalendarItem from
            the collection.
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.RemoveItem(System.Int32)">
            <summary>
            Processes list RemoveItem calls
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.InsertItem(System.Int32,DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Processes list InsertItem calls
            </summary>
            <param name="index">Index to add</param>
            <param name="item">CustomCalendarItem to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.SetItem(System.Int32,DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Processes list SetItem calls (e.g. replace)
            </summary>
            <param name="index">Index to replace</param>
            <param name="newItem">CustomCalendarItem to replace</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ClearItems">
            <summary>
            Processes list Clear calls (e.g. remove all)
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.HookItem(DevComponents.DotNetBar.Schedule.CustomCalendarItem,System.Boolean)">
            <summary>
            Hooks needed system events
            </summary>
            <param name="item"></param>
            <param name="hook"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemOwnerKeyChanged(System.Object,System.EventArgs)">
            <summary>
            Processes OwnerKeyChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemStartTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Processes StartTimeChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemEndTimeChanged(System.Object,System.EventArgs)">
            <summary>
            Processes EndTimeChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemCategoryColorChanged(System.Object,System.EventArgs)">
            <summary>
            Processes ItemCategoryColorChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Processes ItemVisibleChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.ItemCollateIdChanged(System.Object,System.EventArgs)">
            <summary>
            Processes ItemCollateIdChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.OnCollectionChanged">
            <summary>
            Propagates CollectionChanged events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.BeginUpdate">
            <summary>
            Begins Update block
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.EndUpdate">
            <summary>
            Ends update block
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.CustomCalendarItemCollection.CollectionChanged">
            <summary>
            Occurs when the collection has changed
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.GetNext30Minute(System.DateTime,System.Boolean)">
            <summary>
            Returns the date that is 30 minutes before or after input date if input date minute is 0 or 30. Otherwise it returns next increment to 0 or 30.
            </summary>
            <param name="date">Date and time.</param>
            <param name="forward">Indicates whether to add or subtract minutes.</param>
            <returns>New date time.</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.GetDateForDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns date that starts with the day. If passed date is not on the requested date function returns first date with day that is before passed date.
            </summary>
            <param name="date">Date to inspect.</param>
            <param name="dayOfWeek">Day of week</param>
            <returns>Date that starts on given day of week.</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.IsSameMonth(System.DateTime,System.DateTime)">
            <summary>
            Returns whether two days fall on same month and year.
            </summary>
            <param name="date1">First date</param>
            <param name="date2">Second date</param>
            <returns>true if dates are on same month and year</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.TimePeriodsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns true if time periods overlap.
            </summary>
            <param name="startTime1">Start of first period.</param>
            <param name="endTime1">End of first period.</param>
            <param name="startTime2">Start of second period.</param>
            <param name="endTime2">End of second period.</param>
            <returns>true if periods overlap</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.GetThreeLetterMonth(System.DateTime)">
            <summary>
            Gets the abbreviated month name for
            the given date
            </summary>
            <param name="date">Date</param>
            <returns>Abbreviated name</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateHelper.GetThreeLetterDayOfWeek(System.DayOfWeek)">
            <summary>
            Gets the abbreviated day name for
            the given date
            </summary>
            <param name="dayOfWeek">Day of week</param>
            <returns>Abbreviated name</returns>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateNavigator">
            <summary>
            Represents date-navigation control that is used with CalendarView to provide calendar date navigation.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.CalendarViewViewDateChanged(System.Object,DevComponents.DotNetBar.Schedule.ViewDateChangedEventArgs)">
            <summary>
            Handles CalendarView ViewDateChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.CalendarSelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Handle CalendarView SelectedViewChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.CalendarViewTimeLineViewScrollDateChanged(System.Object,System.EventArgs)">
            <summary>
            Handles CalendarView_TimeLineViewScrollDateChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.StyleManagerStyleChanged(DevComponents.DotNetBar.eDotNetBarStyle)">
            <summary>
            Called by StyleManager to notify control that style on manager has changed and that control should refresh its appearance if
            its style is controlled by StyleManager.
            </summary>
            <param name="newStyle">New active style.</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateForwardClick(System.Object,System.EventArgs)">
            <summary>
            Handles NavigateForward button clicks
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateBackClick(System.Object,System.EventArgs)">
            <summary>
            Handles NavigateBack button clicks
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateDatesForward">
            <summary>
            Navigates forward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateDayForward">
            <summary>
            NavigateDayForward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateWeekForward">
            <summary>
            NavigateWeekForward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateMonthForward">
            <summary>
            NavigateMonthForward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateYearForward">
            <summary>
            NavigateYearForward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateTimeLineForward">
            <summary>
            NavigateTimeLineForward
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.GetForwardPeriodDate(System.DateTime)">
            <summary>
            Gets the next forward TimeLine Period Date
            </summary>
            <param name="calendarStart">Current date</param>
            <returns>Next Period Date</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateDatesBack">
            <summary>
            Navigates back
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateDayBack">
            <summary>
            NavigateDayBack
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateWeekBack">
            <summary>
            NavigateWeekBack
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateMonthBack">
            <summary>
            NavigateMonthBack
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateYearBack">
            <summary>
            NavigateYearBack
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.NavigateTimeLineBack">
            <summary>
            NavigateTimeLineBack
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.GetBackPeriodDate(System.DateTime)">
            <summary>
            Gets the next back TimeLine Period Date
            </summary>
            <param name="calendarStart">Current date</param>
            <returns>Next back Period Date</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.CountMonthSpan(System.DateTime,System.DateTime)">
            <summary>
            CountMonthSpan
            </summary>
            <param name="calendarStart"></param>
            <param name="calendarEnd"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateDisplay">
            <summary>
            Updates the Date Label text
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateDayDisplay(System.IFormatProvider,System.DateTime)">
            <summary>
            Updates the DayView display
            </summary>
            <param name="formatProvider"></param>
            <param name="start"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateWeekDisplay(System.IFormatProvider,System.DateTime,System.DateTime)">
            <summary>
            Updates the WeekView display
            </summary>
            <param name="formatProvider"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateMonthDisplay(System.IFormatProvider,System.DateTime,System.DateTime)">
            <summary>
            Updates the MonthView display
            </summary>
            <param name="formatProvider"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateYearDisplay(System.IFormatProvider,System.DateTime,System.DateTime)">
            <summary>
            Updates the YearView display
            </summary>
            <param name="formatProvider"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateTimeLineDisplay(System.IFormatProvider,System.DateTime,System.DateTime)">
            <summary>
            Updates the TimeLineView display
            </summary>
            <param name="formatProvider"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.UpdateButtonImages">
            <summary>
            Updates the button images
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.GetImageForeColor">
            <summary>
            Gets image fore color
            </summary>
            <returns></returns>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.DateNavigator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DateNavigator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.DateNavigator.DateChanging">
            <summary>
            Occurs when a date Navigation is occurring
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.DateNavigator.DateChanged">
            <summary>
            Occurs when a date Navigation has occurred
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.DateNavigator.GetDateLabel">
            <summary>
            Occurs when the DateNavigator needs a formatted date label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CalendarView">
            <summary>
            Gets or sets the CalendarView date navigation will be applied to.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentDayLabel">
            <summary>
            Gets or sets the current Day format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekStartLabel">
            <summary>
            Gets or sets the current Week, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekEndLabel">
            <summary>
            Gets or sets the current Week, end format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekSameYearStartLabel">
            <summary>
            Gets or sets the current Week, same Year, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekSameYearEndLabel">
            <summary>
            Gets or sets the current Week, same Year, end format label
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekSameMonthYearStartLabel" -->
        <!-- Badly formed XML comment ignored for member "P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentWeekSameMonthYearEndLabel" -->
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentMonthStartLabel">
            <summary>
            Gets or sets the current Month, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentMonthEndLabel">
            <summary>
            Gets or sets the current Month, end format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentYearStartLabel">
            <summary>
            Gets or sets the current Year, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentYearEndLabel">
            <summary>
            Gets or sets the current Year, end format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineHourLabel">
            <summary>
            Gets or sets the current TimeLine Hour format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDayStartLabel">
            <summary>
            Gets or sets the current TimeLine Day, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDayEndLabel">
            <summary>
            Gets or sets the current TimeLine Day, end format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDaySameYearStartLabel">
            <summary>
            Gets or sets the current TimeLine Day, same Year, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDaySameYearEndLabel">
            <summary>
            Gets or sets the current TimeLine Day, same Year, end format label
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDaySameMonthYearStartLabel" -->
        <!-- Badly formed XML comment ignored for member "P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineDaySameMonthYearEndLabel" -->
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineYearStartLabel">
            <summary>
            Gets or sets the current TimeLine Year, start format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.CurrentTimeLineYearEndLabel">
            <summary>
            Gets or sets the current TimeLine Year, end format label
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.WeekDaysNavigationEnabled">
            <summary>
            Gets or sets whether in Week View week-days navigation is enabled. Default value is true. When week-days navigation is enabled
            and start date points to Monday and end date points to Friday, navigating to next day will navigate to next Monday-Friday view.
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangingEventArgs">
            <summary>
            DateChangingEventArgs
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs">
            <summary>
            DateChangingEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs.Direction">
            <summary>
            Gets the navigation direction
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs.OldStartDate">
            <summary>
            Gets the old navigation start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs.OldEndDate">
            <summary>
            Gets the old navigation end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs.NewStartDate">
            <summary>
            Gets or sets the new navigation start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangedEventArgs.NewEndDate">
            <summary>
            Gets or sets the new navigation end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.DateChangingEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the operation
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.DateNavigator.GetDateLabelEventArgs">
            <summary>
            GetDateLabelEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DateNavigator.GetDateLabelEventArgs.DateLabel">
            <summary>
            Gets the formatted DateLabel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.#ctor(System.DayOfWeek,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="day">Day of the week</param>
            <param name="count">Count of days</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.LoadDays(System.DayOfWeek,System.Int32)">
            <summary>
            Loads the DayText arrays
            </summary>
            <param name="day">Starting day of week</param>
            <param name="count">Count of days</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.MeasureText(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Measures the day text
            </summary>
            <param name="g">Graphics</param>
            <param name="font">Text font</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.DayText">
            <summary>
            Gets the DayText string arrays
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.DaySize">
            <summary>
            Gets the DaySize Size arrays
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DaysOfTheWeek.NeedsMeasured">
            <summary>
            Day text NeedsMeasured flag
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ItemRects">
            <summary>
            DayRect array management class
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ItemRects.#ctor(DevComponents.DotNetBar.BaseItem,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="baseItem"></param>
            <param name="length">Rectangle array length</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ItemRects.Rects">
            <summary>
            Gets the Rectangle array
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ItemRects.Item(System.Int32)">
            <summary>
            Gets  and sets a specific array Rectangle
            </summary>
            <param name="index">Rectangle index to get</param>
            <returns>Rectangle</returns>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ItemRect">
            <summary>
            Simple DayRect class
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ItemRect.#ctor(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Constructor
            </summary>
            <param name="baseItem">BaseItem</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ItemRect.Invalidate">
            <summary>
            Invalidates the given rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ItemRect.Bounds">
            <summary>
            Gets and sets the bounding rect
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ItemRect.IsSelected">
            <summary>
            Gets and sets the rect selection status
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.ModelViewConnector">
            <summary>
            Represents base class for the model to view connectors.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelViewConnector.Connect">
            <summary>
            Connects View to a model.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelViewConnector.Disconnect">
            <summary>
            Disconnects view from model.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelViewConnector.IsConnected">
            <summary>
            Gets whether connector has connected model to a view.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelViewConnector.DisplayOwnerKey">
            <summary>
            Gets or sets the owner key of the owner of the appointments displayed on the view.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Appointment">
            <summary>
            Represents an calendar appointment.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.INotifySubPropertyChanged">
            <summary>
            Defines an interface for property notification change.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.INotifySubPropertyChanged.SubPropertyChanged">
            <summary>
            Occurs when property on object or its sub-objects has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.#ctor">
            <summary>
            Initializes a new instance of the Appointment class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the Appointment class.
            </summary>
            <param name="subject">Appointment subject.</param>
            <param name="startTime">Appointment start time</param>
            <param name="endTime">Appointment end time</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.#ctor(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the Appointment class.
            </summary>
            <param name="subject">Appointment subject.</param>
            <param name="startTime">Appointment start time</param>
            <param name="endTime">Appointment end time</param>
            <param name="ownerKey">Appointment owner key</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.#ctor(System.DateTime,System.Double,System.String)">
            <summary>
            Initializes a new instance of the Appointment class.
            </summary>
            <param name="subject">Appointment subject.</param>
            <param name="startTime">Appointment start time</param>
            <param name="durationInMinutes">Appointment duration in minutes</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.#ctor(System.DateTime,System.Double,System.String,System.String)">
            <summary>
            Initializes a new instance of the Appointment class.
            </summary>
            <param name="subject">Appointment subject.</param>
            <param name="startTime">Appointment start time</param>
            <param name="durationInMinutes">Appointment duration in minutes</param>
            <param name="ownerKey">Appointment owner key</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.OnVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when Visible property has changed.
            </summary>
            <param name="oldValue">Old property value</param>
            <param name="newValue">New property value</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.MoveTo(System.DateTime)">
            <summary>
            Moves the appointment to the specified date and time while keeping its duration constant.
            </summary>
            <param name="newStartTime">New start date and time for appointment.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.OnStartTimeReached(System.EventArgs)">
            <summary>
            Raises the StartTimeReached event.
            </summary>
            <param name="e">Provides event arguments.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.Copy">
            <summary>
            Creates an copy of the appointment.
            </summary>
            <returns>Appointment copy.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Appointment.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:DevComponents.Schedule.Model.Appointment.StartTimeReached">
            <summary>
            Occurs when system time reaches the appointment start time and StartTimeAction is set to fire event. Note that event handler will be called on the thread of System.Timer which is different
            than UI thread. You should use BeginInvoke calls to marshal the calls to your UI thread.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Visible">
            <summary>
            Gets or sets whether appointment is visible in user interface views. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Tooltip">
            <summary>
            Gets or sets the tooltip that is assigned to the appointment view.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.CategoryColor">
            <summary>
            Gets or sets the appointment category color string based key that is used to lookup for appointment background and border colors.
            Use static members on Appointment class to assign the category color for example Appointment.CategoryRed.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.TimeMarkedAs">
            <summary>
            Gets or sets how the time used by appointment is marked on calendar. For example Free, Tentative, Busy etc.
            Use static members on Appointment class to assign the time marker for example Appointment.TimeMarkerBusy
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Reminders">
            <summary>
            Gets the collection of reminders associated with this Appointment.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Subject">
            <summary>
            Gets or sets the appointment subject.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Description">
            <summary>
            Gets or sets the appointment description.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.DisplayTemplate">
            <summary>
            Gets or sets the appointment display template.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.IsSelected">
            <summary>
            Gets or sets whether appointment is selected in the user interface.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Locked">
            <summary>
            Gets or sets whether appointment modification through user interface is disabled. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.StartTime">
            <summary>
            Gets or sets the appointment start time.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.EndTime">
            <summary>
            Gets or sets the appointment end time.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.TimeZone">
            <summary>
            Gets or sets the time-zone this appointment is defined in. Default value is null which indicates that appointment is
            in current system time zone. Note that setting the time zone will affect StartTime and EndTime of appointment if set.
            It will convert them to the TimeZone you set but as absolute values meaning that 10:00 AM in previous time zone
            will become 10:00 AM in TimeZone you just assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.LocalStartTime">
            <summary>
            Gets or sets the StartTime of appointment in local, display time-zone.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.LocalEndTime">
            <summary>
            Gets or sets the StartTime of appointment in local, display time-zone.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.UtcStartTime">
            <summary>
            Gets the UTC Start Time of appointment.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.UtcEndTime">
            <summary>
            Gets the UTC End Time of appointment.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Calendar">
            <summary>
            Gets the calendar appointment is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.StartTimeAction">
            <summary>
            Gets or sets the action performed when StartTime of appointment is reached. Default is none.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.IsRecurringInstance">
            <summary>
            Gets whether this appointment is the recurring appointment instance.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.RootAppointment">
            <summary>
            Gets or sets the root appointment if this instance is an recurring appointment instance (IsRecurringInstance=true).
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Tag">
            <summary>
            Gets or sets additional data associated with the object.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Recurrence">
            <summary>
            Gets or sets the reference to the appointment recurrence definition object which defines
            recurring appointment properties and range.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.OwnerKey">
            <summary>
            Gets or sets the owner of the appointment. Default value is empty string which indicates default owner.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.IsMultiDayOrAllDayEvent">
            <summary>
            Gets whether appointment is all day event or whether it spans multiple days.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.Id">
            <summary>
            Gets or sets the appointment identifier. This property is provided for your usage in serialization scenarios. It is not set by the control.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.AutoId">
            <summary>
            Gets the automatically generated identifier that identifies appointment.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.ImageKey">
            <summary>
            Gets or sets the image key for the image displayed on appointment view. ImageList property on CalendarView must be set for this property to work.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Appointment.ImageAlign">
            <summary>
            Gets or sets the image alignment in relation to the appointment view content. Default value is TopLeft.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Appointment.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Appointment.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.AppointmentTimePropertyChangedEventArgs">
            <summary>
            Provides more information about the time change for appointment StartTime and EndTime property changes.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.AppointmentTimePropertyChangedEventArgs.OldTimeValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.AppointmentTimePropertyChangedEventArgs.NewTimeValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentTimePropertyChangedEventArgs.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the AppointmentTimePropertyChangedEventArgs class.
            </summary>
            <param name="oldTimeValue"></param>
            <param name="newTimeValue"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentCollection.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the AppointmentCollection class.
            </summary>
            <param name="calendar"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentCollection.Calendar">
            <summary>
            Gets the calendar collection is associated with.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.AppointmentRecurrence">
            <summary>
            Represents appointment recurrence definition.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentRecurrence.OnIndependentVisibilityChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IndependentVisibility property has changed.
            </summary>
            <param name="oldValue">Old property value</param>
            <param name="newValue">New property value</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentRecurrence.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentRecurrence.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.RangeLimitType">
            <summary>
            Gets or sets the range type for the recurrence. Default value is no end date for recurrence.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.RangeEndDate">
            <summary>
            Gets or sets the recurrence end date. To specify the end date for recurrence set this property and RangeLimitType property to RangeEndDate.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.RangeNumberOfOccurrences">
            <summary>
            Gets or sets number of occurrences after which recurrence ends. To specify limited number of recurrences
            set this property and set RangeLimitType to RangeNumberOfOccurrences.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Tag">
            <summary>
            Gets or sets additional data associated with the object.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.RecurrenceType">
            <summary>
            Gets or sets the recurring frequency for appointment i.e. daily, weekly, monthly or yearly.
            Default value is Daily.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Appointment">
            <summary>
            Gets reference to appointment recurrence is assigned to.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Daily">
            <summary>
            Gets the settings for Daily recurrence type.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Weekly">
            <summary>
            Gets the settings for Weekly recurrence type.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Monthly">
            <summary>
            Gets the settings for monthly recurrence type.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.Yearly">
            <summary>
            Gets the settings for yearly recurrence type.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.RecurrenceStartDate">
            <summary>
            Gets or sets the recurrence start date. Default value is DateTime.MinValue which indicates that recurrence starts after
            the appointment ends.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.SkippedRecurrences">
            <summary>
            Gets or set the list of dates on which the recurrences are skipped.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentRecurrence.IndependentVisibility">
            <summary>
            Gets or sets whether generated recurring appointments have independent Visible property setting from root Appointment. 
            When set to true recurring appointment instances will not by default have Visible property set to the Visible property of root appointment. 
            Default value is false which means recurring instances by default have Visible property set to the root appointment Visible property.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.AppointmentRecurrence.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.AppointmentRecurrence.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.AppointmentSubsetCollection">
            <summary>
            Represents subset of appointments collection.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Primitives.CustomCollection`1">
            <summary>
            Represents custom collection with INotifyPropertyChanged and INotifyCollectionChanged interface support.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DevComponents.Schedule.Model.Primitives.INotifyCollectionChanged">
            <summary>
            Represents collection changed notification interface.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Primitives.INotifyCollectionChanged.CollectionChanged">
            <summary>
            Occurs when collection changed.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.#ctor">
            <summary>
            Creates new instance of object.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="list">List to initialize collection with.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Add(`0)">
            <summary>
            Add item to collection.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Clear">
            <summary>
            Remove all items from collection.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.ClearItems">
            <summary>
            Remove all items from collection.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Contains(`0)">
            <summary>
            Checks whether collection contains item.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>true if item is in collection.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy collection to array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">Index to copy from.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.GetEnumerator">
            <summary>
            Gets enumerator for collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.IndexOf(`0)">
            <summary>
            Returns index of an item.
            </summary>
            <param name="item">Reference to item.</param>
            <returns>Index of item.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert item at specified location.
            </summary>
            <param name="index">Index to insert item in.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts item.
            </summary>
            <param name="index">Index to insert item at.</param>
            <param name="item">Reference to item.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Remove(`0)">
            <summary>
            Removes item from collection.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>true if item was removed.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove item at specified location.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.RemoveItem(System.Int32)">
            <summary>
            Remove item at specified location.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Set item on location.
            </summary>
            <param name="index">Index</param>
            <param name="item">Item to assign.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.GetItemsDirect">
            <summary>
            Returns items directly without checks.
            </summary>
            <returns>List of items.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.OnCollectionReadAccess">
            <summary>
            Occurs when collection is read.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Occurs when collection property has changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.BlockReentrancy">
            <summary>
            Blocks the collection re-entrancy.
            </summary>
            <returns>IDisposable to end re-entrancy</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.CheckReentrancy">
            <summary>
            Checks whether call creates re-entrancy.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.CustomCollection`1.OnCollectionChanged(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when collection has changed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:DevComponents.Schedule.Model.Primitives.CustomCollection`1.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Count">
            <summary>
            Returns number of items in collection.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Item(System.Int32)">
            <summary>
            Returns item at index.
            </summary>
            <param name="index">Index of item.</param>
            <returns>Item at index.</returns>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.CustomCollection`1.Items">
            <summary>
            Returns the IList interface for items in collection.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Primitives.CustomCollection`1.CollectionChanged">
            <summary>
            Occurs when collection has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentSubsetCollection.#ctor(DevComponents.Schedule.Model.CalendarModel,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the AppointmentSubsetCollection class with appointments between given start and end date.
            </summary>
            <param name="calendar"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentSubsetCollection.InvalidateCollection">
            <summary>
            Invalidates collection content due to the change to appointments or some other condition. Invalidating collection
            content causes the collection elements to be re-generated on next collection read access.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.AppointmentSubsetCollection.Calendar">
            <summary>
            Gets the calendar collection is associated with this collection.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.BaseWorkDay">
            <summary>
            Defines a working day.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.BaseWorkDay.OnWorkStartTimeChanged(DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Called when WorkStartTime has changed.
            </summary>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.BaseWorkDay.OnWorkEndTimeChanged(DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Called when WorkEndTime has changed.
            </summary>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.BaseWorkDay.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.BaseWorkDay.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.BaseWorkDay.WorkStartTime">
            <summary>
            Gets or sets the work start time.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.BaseWorkDay.WorkEndTime">
            <summary>
            Gets or sets the work end time.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.BaseWorkDay.Calendar">
            <summary>
            Gets the calendar work day is associated with.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.BaseWorkDay.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.BaseWorkDay.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.CalendarModel">
            <summary>
            Represents the calendar model control.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.#ctor">
            <summary>
            Initializes a new instance of the CalendarModel class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.GetDay(System.DateTime)">
            <summary>
            Gets reference to the Day object which represents day in calendar.
            </summary>
            <param name="date">Date to retrieve day for.</param>
            <returns>Returns reference to Day object.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.ContainsOverlappingAppointments(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Returns true if appointment overlapps with one or more of the appointments in the model.
            </summary>
            <param name="app">Appointment to check overlap for.</param>
            <returns>true if there are appointments overlapping appointment otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.FindOverlappingAppointments(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Finds appointments that overlap with the parameter appointment.
            </summary>
            <param name="app">Appointment to use to find overlapps</param>
            <returns>Array of appointments that overlap parameter.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.GetCalendarDateTime(System.DateTime)">
            <summary>
            Returns the calendar date time which has seconds part set to 0.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnAppointmentRemoved(DevComponents.Schedule.Model.AppointmentEventArgs)">
            <summary>
            Raises the AppointmentRemoved event.
            </summary>
            <param name="appointmentEventArgs">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnAppointmentAdded(DevComponents.Schedule.Model.AppointmentEventArgs)">
            <summary>
            Raises the AppointmentAdded event.
            </summary>
            <param name="appointmentEventArgs">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.InvalidateAppointmentCache">
            <summary>
            Invalidates appointments cache store and causes recurrences to be regenerated when requested.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.BeginUpdate">
            <summary>
            Suspends internal control updates to the cache structures etc. When making changes on multiple appointments 
            time related properties or when adding multiple appointments before doing so call BeginUpdate and after 
            updates are done call EndUpdate method to optimize performance.
            <remarks>Calls to BeginUpdate method can be nested and only last outer most EndUpdate call will resume internal control updates.</remarks>
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.EndUpdate">
            <summary>
            Resumes internal control updates that were suspended using BeginUpdate call and invalidates internal cache.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnAppointmentStartTimeReached(DevComponents.Schedule.Model.AppointmentEventArgs)">
            <summary>
            Raises AppointmentStartTimeReached event.
            </summary>
            <param name="appointmentEventArgs">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnReminderNotification(DevComponents.Schedule.Model.ReminderEventArgs)">
            <summary>
            Raises ReminderNotification event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarModel.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.AppointmentAdded">
            <summary>
            Occurs when an appointment has been added to the model.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.AppointmentRemoved">
            <summary>
            Occurs when an appointment has been removed from the model.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.AppointmentStartTimeReached">
            <summary>
            Occurs when AppointmentStartTime has been reached. This event can be used to trigger appointment reminders. Note that event handler will be called on the thread of System.Timer which is different
            than UI thread. You should use BeginInvoke calls to marshal the calls to your UI thread.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.ReminderNotification">
            <summary>
            Occurs when Reminder's ReminderTime has been reached. Note that event handler will be called on the thread of System.Timer which is different
            than UI thread. You should use BeginInvoke calls to marshal the calls to your UI thread.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.AppointmentsCleared">
            <summary>
            Occurs when Appointments collection has been cleared.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.Appointments">
            <summary>
            Gets appointments associated with this calendar.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.Owners">
            <summary>
            Gets owners of appointments associated with this calendar.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.WorkDays">
            <summary>
            Gets working days associated with this calendar.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.CalendarWorkDays">
            <summary>
            Gets the calendar/date based working days collection. This collection allows you to specify working time for specific dates. Values specified here take precedence over working hours set through WorkDays collection.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.IsUpdateSuspended">
            <summary>
            Gets whether internal control update is suspended due to the call to BeginUpdate method.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.DisplayTimeZone">
            <summary>
            Gets or sets the default display time zone used for the appointments. Default value is null which indicates that system time-zone is used.
            Display Time zone can also be set for each Owner on Owner object. Value set here is used if specific display time-zone is not set on user.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.CalendarModel.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarModel.CustomReminders">
            <summary>
            Gets the collection of custom reminders that are not associated with appointments.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.AppointmentEventArgs">
            <summary>
            Defines arguments for appointment related events.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.AppointmentEventArgs.Appointment">
            <summary>
            Gets the appointment referenced by this event.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.AppointmentEventArgs.#ctor(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Initializes a new instance of the AppointmentEventArgs class.
            </summary>
            <param name="appointment"></param>
        </member>
        <member name="T:DevComponents.Schedule.Model.CalendarWorkDay">
            <summary>
            Represents specific date based work day.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarWorkDay.#ctor">
            <summary>
            Initializes a new instance of the WorkDay class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarWorkDay.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the WorkDay class.
            </summary>
            <param name="date">Date this work-day represents</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarWorkDay.OnDateChanged(System.DateTime,System.DateTime)">
            <summary>
            Called when Date property has changed.
            </summary>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarWorkDay.Date">
            <summary>
            Gets or sets the date this day represents.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.CalendarWorkDayCollection">
            <summary>
            Represents collection of calendar work days.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarWorkDayCollection.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the AppointmentCollection class.
            </summary>
            <param name="calendar"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.CalendarWorkDayCollection.#ctor(DevComponents.Schedule.Model.Owner)">
            <summary>
            Initializes a new instance of the CalendarWorkDayCollection class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarWorkDayCollection.Owner">
            <summary>
            Gets the Owner of work-day collection.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarWorkDayCollection.Calendar">
            <summary>
            Gets the calendar collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.CalendarWorkDayCollection.Item(System.DateTime)">
            <summary>
            Gets the item based on the Key assigned to the item
            </summary>
            <param name="date">Date to retrieve data for.</param>
            <returns>Reference to CalendarWorkDay or null if no day in collection.</returns>
        </member>
        <member name="T:DevComponents.Schedule.Model.DailyRecurrenceSettings">
            <summary>
            Defines the daily recurrence settings.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.DailyRecurrenceSettings.#ctor(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            Initializes a new instance of the DailyRecurrenceSettings class.
            </summary>
            <param name="recurrence"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.DailyRecurrenceSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.DailyRecurrenceSettings.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.DailyRecurrenceSettings.RepeatOnDaysOfWeek">
            <summary>
            Gets or sets the days of week on which appointment is repeated.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.DailyRecurrenceSettings.RepeatInterval">
            <summary>
            Gets or sets the interval between recurring appointments. Default value is 1. Setting this value to for example 3 means that
            recurrence is repeated every 3 days.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.DailyRecurrenceSettings.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.DailyRecurrenceSettings.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.TotalWeekDays(System.DateTime,System.DateTime)">
            <summary>
            Returns number of weekdays (Monday-Friday) between two dates.
            </summary>
            <param name="startDateTime">Start date</param>
            <param name="endDateTime">End date</param>
            <returns>Total number of weekdays between two dates</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.TotalDays(System.DateTime,System.DateTime,System.DayOfWeek)">
            <summary>
            Return total number of days specified by day parameter between two dates.
            </summary>
            <param name="startDate">Start date.</param>
            <param name="endDate">End date.</param>
            <param name="day">Day of week</param>
            <returns>Number of days between two dates</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.EndOfDay(System.DateTime)">
            <summary>
            Returns the date/time that represents end of the day value.
            </summary>
            <param name="_DayDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.BeginningOfDay(System.DateTime)">
            <summary>
            Returns the date/time that represents beginning of the day value.
            </summary>
            <param name="_DayDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.IsBeginningOfDay(System.DateTime)">
            <summary>
            Returns true if date falls at begging of the day 12:00 AM
            </summary>
            <param name="_DayDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.MaxDate(System.DateTime,System.DateTime)">
            <summary>
            Gets greater date between two dates.
            </summary>
            <param name="date1">Date 1</param>
            <param name="date2">Date 2</param>
            <returns>Greater date.</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.IsSameDay(System.DateTime,System.DateTime)">
            <summary>
            Returns true if both dates are on same day and year.
            </summary>
            <param name="date1">First date</param>
            <param name="date2">Second date</param>
            <returns>true if dates are on same day and year</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.DateTimeHelper.TimePeriodsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns true if time periods overlap.
            </summary>
            <param name="startTime1">Start of first period.</param>
            <param name="endTime1">End of first period.</param>
            <param name="startTime2">Start of second period.</param>
            <param name="endTime2">End of second period.</param>
            <returns>true if periods overlap</returns>
        </member>
        <member name="T:DevComponents.Schedule.Model.Day">
            <summary>
            Represents the calendar day.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Day.#ctor(System.DateTime,DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the Day class.
            </summary>
            <param name="dayDate"></param>
            <param name="calendar"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Day.InvalidateAppointments">
            <summary>
            Invalidate the day appointments
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Day.Appointments">
            <summary>
            Gets appointments that start on this day.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Day.DayDate">
            <summary>
            Gets the date this day represents.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Day.Calendar">
            <summary>
            Gets the Calendar this day is part of.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eStartTimeAction">
            <summary>
            Specifies notification type when appointment start time has been reached.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eStartTimeAction.None">
            <summary>
            No action is taken.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eStartTimeAction.StartTimeReachedEvent">
            <summary>
            StartTimeReached event is fired.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eStartTimeAction.Command">
            <summary>
            StartTimeCommand is executed.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eStartTimeAction.StartTimeReachedEventAndCommand">
            <summary>
            Both event and command are performed.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eReminderAction">
            <summary>
            Specifies notification type when reminder time has been reached.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eReminderAction.None">
            <summary>
            No action is taken.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eReminderAction.Event">
            <summary>
            Reminder event is fired.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eReminderAction.Command">
            <summary>
            Reminder Command is executed.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eReminderAction.EventAndCommand">
            <summary>
            Both event and command are performed.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eRecurrenceRangeLimitType">
            <summary>
            Specifies the recurrence range type.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrenceRangeLimitType.NoEndDate">
            <summary>
            Recurrence range has no end date specified.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrenceRangeLimitType.RangeEndDate">
            <summary>
            Recurrence ends on date specified by RangeEndDate property.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrenceRangeLimitType.RangeNumberOfOccurrences">
            <summary>
            Recurrence ends after specified number of repeats by RangeNumberOfOccurrences property.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eRecurrencePatternType">
            <summary>
            Specifies the pattern type for appointment recurrence.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrencePatternType.Daily">
            <summary>
            Appointment recurs daily.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrencePatternType.Weekly">
            <summary>
            Appointment recurs weekly.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrencePatternType.Monthly">
            <summary>
            Appointment recurs monthly.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRecurrencePatternType.Yearly">
            <summary>
            Appointment recurs yearly.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eRelativeDayInMonth">
            <summary>
            Specifies the relative day in month for recurrence.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.None">
            <summary>
            No value specified.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.First">
            <summary>
            The first occurrence of the specified day in its month. 
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.Second">
            <summary>
            The second occurrence of the specified day in its month. 
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.Third">
            <summary>
            The third occurrence of the specified day in its month. 
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.Fourth">
            <summary>
            The fourth occurrence of the specified day in its month. 
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eRelativeDayInMonth.Last">
            <summary>
            The last occurrence of the specified day in its month. 
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eDayOfWeekRecurrence">
            <summary>
            Specifies on which day the appointment is repeated.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eDailyRecurrenceRepeat">
            <summary>
            Specifies on which days daily recurrence is repeated.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eDailyRecurrenceRepeat.All">
            <summary>
            Appointment is repeated on all days.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eDailyRecurrenceRepeat.WeekDays">
            <summary>
            Appointment is repeated on week-days only, Monday-Friday.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.eDailyRecurrenceRepeat.WeekendDays">
            <summary>
            Appointment is repeated on weekend-days only, Saturday-Sunday.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.eMonthRecurrence">
            <summary>
            Specifies on which month monthly appointment recurrence is repeated.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.HolidaysCollection">
            <summary>
            Represents collection of holidays.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.CalendarEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="lineStart">Text line start</param>
            <param name="lineEnd">Text line end</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.CalendarEntry.Attributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.CalendarEntry.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.CalendarEntry.LineEnd">
            <summary>
            LineEnd
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.CalendarEntry.LineStart">
            <summary>
            LineStart
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.CalendarEntry.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.AttributeData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">Id</param>
            <param name="value">Value</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.AttributeData.Id">
            <summary>
            Gets or sets the attribute Id
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.AttributeData.Value">
            <summary>
            Gets or sets the attribute value
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Serialization.IcsExporter">
            <summary>
            Export DNB internal Model/Appointment data layout into
            ICS (Internet Calendaring and Scheduling - RFC5545) format file.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.#ctor">
            <summary>
            IcsExporter
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            IcsExporter
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String[],System.String[],System.IO.StreamWriter)">
            <summary>
            Exports Appointment data in the iCalendar format
            </summary>
            <param name="ownerKeys">Array of OwnerKeys</param>
            <param name="calNames">Array of CalendarNames</param>
            <param name="streamWriter">Export StreamWriter</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String)">
            <summary>
            Exports all appointments to the given export file.
            </summary>
            <param name="exportFile">Output file path</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.IO.StreamWriter)">
            <summary>
            Exports all appointments to the given export stream.
            </summary>
            <param name="streamWriter">Output StreamWriter</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String,System.String)">
            <summary>
            Exports all appointments for the specified OwnerKey to
            the given export file.
            </summary>
            <param name="ownerKey">Appointment OwnerKey</param>
            <param name="exportFile">Output file path</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String,System.IO.StreamWriter)">
            <summary>
            Exports all appointments for the specified OwnerKey to
            the given export stream.
            </summary>
            <param name="ownerKey">Appointment OwnerKey</param>
            <param name="streamWriter">Output StreamWriter</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String,System.String,System.String)">
            <summary>
            Exports all appointments for the specified OwnerKey to
            the given export file, using the specified calendar name.
            </summary>
            <param name="ownerKey">Appointment OwnerKey</param>
            <param name="calName">Associated Calendar Name</param>
            <param name="exportFile">Output file path</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String,System.String,System.IO.StreamWriter)">
            <summary>
            Exports all appointments for the specified OwnerKey to
            the given export stream, using the specified calendar name.
            </summary>
            <param name="ownerKey">Appointment OwnerKey</param>
            <param name="calName">Associated Calendar Name</param>
            <param name="streamWriter">Output StreamWriter</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.Export(System.String[],System.String[],System.String)">
            <summary>
            Exports all appointments for the specified OwnerKey array to
            the given export file, using the specified associated calendar name array.
            </summary>
            <param name="ownerKeys">Array of OwnerKeys</param>
            <param name="calNames">Array of 1:1 associated Calendar Names</param>
            <param name="exportFile">Output file path</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportOwnerData">
            <summary>
            Exports model data for each requested OwnerKey
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportCalBegin(System.String)">
            <summary>
            Exports the beginning calendar sequence
            </summary>
            <param name="calName"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportCalEnd">
            <summary>
            Exports the ending calendar sequence
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportVEvent(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Exports a calendar event (appointment)
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportRRule(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Exports the appointment Recurrence Rule
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportDailyRRule(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            ExportDailyRRule
            </summary>
            <param name="recur"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportWeeklyRRule(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            ExportWeeklyRRule
            </summary>
            <param name="recur"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportMonthlyRRule(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            ExportMonthlyRRule
            </summary>
            <param name="recur"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportYearlyRRule(DevComponents.Schedule.Model.Appointment)">
            <summary>
            ExportYearlyRRule
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddRRuleByDay(System.Text.StringBuilder,DevComponents.Schedule.Model.eDayOfWeekRecurrence)">
            <summary>
            AddRRuleByDay
            </summary>
            <param name="sb"></param>
            <param name="repeat"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddRRuleByDay(System.Text.StringBuilder,DevComponents.Schedule.Model.eDailyRecurrenceRepeat)">
            <summary>
            AddRRuleByDay
            </summary>
            <param name="sb"></param>
            <param name="repeat"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddRRuleByDay(System.Text.StringBuilder,DevComponents.Schedule.Model.eRelativeDayInMonth,System.DayOfWeek)">
            <summary>
            AddRRuleByDay
            </summary>
            <param name="sb"></param>
            <param name="rday"></param>
            <param name="dow"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddRRuleInterval(System.Text.StringBuilder,System.Int32)">
            <summary>
            AddRRuleInterval
            </summary>
            <param name="sb"></param>
            <param name="interval"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddRRuleRangeInfo(System.Text.StringBuilder,DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            AddRRuleRangeInfo
            </summary>
            <param name="sb"></param>
            <param name="recur"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportExDate(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            ExportExDate
            </summary>
            <param name="recur"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportAlarms(DevComponents.Schedule.Model.Appointment)">
            <summary>
            ExportAlarms
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.GetDuration(System.TimeSpan)">
            <summary>
            GetDuration
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.GetUtcDate(System.DateTime)">
            <summary>
            GetUtcDate
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.AddMetaData(System.String)">
            <summary>
            Adds escape chars to text meta data
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.ExportLine(System.String)">
            <summary>
            Exports a line
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.WrapLine(System.String,System.Int32)">
            <summary>
            Performs line wrapping (aka folding)
            </summary>
            <param name="text">Text to wrap</param>
            <param name="wrapLength">Wrapping length</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.BreakLine(System.String,System.Int32,System.Int32)">
            <summary>
            Determines where to break a line of text
            </summary>
            <param name="text">Text</param>
            <param name="pos">Current text pos</param>
            <param name="max">Max line length</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.IsBreakChar(System.Char)">
            <summary>
            Determines if a char is a break char
            </summary>
            <param name="c"></param>
            <returns>true if break char</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.GetDefaultOwnerKeys">
            <summary>
            GetDefaultOwnerKeys
            </summary>
            <returns>A list of all defined model OwnerKeys</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.GetUniversalTime(System.DateTime)">
            <summary>
            GetUniversalTime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsExporter.IsAppointmentVisible(DevComponents.Schedule.Model.Appointment,System.String)">
            <summary>
            Determines if an appointment is visible
            with respect to the given ownerKey
            </summary>
            <param name="app"></param>
            <param name="ownerKey"></param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.IcsExporter.ProdId">
            <summary>
            Gets or sets the Calendar Product Id.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.IcsExporter.Model">
            <summary>
            CalendarModel
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Serialization.IcsImporter">
            <summary>
            ICS (Internet Calendaring and Scheduling - RFC5545) import into
            corresponding DNB internal Model/Appointment data layout
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String[],System.String[],System.IO.StreamReader)">
            <summary>
            Imports all appointments from the given export file's
            calName array Calendar entries, and associates them with the
            given OwnerKey array entries.
            </summary>
            <param name="calNames">Array of Calendar names</param>
            <param name="ownerKeys">Array of associated OwnerKeys</param>
            <param name="streamReader">Import file path.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String)">
            <summary>
            Imports all appointments from the given input file.
            </summary>
            <param name="importFile">Input file</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.IO.StreamReader)">
            <summary>
            Imports all appointments from the given input stream.
            </summary>
            <param name="streamReader">Input file StreamReader</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String,System.String)">
            <summary>
            Imports all appointments from the given export file
            calName Calendar entry.
            </summary>
            <param name="calName">Calendar entry name</param>
            <param name="importFile">Import file path.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String,System.IO.StreamReader)">
            <summary>
            Imports all appointments from the given export stream
            calName Calendar entry.
            </summary>
            <param name="calName">Calendar entry name</param>
            <param name="streamReader">Import file StreamReader.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String,System.String,System.String)">
            <summary>
            Imports all appointments from the given export file
            calName Calendar entry, and associates them with the
            given OwnerKey.
            </summary>
            <param name="calName">Calendar entry name</param>
            <param name="ownerKey">Associated OwnerKey</param>
            <param name="importFile">Import file path.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String,System.String,System.IO.StreamReader)">
            <summary>
            Imports all appointments from the given export stream
            calName Calendar entry, and associates them with the
            given OwnerKey.
            </summary>
            <param name="calName">Calendar entry name</param>
            <param name="ownerKey">Associated OwnerKey</param>
            <param name="streamReader">Import file StreamReader.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Import(System.String[],System.String[],System.String)">
            <summary>
            Imports all appointments from the given export file
            calName array Calendar entries, and associates them with the
            given OwnerKey array entries.
            </summary>
            <param name="calNames">Array of Calendar names</param>
            <param name="ownerKeys">Array of associated OwnerKeys</param>
            <param name="importFile">Import file path.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessCalendarEntries(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Initiates the processing of each calendar component entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVCalendar">
            <summary>
            Processes individual calendar component entries
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessCalEnd(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes final Calendar component termination
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessCalScale(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes Calendar Scale (Gregorian only support)
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVersion(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes Calendar version entries
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVEvent(System.String)">
            <summary>
            Processes Event components for the given OwnerKey
            </summary>
            <param name="ownerKey">Associated OwnerKey</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVEventEnd(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Event termination
            </summary>
            <param name="entry"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessEventEndEx(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            ProcessEventEndEx
            </summary>
            <param name="model"></param>
            <param name="entry"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDailyRecurrence(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Daily recurrences
            </summary>
            <param name="model"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessWeeklyRecurrence(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Weekly recurrences
            </summary>
            <param name="model"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessMonthlyRecurrence(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Monthly recurrences
            </summary>
            <param name="model"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.SetNewByDayAppStartTime(DevComponents.Schedule.Model.Appointment,System.DayOfWeek,System.Int32)">
            <summary>
            SetNewByDayAppStartTime
            </summary>
            <param name="app"></param>
            <param name="dayOfWeek"></param>
            <param name="byDay"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessYearlyRecurrence(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Yearly recurrences
            </summary>
            <param name="model"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVEventReminder(DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes event reminders
            </summary>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRecurrenceId(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes RecurrenceId events
            </summary>
            <param name="entry"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRecurrenceRange(DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.AppointmentRecurrence,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Recurrence range values
            </summary>
            <param name="app"></param>
            <param name="recur"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsSkippableDate(DevComponents.Schedule.Model.Appointment,System.DateTime,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Determines if the given date is a valid
            SkippedRecurrence date.
            </summary>
            <param name="app"></param>
            <param name="date"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsSkippableByMonthDay(DevComponents.Schedule.Model.Appointment,System.DateTime,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Determines if the given date is a skippable
            byMonthDate
            </summary>
            <param name="app"></param>
            <param name="date"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsSkippableByMonth(DevComponents.Schedule.Model.Appointment,System.DateTime,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Determines if the given date is a skippable ByMonth date
            </summary>
            <param name="app"></param>
            <param name="date"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsSkippableByDay(DevComponents.Schedule.Model.Appointment,System.DateTime,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Determines if the given date is a skippable ByDays date
            </summary>
            <param name="app"></param>
            <param name="date"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRDateRange(DevComponents.Schedule.Model.CalendarModel,DevComponents.Schedule.Model.Appointment,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            ProcessRDateRange
            </summary>
            <param name="model"></param>
            <param name="app"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDate(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.Boolean@)">
            <summary>
            Processes Attribute date values
            </summary>
            <param name="entry"></param>
            <param name="isDateValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDateTime(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes attribute DateTime values
            </summary>
            <param name="entry"></param>
            <param name="sdate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDateValue(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes Value=Date entries
            </summary>
            <param name="entry"></param>
            <param name="sDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTzIdDateTime(System.String,DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes TxId attribute DateTime values
            </summary>
            <param name="tzId"></param>
            <param name="entry"></param>
            <param name="sdate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetTzIdDelta(System.String,System.DateTime)">
            <summary>
            GetTzIdDelta
            </summary>
            <param name="tzId"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetLastPartDate(DevComponents.Schedule.Model.Serialization.IcsImporter.TimeZonePart,System.DateTime)">
            <summary>
            GetLastPartDate
            </summary>
            <param name="part"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetTimeZone(System.String)">
            <summary>
            GetTimeZone
            </summary>
            <param name="tzId"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDescription(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes event Description values
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessDuration(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes event Duration values
            </summary>
            <param name="entry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetGroupIntValue(System.Text.RegularExpressions.Match,System.String,System.Int32)">
            <summary>
            Gets the int value from the given Regex Match
            </summary>
            <param name="ma"></param>
            <param name="group"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessExDate(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes event ExDate values
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessExDateValues(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes ExDate Value=Date values
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessExDateTimeValues(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes ExDate Value=DateTime values
            </summary>
            <param name="entry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTzIdExDateTimeValues(System.String,DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes ExDate Value=DateTime values
            </summary>
            <param name="tzId"></param>
            <param name="entry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.UnionExDates(DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Combines the main evData exDates list with a secondary
            accumulated exDates list
            </summary>
            <param name="evData"></param>
            <param name="exDates"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRDate(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RDate)">
            <summary>
            Processes RDate attributes and values
            </summary>
            <param name="entry"></param>
            <param name="rdateOld"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRDateValues(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes RDate Value=Date values
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRDateTimeValues(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes RDate Value=DateTime values
            </summary>
            <param name="entry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTzIdRDateTimeValues(System.String,DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Processes RDate Value=DateTime values
            </summary>
            <param name="tzId"></param>
            <param name="entry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRDatePeriod(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes RDate Value=Period values
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.UnionRDates(DevComponents.Schedule.Model.Serialization.IcsImporter.RDate,DevComponents.Schedule.Model.Serialization.IcsImporter.RDate)">
            <summary>
            Combines RDate values
            </summary>
            <param name="rdateOld"></param>
            <param name="rdateNew"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRecurrenceId(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes RecurrenceId entries
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessRRule(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes RRule entries
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessByDay(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RRule,System.String)">
            <summary>
            Processes ByDay= attribute entries
            </summary>
            <param name="entry"></param>
            <param name="rrule"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessWeekDay(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String,System.Int32@)">
            <summary>
            Processes individual ByDay.WeekDay entries
            </summary>
            <param name="entry"></param>
            <param name="s"></param>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessByIntValues(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String,System.Int32,System.Int32,DevComponents.Schedule.Model.Serialization.IcsImporter.ValueToken)">
            <summary>
            Processes ByMonth= and ByMonthDay= attribute entries
            </summary>
            <param name="entry"></param>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="tkn"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessCount(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RRule,DevComponents.Schedule.Model.Serialization.AttributeData)">
            <summary>
            Processes RRule Count attribute entries
            </summary>
            <param name="entry"></param>
            <param name="rrule"></param>
            <param name="attr"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessFreq(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RRule,DevComponents.Schedule.Model.Serialization.AttributeData)">
            <summary>
            Processes Freq= attribute entries
            </summary>
            <param name="entry"></param>
            <param name="rrule"></param>
            <param name="attr"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessInterval(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RRule,DevComponents.Schedule.Model.Serialization.AttributeData)">
            <summary>
            Processes Interval= attribute entries
            </summary>
            <param name="entry"></param>
            <param name="rrule"></param>
            <param name="attr"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessUntil(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.RRule,DevComponents.Schedule.Model.Serialization.AttributeData)">
            <summary>
            Processes Until= attribute entries
            </summary>
            <param name="entry"></param>
            <param name="rrule"></param>
            <param name="attr"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessSummary(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes Summary entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessUid(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Processes UID entries
            </summary>
            <param name="entry"></param>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVAlarm(DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes VAlarm component entries
            </summary>
            <param name="evData"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTrigger(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VAlarm)">
            <summary>
            Processes VAlarm Trigger properties
            </summary>
            <param name="entry"></param>
            <param name="valarm"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbCategoryColor(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB CategoryColor entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbDisplayTemplate(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB DisplayTemplate entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbImageAlign(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB specific ImageAlign entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbImageKey(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB ImageKey entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbLocked(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB Locked entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbRecStartDate(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes DNB RecStartDate entries
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbStartTimeAction(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB StartTimeAction entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbTimeMarkedAs(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB TimeMarkedAs entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessXDnbTooltip(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.VEventData)">
            <summary>
            Processes DNB ToolTip entries
            </summary>
            <param name="entry"></param>
            <param name="evData"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVTimezone">
            <summary>
            Processes VTimeZone components
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTzId(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes TxId values
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessTzOffset(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes TzOffset values
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVTimezoneEnd(DevComponents.Schedule.Model.Serialization.CalendarEntry,DevComponents.Schedule.Model.Serialization.IcsImporter.CalendarTimeZone)">
            <summary>
            ProcessVTimezoneEnd
            </summary>
            <param name="entry"></param>
            <param name="zone"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessZonePart(DevComponents.Schedule.Model.Serialization.IcsImporter.CalendarTimeZone,DevComponents.Schedule.Model.Serialization.IcsImporter.ComponentToken)">
            <summary>
            Processes VTimeZone parts (DayLight, Standard)
            </summary>
            <param name="zone"></param>
            <param name="tkn"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessVTodo(System.String)">
            <summary>
            Processes VToDo entries
            </summary>
            <param name="ownerKey"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ProcessWrCalName(DevComponents.Schedule.Model.Serialization.CalendarEntry)">
            <summary>
            Processes X-WR-CALNAME entries
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.SkipComponent(DevComponents.Schedule.Model.Serialization.IcsImporter.ComponentToken)">
            <summary>
            Skips the given component block (until it reaches
            the corresponding ctkn:END value)
            </summary>
            <param name="ctkn"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetToken(DevComponents.Schedule.Model.Serialization.IcsImporter.TokenRegistry[],System.String)">
            <summary>
            Gets the token associated with the given text
            </summary>
            <param name="reg">Token registry</param>
            <param name="text">Token text</param>
            <returns>Token, or -1 if not found</returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetFirstEntry">
            <summary>
            Gets the first CalendarEntry
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetNextEntry">
            <summary>
            Gets the next CalendarEntry
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetEnumValue(System.Type,System.String)">
            <summary>
            Gets the enum value, given the token type and text
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.Parse(System.IO.StreamReader)">
            <summary>
            Initiates the parsing of the given import file
            </summary>
            <param name="streamReader"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetNextLine(System.IO.StreamReader,System.Int32@,System.Int32@)">
            <summary>
            Gets the next logical line of text
            </summary>
            <param name="sr"></param>
            <param name="lineStart"></param>
            <param name="lineEnd"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ParseLine(System.String,System.Int32,System.Int32)">
            <summary>
            Initiates the syntactic parsing of the given line
            </summary>
            <param name="s"></param>
            <param name="lineStart"></param>
            <param name="lineEnd"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsBlankLine(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Determines if the given line is blank
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ParseId(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String@)">
            <summary>
            Parses the Id portion of the given line
            </summary>
            <param name="entry"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ParseAttributes(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String@)">
            <summary>
            Initiates the parsing of the line attributes
            </summary>
            <param name="entry"></param>
            <param name="s"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ParseAttributeData(System.Collections.Generic.List{DevComponents.Schedule.Model.Serialization.AttributeData},System.String@)">
            <summary>
            Parses line attribute data
            </summary>
            <param name="list"></param>
            <param name="s"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ParseValue(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String@)">
            <summary>
            Parses the value portion of the given line
            </summary>
            <param name="entry"></param>
            <param name="s"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.RemoveMetaData(System.String)">
            <summary>
            Removes Meta data from the value text
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetRelativeDay(System.Int32)">
            <summary>
            Gets the eRelativeDayInMonth from the given dayOfWeek
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetRelativeDayOfWeek(DevComponents.Schedule.Model.eDayOfWeekRecurrence)">
            <summary>
            Gets the DayOfWeek from the given eDayOfWeekRecurrence 
            </summary>
            <param name="byDays"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.IsValidCalName(System.String)">
            <summary>
            Determines if the given Calendar (by it's name) is
            a valid calendar to import
            </summary>
            <param name="calName"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.GetOwnerKey(System.String)">
            <summary>
            Gets the OwnerKey based upon the
            given Calendar name
            </summary>
            <param name="calName"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Schedule.Model.Serialization.IcsImporter.ReportError(DevComponents.Schedule.Model.Serialization.CalendarEntry,System.String)">
            <summary>
            Reports encountered import errors
            </summary>
            <param name="entry"></param>
            <param name="text"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.IcsImporter.IgnoreErrors">
            <summary>
            Ignore import Errors
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.IcsImporter.IncludeComponent">
            <summary>
            Gets or sets the iCalendar components to include in the import.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Serialization.IcsImporter.Model">
            <summary>
            CalendarModel
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.SubPropertyChangedEventArgs">
            <summary>
            Defines event arguments for SubPropertyChanged event.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.SubPropertyChangedEventArgs.PropertyChangedArgs">
            <summary>
            Reference to PropertyChangedArgs of changed property.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.SubPropertyChangedEventArgs.Source">
            <summary>
            Reference to the source object of the event.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.SubPropertyChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the SubPropertyChangedEventArgs class.
            </summary>
            <param name="propertyChangedArgs"></param>
            <param name="source"></param>
        </member>
        <member name="T:DevComponents.Schedule.Model.Month">
            <summary>
            Represents the calendar month.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Month.#ctor(DevComponents.Schedule.Model.CalendarModel,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Month class.
            </summary>
            <param name="year"></param>
            <param name="month"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Month.Days">
            <summary>
            Gets collection of days in this month.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Month.Year">
            <summary>
            Gets the month year.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Month.MonthOfYear">
            <summary>
            Gets the month.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Month.CalendarModel">
            <summary>
            Gets the Calendar this day is part of.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.MonthlyRecurrenceSettings">
            <summary>
            Defines monthly recurrence settings.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.#ctor(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            Initializes a new instance of the MonthlyRecurrenceSettings class.
            </summary>
            <param name="recurrence"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.RepeatOnDayOfMonth">
            <summary>
            Gets or sets the day of month on which appointment is repeated.
            When RepeatOnRelativeDayInMonth property is set to value other than None value of this property is not used.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.RepeatOnRelativeDayInMonth">
            <summary>
            Gets or sets whether appointment should repeat on first, second, third, fourth or last day in month as specified
            by RepeatOnDayOfMonth property. Property applies only for RecurrenceType Monthly or Yearly.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.RepeatInterval">
            <summary>
            Gets or sets the interval between recurring appointments. Default value is 1.
            <remarks>
            For example, setting RepeatInterval to 2 means that appointment will recur every 2 months.
            </remarks>
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.RelativeDayOfWeek">
            <summary>
            Gets or sets the day of week on which relative repeat as specified by RepeatOnRelativeDayInMonth is effective.
            For example setting RepeatOnRelativeDayInMonth to First and RelativeDayOfWeek to Monday will repeat the appointment on first
            Monday in a month.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.RepeatOnMonths">
            <summary>
            Gets or sets the months on which appointment is repeated. This property is represented by bit-flag enum
            which means that you can combine the values from eMonthRecurrence enum using OR operator to specify multiple values.
            Default value is All.
            <remarks>
            <para>For example you could set this property to eMonthRecurrence.January | eMonthRecurrence.July to repeat appointments on January and July only.</para> 
            </remarks>
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.MonthlyRecurrenceSettings.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.NotificationRequest.#ctor(System.DateTime,DevComponents.Schedule.Model.NotificationServerEventHandler)">
            <summary>
            Initializes a new instance of the NotificationRequest class.
            </summary>
            <param name="notificationTime"></param>
            <param name="notificationHandler"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.NotificationRequest.NotificationTime">
            <summary>
            Gets or sets requested notification time.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.NotificationRequest.NotificationHandler">
            <summary>
            Gets the callback handler for notification when notification time is reached.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.NotificationServer">
            <summary>
            Provides notification support for appointments.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.NotificationServerEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the NotificationServerEventArgs class.
            </summary>
            <param name="notificationTime"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.NotificationServerEventArgs.NotificationTime">
            <summary>
            Gets the time notification is sent on.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.NotificationServerEventArgs.NextRequestedNotificationTime">
            <summary>
            Gets or sets the next requested notification time by the handler of the event.
            Handler of event must set this to the desired next notification time in order to be notified.
            The value recorded will be the lowest value set by all handlers.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.#ctor">
            <summary>
            Initializes a new instance of the Owner class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Owner class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Owner class.
            </summary>
            <param name="key"></param>
            <param name="displayName"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.#ctor(System.String,System.String,DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Initializes a new instance of the Owner class.
            </summary>
            <param name="key"></param>
            <param name="displayName"></param>
            <param name="colorScheme"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.#ctor(System.String,DevComponents.DotNetBar.Schedule.eCalendarColor)">
            <summary>
            Initializes a new instance of the Owner class.
            </summary>
            <param name="key"></param>
            <param name="colorScheme"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Owner.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.WorkDays">
            <summary>
            Gets working days associated with this owner. If empty WorkDays from CalendarModel are used instead.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.CalendarWorkDays">
            <summary>
            Gets date based working days associated with this owner. Date specific working days take precedence over days specified in WorkDays collection. If empty WorkDays on owner or from CalendarModel are used instead.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.Key">
            <summary>
            Gets or sets the unique key that identifies the owner.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.Description">
            <summary>
            Gets or sets the owner description. For example if owner represents person, it would be person name or if owner represents resource
            like room it would be the room name.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.Tag">
            <summary>
            Gets or sets custom data associated with the object.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.Calendar">
            <summary>
            Gets the calendar owner is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.DisplayTimeZone">
            <summary>
            Gets or sets the display time-zone for this owner. Default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.ColorScheme">
            <summary>
            Gets or sets the owner color scheme used to represent owner data in user interface.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Owner.DisplayName">
            <summary>
            Gets or sets the display name for the owner. Display name is used in User Interface to identify the owner.
            If not specified the Key is used instead in UI.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Owner.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.Owner.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.OwnerCollection.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the AppointmentCollection class.
            </summary>
            <param name="calendar"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.OwnerCollection.Calendar">
            <summary>
            Gets the calendar collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.OwnerCollection.Item(System.String)">
            <summary>
            Gets the item based on the Key assigned to the item
            </summary>
            <param name="ownerKey"></param>
            <returns></returns>
        </member>
        <member name="T:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction">
            <summary>
            Defines change actions.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction.Add">
            <summary>
            Items were added.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction.Remove">
            <summary>
            Items were removed.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction.Replace">
            <summary>
            Items were replaced.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction.Move">
            <summary>
            Items were moved.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction.Reset">
            <summary>
            Collection was reset.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventHandler">
            <summary>
            Defines delegate for collection notification events.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs">
            <summary>
            Defines collection change notification event arguments.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Specifies action.</param>
            <param name="changedItems">List of changed items.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Specifies action.</param>
            <param name="changedItem">Item that was changed.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action.</param>
            <param name="newItems">New items in collection.</param>
            <param name="oldItems">Old items in collection.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action.</param>
            <param name="changedItems">List of changed items.</param>
            <param name="startingIndex">Starting index of change.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action</param>
            <param name="changedItem">Changed item</param>
            <param name="index">Index of change</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action</param>
            <param name="newItem">New item</param>
            <param name="oldItem">Old item</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action</param>
            <param name="newItems">New items.</param>
            <param name="oldItems">Removed items.</param>
            <param name="startingIndex">Starting index of change.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action</param>
            <param name="changedItems">Changed items</param>
            <param name="index">New index</param>
            <param name="oldIndex">Old index</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action</param>
            <param name="changedItem">Changed item</param>
            <param name="index">New index</param>
            <param name="oldIndex">Old index</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.#ctor(DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Creates new instance of object.
            </summary>
            <param name="action">Action.</param>
            <param name="newItem">New item</param>
            <param name="oldItem">Old item</param>
            <param name="index">New index</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.Action">
            <summary>
            Gets the type of the collection change action.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.NewItems">
            <summary>
            Gets list of newly added items.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets new starting index.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.OldItems">
            <summary>
            Gets list of removed items.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Primitives.NotifyCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Old starting index.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.IRecurrenceGenerator.GenerateDailyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Daily recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Daily recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.IRecurrenceGenerator.GenerateWeeklyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Weekly recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Weekly recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.IRecurrenceGenerator.GenerateMonthlyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Monthly recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Monthly recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.Schedule.Model.IRecurrenceGenerator.GenerateYearlyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)" -->
        <member name="M:DevComponents.Schedule.Model.RecurrenceGenerator.GenerateDailyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Daily recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Daily recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.RecurrenceGenerator.GenerateWeeklyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Weekly recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Weekly recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.RecurrenceGenerator.GenerateMonthlyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Monthly recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Monthly recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.RecurrenceGenerator.GenerateYearlyRecurrence(DevComponents.Schedule.Model.AppointmentSubsetCollection,DevComponents.Schedule.Model.AppointmentRecurrence,System.DateTime,System.DateTime)">
            <summary>
            Generates Yearly recurring appointments. If appointment is assigned to calendar method must populate the Calendar.Appointments collection as well.
            </summary>
            <param name="subsetCollection">Collection to add generated recurrences to</param>
            <param name="recurrence">Recurrence description, must be of Monthly recurrence type.</param>
            <param name="startDate">Start date for generation.</param>
            <param name="endDate">End date for generation.</param>
        </member>
        <member name="T:DevComponents.Schedule.Model.Reminder">
            <summary>
            Represents an appointment reminder.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.#ctor">
            <summary>
            Initializes a new instance of the Reminder class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the Reminder class.
            </summary>
            <param name="reminderTime"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the Reminder class.
            </summary>
            <param name="description"></param>
            <param name="reminderTime"></param>
        </member>
        <member name="F:DevComponents.Schedule.Model.Reminder._ReminderTime">
            <summary>
            Gets or sets the date and time reminder will be executed at.
            <remarks>
            Unless you mark reminder as inactive by setting the IsActive=false the reminder will occur next time
            notifications are updated or when appointment data is loaded.
            </remarks>
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.Reminder._ReminderAction">
            <summary>
            Gets or sets the action performed when reminder time is reached. Default value is Event and Command.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.Snooze(System.DateTime)">
            <summary>
            Snoozes reminder so it occurs at specified notification time. This method should be used instead of the SnoozeDateTime property and it will
            set the SnoozeDateTime property to the next notification time.
            </summary>
            <param name="nextNotificationTime">Next reminder notification time.</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.ProcessNotification">
            <summary>
            Runs the ReminderNotification as if the reminder time has been reached.
            <remarks>This method is automatically called by reminder once ReminderTime has been reached.</remarks>
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.OnReminderNotification(DevComponents.Schedule.Model.ReminderEventArgs)">
            <summary>
            Raises the ReminderNotification event.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.Reminder.Copy">
            <summary>
            Creates an copy of the reminder.
            </summary>
            <returns>Reminder copy.</returns>
        </member>
        <member name="E:DevComponents.Schedule.Model.Reminder.ReminderNotification">
            <summary>
            Occurs when ReminderTime has been reached. Note that event handler will be called on the thread of System.Timer which is different
            than UI thread. You should use BeginInvoke calls to marshal the calls to your UI thread.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.IsActiveForPastAppointments">
            <summary>
            Gets or sets whether reminder will be active for appointments that are in the past. Default value is true.
            This property is useful if you are creating recurring appointments with reminders that start in past but don't want reminders
            for past instances of appointment to be active.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.Description">
            <summary>
            Gets or sets the reminder description.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.Tag">
            <summary>
            Gets or sets additional data associated with the object.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.Appointment">
            <summary>
            Gets the Appointment reminder is attached to.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.IsActive">
            <summary>
            Gets or sets whether reminder is active. Active reminders fire events or execute commands when 
            reminder time has been reached. Set this value to false to dismiss the reminder.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.SnoozeDateTime">
            <summary>
            Gets or sets the next snooze time for the reminder. Use the Snooze method if you want to snooze the reminder correctly.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.Reminder.IsSnoozeReminder">
            <summary>
            Gets or sets whether this reminder is snooze reminder usually created by Reminder dialog when user hits the Snooze button.
            Default value is false.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.ReminderEventArgs">
            <summary>
            Defines arguments for reminder related events.
            </summary>
        </member>
        <member name="F:DevComponents.Schedule.Model.ReminderEventArgs.Reminder">
            <summary>
            Gets the reminder referenced by this event.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.ReminderEventArgs.#ctor(DevComponents.Schedule.Model.Reminder)">
            <summary>
            Initializes a new instance of the ReminderEventArgs class.
            </summary>
            <param name="appointment"></param>
        </member>
        <member name="T:DevComponents.Schedule.Model.ReminderCollection">
            <summary>
            Represents collection of reminders.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.ReminderCollection.#ctor(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Initializes a new instance of the ReminderCollection class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.ReminderCollection.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the ReminderCollection class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.ReminderCollection.Appointment">
            <summary>
            Gets parent appointment.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.ReminderCollection.ParentModel">
            <summary>
            Gets parent model if collection is custom reminders collection.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.WeeklyRecurrenceSettings">
            <summary>
            Defines weekly recurrence settings.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.#ctor(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            Initializes a new instance of the WeeklyRecurrenceSettings class.
            </summary>
            <param name="recurrence"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.RepeatOnDaysOfWeek">
            <summary>
            Gets or sets the days of week on which appointment is repeated. This property is represented by bit-flag enum
            which means that you can combine the values from eDayOfWeekRecurrence enum using OR operator to specify multiple values.
            Default value is All.
            <remarks>
            <para>This property value cannot be set to eDayOfWeekRecurrence.None.</para> 
            </remarks>
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.RepeatInterval">
            <summary>
            Gets or sets the interval between recurring appointments. Default value is 1.
            <remarks>
            For example, setting RepeatInterval to 2 means that appointment will recur every 2 weeks.
            </remarks>
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.WeeklyRecurrenceSettings.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.WorkDay">
            <summary>
            Represents working day in calendar.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkDay.#ctor">
            <summary>
            Initializes a new instance of the WorkDay class.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkDay.#ctor(System.DayOfWeek)">
            <summary>
            Initializes a new instance of the WorkDay class.
            </summary>
            <param name="dayOfWeek"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkDay.#ctor(System.DayOfWeek,DevComponents.Schedule.Model.WorkTime,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Initializes a new instance of the WorkDay class.
            </summary>
            <param name="dayOfWeek"></param>
            <param name="workStartTime"></param>
            <param name="workEndTime"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkDay.DayOfWeek">
            <summary>
            Gets or sets the day of week this instance represents.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.WorkDayCollection">
            <summary>
            Represents collection of working days.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkDayCollection.#ctor(DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the AppointmentCollection class.
            </summary>
            <param name="calendar"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkDayCollection.#ctor(DevComponents.Schedule.Model.Owner)">
            <summary>
            Initializes a new instance of the WorkDayCollection class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkDayCollection.Owner">
            <summary>
            Gets the Owner of work-day collection.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkDayCollection.Calendar">
            <summary>
            Gets the calendar collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkDayCollection.Item(System.DayOfWeek)">
            <summary>
            Gets the item based on the Key assigned to the item
            </summary>
            <param name="day">Day of week to retrive data for.</param>
            <returns>Reference to WorkDay or null if no day in collection.</returns>
        </member>
        <member name="T:DevComponents.Schedule.Model.WorkTime">
            <summary>
            Represents a work time.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.WorkTime.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WorkTime structure.
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkTime.Hour">
            <summary>
            Gets or sets the hour from 0 to 23 this time instance represents.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkTime.Minute">
            <summary>
            Gets or sets the minute from 0 to 59 this time instance represents.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.WorkTime.IsEmpty">
            <summary>
            Determines if the WorkTime is Empty
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.Year">
            <summary>
            Represents the calendar year.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.Year.#ctor(System.Int32,DevComponents.Schedule.Model.CalendarModel)">
            <summary>
            Initializes a new instance of the Year class.
            </summary>
            <param name="year"></param>
            <param name="calendarModel"></param>
        </member>
        <member name="P:DevComponents.Schedule.Model.Year.Months">
            <summary>
            Returns read-only collection of months in year.
            </summary>
        </member>
        <member name="T:DevComponents.Schedule.Model.YearlyRecurrenceSettings">
            <summary>
            Defines yearly recurrence settings.
            </summary>
        </member>
        <member name="M:DevComponents.Schedule.Model.YearlyRecurrenceSettings.#ctor(DevComponents.Schedule.Model.AppointmentRecurrence)">
            <summary>
            Initializes a new instance of the YearlyRecurrenceSettings class.
            </summary>
            <param name="recurrence"></param>
        </member>
        <member name="M:DevComponents.Schedule.Model.YearlyRecurrenceSettings.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Schedule.Model.YearlyRecurrenceSettings.OnSubPropertyChanged(DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Raises the SubPropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Schedule.Model.YearlyRecurrenceSettings.RepeatInterval">
            <summary>
            Gets or sets the interval between recurring appointments. Default value is 1.
            <remarks>
            For example, setting RepeatInterval to 2 means that appointment will recur every 2 years.
            </remarks>
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.YearlyRecurrenceSettings.RepeatOnDayOfMonth">
            <summary>
            Gets or sets the day of month on which appointment is repeated.
            When RepeatOnRelativeDayInMonth property is set to value other than None value of this property is not used.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.YearlyRecurrenceSettings.RepeatOnRelativeDayInMonth">
            <summary>
            Gets or sets whether appointment should repeat on first, second, third, fourth or last day in month as specified
            by RepeatOnDayOfMonth property. Default value is None.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.YearlyRecurrenceSettings.RelativeDayOfWeek">
            <summary>
            Gets or sets the day of week on which relative repeat as specified by RepeatOnRelativeDayInMonth is effective.
            For example setting RepeatOnRelativeDayInMonth to First and RelativeDayOfWeek to Monday will repeat the appointment on first
            Monday in a month.
            </summary>
        </member>
        <member name="P:DevComponents.Schedule.Model.YearlyRecurrenceSettings.RepeatOnMonth">
            <summary>
            Gets or sets the month the appointment is repeated on every year.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.YearlyRecurrenceSettings.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Schedule.Model.YearlyRecurrenceSettings.SubPropertyChanged">
            <summary>
            Occurs when property or property of child objects has changed. This event is similar to PropertyChanged event with key
            difference that it occurs for the property changed of child objects as well.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.#ctor(DevComponents.Schedule.Model.CalendarModel,DevComponents.DotNetBar.Schedule.MonthView)">
            <summary>
            Constructor
            </summary>
            <param name="model">Assoc CalendarModel</param>
            <param name="monthView">Assoc MonthView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.Connect">
            <summary>
            Performs Model connection processing
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.Disconnect">
            <summary>
            Severs the Model/MonthView connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.ClearMonthWeek(DevComponents.DotNetBar.Schedule.MonthWeek)">
            <summary>
            Clears individual MonthWeek view connections
            </summary>
            <param name="monthWeek">MonthWeek</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.LoadData">
            <summary>
            Loads Model/MonthView connection data
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.RefreshData">
            <summary>
            Refreshes the data in a previously established
            and loaded connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.ProcessRemovedData(System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentMonthView},System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.CustomCalendarItem})">
            <summary>
            Process any remaining removed data
            </summary>
            <param name="removedViews"></param>
            <param name="removedItems"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.UpdateWeekView(DevComponents.DotNetBar.Schedule.MonthWeek,System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment},System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentMonthView})">
            <summary>
            Updates individual MonthWeek views
            </summary>
            <param name="monthWeek">MonthWeek</param>
            <param name="appointments">List of appointments</param>
            <param name="cachedViews">List of cached views</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetViewsFromAll(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets all appointment AppointmentMonthViews
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetViewFromWeek(DevComponents.DotNetBar.Schedule.MonthWeek,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the view from the MonthWeek list
            </summary>
            <param name="monthWeek">MonthWeek</param>
            <param name="appointment">Appointment</param>
            <returns>Appointment view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetViewFromCache(DevComponents.Schedule.Model.Appointment,System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentMonthView})">
            <summary>
            Gets the view from the cached list
            </summary>
            <param name="appointment">Appointment</param>
            <param name="cachedViews">Cached views</param>
            <returns>Appointment view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetNewView(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets a new appointment view
            </summary>
            <param name="appointment">Appointment</param>
            <returns>New view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetNewCustomItem(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Gets a new CustomItem
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.RemoveDuplicates(System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Removes duplicate multi-day appointments
            </summary>
            <param name="appointments"></param>
            <returns>Trimmed list</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.RemoveOutdatedViews(System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentMonthView}@,DevComponents.DotNetBar.Schedule.MonthWeek,System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Removes out-dated views
            </summary>
            <param name="removedViews"></param>
            <param name="monthWeek"></param>
            <param name="appointments"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.GetView">
            <summary>
            Returns the Month view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.VerifyModel">
            <summary>
            Verifies the Model and MonthView are valid
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.ModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles Model property change notifications
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.ModelSubPropertyChanged(System.Object,DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Handles ModelSubProperty change notifications
            </summary>
            <param name="sender">object</param>
            <param name="e">SubPropertyChangedEventArgs</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelMonthViewConnector.IsConnected">
            <summary>
            Gets the connection status
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">Parent CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.OnIsSideBarVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            OnIsSideBarVisibleChanged event propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.HookEvents(System.Boolean)">
            <summary>
            Hooks (or unhooks) needed events
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.SelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Processes CalendarView SelectedViewChanged events
            </summary>
            <param name="sender">CalendarView</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.MonthViewStartDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes StartDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.MonthViewEndDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes EndDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.IsMonthSideBarVisibleChanged(System.Object,DevComponents.DotNetBar.Schedule.IsMonthSideBarVisibleChangedEventArgs)">
            <summary>
            Processes CalendarView IsMonthSideBarVisibleChanged events
            </summary>
            <param name="sender">CalendarView</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse
            point (tab, header, content, etc)
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the date selection from the given point. The startDate
            and endDate will vary based upon the view type (WeekDay / Month)
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">out start date</param>
            <param name="endDate">out end date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ItemIsSelectedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles selected item changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.SetSelectedItem(DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Sets the current selected item
            </summary>
            <param name="pci">Previous CalendarItem</param>
            <param name="nci">New CalendarItem to select</param>
            <returns>Base selected CalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.UpdateDateSelection">
            <summary>
            Updates each monthWeeks DayRects to reflect
            the date selection start and end values
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.RecalcSize">
            <summary>
            Performs NeedRecalcSize requests
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.UpdateView">
            <summary>
            Updates our connection model view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.UpdateCalendarItems">
            <summary>
            Updates our CalendarItems list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.SortCalendarItems">
            <summary>
            Sorts the provided CalendarItems
            </summary>
            <returns>Sorted CalendarItems</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.CalcAppointmentBounds(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32,System.Int32[]@)">
            <summary>
            Calculates the display bounds for the AppointmentView
            </summary>
            <param name="item">CalendarItem</param>
            <param name="week">Week associated with the view</param>
            <param name="acc">Row accumulator</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetDayIndex(System.Int32,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Gets the starting day index for the given appointment
            </summary>
            <param name="week">Week index</param>
            <param name="item">CalendarItem</param>
            <returns>Day of week index (0-6)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.UpdateMoreItems(DevComponents.DotNetBar.Schedule.MonthWeek,System.Int32[])">
            <summary>
            UpdateMoreItems
            </summary>
            <param name="monthWeek"></param>
            <param name="acc"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.CalcMonthWeeks(System.DateTime,System.DateTime)">
            <summary>
            Calculates display info for the MonthWeek data
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetDayRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of days needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="dayStart">[out] Day start index</param>
            <param name="dayEnd">[out] Day end index</param>
            <returns>Day range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetWeekRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of weeks needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="weekStart">[out] Week start index</param>
            <param name="weekEnd">[out] Week end index</param>
            <returns>Week range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawDayOfTheWeekHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Draws the top Day of the week header
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="dayStart">Start day index</param>
            <param name="dayEnd">End day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawDays(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws day header and content
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="weekStart">Week start index</param>
            <param name="weekEnd">Week end index</param>
            <param name="dayStart">Day start index</param>
            <param name="dayEnd">Day end index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawDayBackground(System.Drawing.Graphics,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.eCalendarMonthPart)">
            <summary>
            DrawDayBackground
            </summary>
            <param name="g"></param>
            <param name="week"></param>
            <param name="day"></param>
            <param name="part"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawDayContent(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Pen)">
            <summary>
            Draws the day content
            </summary>
            <param name="g"></param>
            <param name="iweek">Week index</param>
            <param name="iday">Day index</param>
            <param name="pen">Pen</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetSlotState(System.Int32,System.Int32,System.Int32)">
            <summary>
            GetSlotState
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetContentPart(DevComponents.DotNetBar.Schedule.eSlotDisplayState)">
            <summary>
            Gets the content calendar part for the given
            week and dayMonth
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawDayHeader(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Pen)">
            <summary>
            Draws day header
            </summary>
            <param name="g"></param>
            <param name="iweek">Week index</param>
            <param name="iday">Day index</param>
            <param name="pen">Text pen</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetDayHeaderText(System.DateTime)">
            <summary>
            GetDayHeaderText
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawWeekAppointments(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Initiates the drawing of weekly appointments
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="weekStart">Week start index</param>
            <param name="weekEnd">Week end index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetMoreImagePath">
            <summary>
            Gets the More image path
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DrawSideBarHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Draws the SideBar header
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="weekStart">Week start index</param>
            <param name="weekEnd">Week end index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessCilButtonDown(System.Int32,System.Int32)">
            <summary>
            CalendarItem left mouseDown processing
            </summary>
            <param name="week">Week index</param>
            <param name="day">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessMvlButtonDown(System.Int32,System.Int32)">
            <summary>
            Handles MonthView left MouseDown events
            </summary>
            <param name="week">Week index</param>
            <param name="day">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessMoreButtonDown(System.Int32,System.Int32)">
            <summary>
            ProcessMoreButtonDown
            </summary>
            <param name="week"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetCursor">
            <summary>
            Gets the cursor
            </summary>
            <returns>Cursor</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DragDropAppointment(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initiates a user "DragDrop" operation - if enabled
            </summary>
            <param name="objArgs"></param>
            <returns>True if operation started</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.DragAppointment(DevComponents.DotNetBar.Schedule.MonthView,DevComponents.DotNetBar.Schedule.AppointmentView,System.Drawing.Point)">
            <summary>
            Drags the given appointment from one view to another
            </summary>
            <param name="pv">Previous view</param>
            <param name="av">AppointmentView</param>
            <param name="pt">Point</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessMvMouseMove(System.Int32,System.Int32)">
            <summary>
            Processes MonthView mouseMove events
            </summary>
            <param name="week"></param>
            <param name="day"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessMoreMouseMove(System.Int32,System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            ProcessMoreMouseMove
            </summary>
            <param name="week"></param>
            <param name="day"></param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessItemMove(System.Int32,System.Int32)">
            <summary>
            Processes CalendarItem mouseMove events
            </summary>
            <param name="week">Week index</param>
            <param name="day">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetCalendarItemWeekRange(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32@,System.Int32@)">
            <summary>
            Gets the CalendarItems current week/day range
            </summary>
            <param name="item">CalendarItem</param>
            <param name="startWeek">[out] Start week index</param>
            <param name="endWeek">[out] End week index</param>
            <returns>Day index</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessItemLeftResize(System.Int32,System.Int32)">
            <summary>
            Processes CalendarItem left resizing
            </summary>
            <param name="week">Week index</param>
            <param name="day">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessItemRightResize(System.Int32,System.Int32)">
            <summary>
            Processes CalendarItem right resizing
            </summary>
            <param name="week">Week index</param>
            <param name="day">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetPointItem(System.Drawing.Point,System.Int32@,System.Int32@)">
            <summary>
            Gets the week and day index item for
            the given point
            </summary>
            <param name="pt">Point</param>
            <param name="week">[out] Week index</param>
            <param name="day">[out] Day index</param>
            <returns>Success or failure</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetPointWeek(System.Drawing.Point)">
            <summary>
            Gets the week index for the given point
            </summary>
            <param name="pt">Point</param>
            <returns>Week index</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetPointDay(System.Drawing.Point,System.Int32)">
            <summary>
            Gets the day index for the given point
            </summary>
            <param name="pt">Point</param>
            <param name="week">Week index</param>
            <returns>Day index</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.InternalKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes KeyDown events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessUpDownKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Up and Down Key events
            </summary>
            <param name="objArg"></param>
            <param name="dy"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessLeftRightKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Left and Right key events
            </summary>
            <param name="objArg"></param>
            <param name="dx"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessHomeKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes Hoe key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.ProcessEndKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes End key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetWeekFromDate(System.DateTime)">
            <summary>
            Gets the week containing the given date
            </summary>
            <param name="date"></param>
            <returns>Week or -1</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.GetHomeEndWeek">
            <summary>
            Gets the Home and End week from the
            current selection range
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthView.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the MonthView specific properties to new instance of the item.
            </summary>
            <param name="copy">New MonthView instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthView.IsSideBarVisible">
            <summary>
            Gets and sets the SideBar visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthView.SideBarWidth">
            <summary>
            Gets the sidebar width
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthView.DayHeaderHeight">
            <summary>
            Gets the DayHeader height
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.IsSideBarVisibleChangedEventArgs">
            <summary>
            IsSideBarVisibleChangedEventArgs
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthWeek.#ctor(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Constructor
            </summary>
            <param name="baseItem"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.MonthWeek.CalcDayRects">
            <summary>
            Calculates the day rectangles for the
            current bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.CalendarItems">
            <summary>
            Gets array of CalendarItems
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.FirstDayOfWeek">
            <summary>
            Gets the first day of the week
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.Bounds">
            <summary>
            Gets and sets the week bounding Rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.DayRects">
            <summary>
            Gets the day Rectangles
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.MoreItems">
            <summary>
            Gets the MoreItems
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.WeekRange">
            <summary>
            Gets the week day range text
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.DayHeight">
            <summary>
            Gets day height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.MonthWeek.DayWidth">
            <summary>
            Gets day width
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.PosWin.#ctor(DevComponents.DotNetBar.Schedule.BaseView)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.PosWin.UpdateWin(System.Drawing.Rectangle)">
            <summary>
            Updates the posWin
            </summary>
            <param name="viewRect">View rectangle</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.PosWin.PosWin_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.PosWin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.PosWin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.PosWin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PosWin.PosText">
            <summary>
            Gets and sets the window content text
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.PosWin.PosHeight">
            <summary>
            Gets the calculated window height
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ScheduleSettings.GetActiveCulture">
            <summary>
            Gets the Culture used by the date time input and month calendar controls
            </summary>
            <returns>reference to CultureInfo</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ScheduleSettings.CurrentCulture">
            <summary>
            Gets or sets the CultureInfo for the culture used by the DateTime and Numeric Input controls.
            Default value is null which indicates that controls will use CurrentUICulture.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.IsVisible">
            <summary>
            Gets whether the indicator is visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.IsVisible(DevComponents.DotNetBar.Schedule.CalendarView,DevComponents.DotNetBar.Schedule.BaseView)">
            <summary>
            Gets whether the indicator is visible
            in the given view 
            </summary>
            <param name="calendarView"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorColor_ColorDefChanged(System.Object,System.EventArgs)">
            <summary>
            Handles ColorDefChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.OnTimeIndicatorChanged">
            <summary>
            Handles TimeIndicatorChanged propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.OnTimeIndicatorColorChanged">
            <summary>
            Handles OnTimeIndicatorColorChanged propagation
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.OnTimeIndicatorTimeChanged(System.DateTime,System.DateTime)">
            <summary>
            Handles TimeIndicatorTimeChanged propagation
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.BeginUpdate">
            <summary>
            Begins Update block
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicator.EndUpdate">
            <summary>
            Ends update block
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicator.TimeIndicatorChanged">
            <summary>
            Occurs when the collection has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicator.TimeIndicatorTimeChanged">
            <summary>
            Occurs when a TimeIndicator time has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicator.TimeIndicatorColorChanged">
            <summary>
            Occurs when a TimeIndicator Color has changed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorDisplayTime">
            <summary>
            Gets the Indicator display time.
            
            The DisplayTime is the addition of the IndicatorTime
            and IndicatorTimeOffset.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IsDesignMode">
            <summary>
            Gets or sets whether we are in design mode
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IsProtected">
            <summary>
            Gets or sets whether the timer indicator
            is protected (can't be deleted)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.BorderColor">
            <summary>
            Gets or sets the leading edge border color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.Enabled">
            <summary>
            Gets or sets whether automatic time updates are enabled.
            This property, whose default is true, is only utilized when
            the IndicatorSource is set to eTimeIndicatorSource.SystemTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorArea">
            <summary>
            Gets or sets the Indicator Display Area.
            
            This property determines where the Indicator is
            drawn: in the Time Header, View Content, or both.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorColor">
            <summary>
            Gets or sets the Indicator color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorTime">
            <summary>
            Gets or sets the Indicator time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorTimeOffset">
            <summary>
            Gets or sets the Indicator time offset.
            
            This value is added to the current IndicatorTime
            before displaying the indicator.
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.Visibility">
            <summary>
            Gets or sets the Indicator visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.Tag">
            <summary>
            Gets or sets the User defined data associated with the object
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.Thickness">
            <summary>
            Gets or sets the thickness of the Indicator
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicator.IndicatorSource">
            <summary>
            Gets or sets the IndicatorTime source
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeIndicatorConvertor">
            <summary>
            TimeIndicatorConvertor
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eTimeIndicatorSource">
            <summary>
            Specifies the source for the IndicatorTime
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eTimeIndicatorVisibility">
            <summary>
            Specifies the Indicator visibility
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.eTimeIndicatorArea">
            <summary>
            Specifies the Indicator display area
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.AddRange(DevComponents.DotNetBar.Schedule.TimeIndicator[])">
            <summary>
            Adds a range of TimeIndicators to the collection
            </summary>
            <param name="items">Array of items to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.RemoveItem(System.Int32)">
            <summary>
            Processes list RemoveItem calls
            </summary>
            <param name="index">Index to remove</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.InsertItem(System.Int32,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Processes list InsertItem calls
            </summary>
            <param name="index">Index to add</param>
            <param name="item">TimeIndicator to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.SetItem(System.Int32,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Processes list SetItem calls (e.g. replace)
            </summary>
            <param name="index">Index to replace</param>
            <param name="newItem">TimeIndicator to replace</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.ClearItems">
            <summary>
            Processes list Clear calls (e.g. remove all)
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.IndicatorCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            IndicatorCollectionChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.IndicatorColorChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorColorChangedEventArgs)">
            <summary>
            IndicatorColorChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.IndicatorTimeChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs)">
            <summary>
            IndicatorTimeChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.OnCollectionChanged">
            <summary>
            Propagates TimeIndicatorCollectionChanged events
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.OnTimeIndicatorColorChanged(DevComponents.DotNetBar.Schedule.TimeIndicatorColorChangedEventArgs)">
            <summary>
            Propagates OnTimeIndicatorColorChanged events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.OnTimeIndicatorTimeChanged(DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs)">
            <summary>
            Propagates OnTimeIndicatorTimeChanged events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.UpdateTimerUse">
            <summary>
            Updates our system timer use
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.TimerNeeded">
            <summary>
            Determines if a system timer is needed
            </summary>
            <returns>true if needed</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles our timer tick events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.BeginUpdate">
            <summary>
            Begins Update block
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.EndUpdate">
            <summary>
            Ends update block
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.TimeIndicatorCollectionChanged">
            <summary>
            Occurs when the TimeIndicator collection has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.TimeIndicatorTimeChanged">
            <summary>
            Occurs when a TimeIndicator time has changed
            </summary>
        </member>
        <member name="E:DevComponents.DotNetBar.Schedule.TimeIndicatorCollection.TimeIndicatorColorChanged">
            <summary>
            Occurs when a TimeIndicator Color has changed
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs">
            <summary>
            TimeIndicatorTimeChangedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs.TimeIndicator">
            <summary>
            Gets the TimeIndicator being affected
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs.OldTime">
            <summary>
            Gets the old DateTime
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs.NewTime">
            <summary>
            Gets the new DateTime
            </summary>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.TimeIndicatorColorChangedEventArgs">
            <summary>
            TimeIndicatorColorChangedEventArgs
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeIndicatorColorChangedEventArgs.TimeIndicator">
            <summary>
            Gets the TimeIndicator being affected
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayInfo.WorkStartTime">
            <summary>
            Gets and sets work start time
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayInfo.WorkEndTime">
            <summary>
            Gets and sets work end time
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.#ctor(DevComponents.Schedule.Model.CalendarModel,DevComponents.DotNetBar.Schedule.TimeLineView)">
            <summary>
            Constructor
            </summary>
            <param name="model">Assoc CalendarModel</param>
            <param name="timeLineView">Assoc TimeLineView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.Connect">
            <summary>
            Performs Model connection processing
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.HookEvents(System.Boolean)">
            <summary>
            Hooks or unhooks our system events
            </summary>
            <param name="hook"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.ModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles Model property change notifications
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.ModelSubPropertyChanged(System.Object,DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Handles ModelSubProperty change notifications
            </summary>
            <param name="sender">object</param>
            <param name="e">SubPropertyChangedEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.CustomItemsCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles CustomItemCollection change events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.Disconnect">
            <summary>
            Severs the Model/TimeLineView connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.ClearTimeLineItems">
            <summary>
            Clears TimeLine view items
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.LoadData">
            <summary>
            Loads Model/TimeLineView connection data
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.LoadViewData(System.Boolean,System.Boolean)">
            <summary>
            Loads the view data
            </summary>
            <param name="reload">Forceful reload</param>
            <param name="validate">Validation needed</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.LoadPeriodData(System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Loads the Period data (visible view range)
            </summary>
            <param name="reload">Forceful reload</param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns>reload flag</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.LoadLineData(System.Boolean)">
            <summary>
            Loads the TimeLine appointment data
            </summary>
            <param name="reload"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.RefreshData(System.Boolean)">
            <summary>
            Refreshes the data in a previously established
            and loaded connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetDateRange(System.DateTime@,System.DateTime@)">
            <summary>
            Gets the range of appointment dates
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.UpdateTimeLineView(System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Updates the TimeLine view
            </summary>
            <param name="appointments"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.UpdateCustomItems">
            <summary>
            Updates the TimeLine CustomItems
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.UpdateWorkDayDetails">
            <summary>
            Updates the WorkDay details array
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.RemoveOutdatedViews(System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Removes Outdated Views
            </summary>
            <param name="appts"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.ValidViewAppointment(System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment},DevComponents.DotNetBar.Schedule.AppointmentTimeLineView)">
            <summary>
            Determines if the provided view is valid, given
            the current list of Appointments
            </summary>
            <param name="appts"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.RemoveOutdatedCustomItems">
            <summary>
            Removes out dated CustomItems
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.IsValidItem(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Determines if the given CustomItem is valid
            for the current view
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetViewFromTimeLine(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the AppointmentView from the timeline
            </summary>
            <param name="appointment"></param>
            <returns>AppointmentView or null</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetItemFromTimeLine(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Gets the CustomCalendarItem from the timeline.
            </summary>
            <param name="item"></param>
            <returns>CustomCalendarItem or null</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetNewView(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets a new appointment view
            </summary>
            <param name="appointment">Appointment</param>
            <returns>New view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetNewCustomItem(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Gets a new CustomCalendarItem
            </summary>
            <param name="item"></param>
            <returns>CustomCalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.GetView">
            <summary>
            Returns the view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.VerifyModel">
            <summary>
            Verifies the Model and MonthView are valid
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.IsConnected">
            <summary>
            Gets the connection status
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.Appts">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelTimeLineViewConnector.DayInfo">
            <summary>
            Gets the DayInfo array
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.HookEvents(System.Boolean)">
            <summary>
            Routine hooks all necessary events for this control
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.TimeLineIntervalPeriodChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeLineIntervalPeriodChangedEventArgs)">
            <summary>
            TimeLineIntervalPeriod Change notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.TimeLineIntervalChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeLineIntervalChangedEventArgs)">
            <summary>
            TimeLineInterval Change notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.TimeIndicatorCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles TimeIndicatorCollectionChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.TimeIndicatorTimeChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs)">
            <summary>
            Handles TimeIndicatorTimeChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.ScrollPanelChanged(System.Object,System.EventArgs)">
            <summary>
            Horizontal Scroll Panel change notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse point
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing routine
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawDateHeader(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Draws the encompassing Date header
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.PeriodChange(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Determines if a date period change has occurred
            </summary>
            <param name="date1">Initial date</param>
            <param name="date2">Current date</param>
            <param name="col">Current column</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawDatePeriod(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Draws a given date period or range
            </summary>
            <param name="e"></param>
            <param name="scol">Starting column</param>
            <param name="ecol">Ending column</param>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.AlignMarkUpText(System.Drawing.Rectangle)">
            <summary>
            Aligns the MarkUp text
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.RenderMarkup(System.Drawing.Graphics,DevComponents.DotNetBar.TextMarkup.MarkupDrawContext)">
            <summary>
            Renders the current MarkUp
            </summary>
            <param name="g"></param>
            <param name="d"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetDatePeriodText(System.DateTime@,System.DateTime@)">
            <summary>
            Gets our default Period text
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawIntervalHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Draws the time interval header
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="colStart">Starting column</param>
            <param name="colEnd">Ending column</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            DrawBackground
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawTimeIndicators(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws view TimeIndicators
            </summary>
            <param name="g"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawTimeIndicator(System.Drawing.Graphics,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Draws individual view TimeIndicator
            </summary>
            <param name="g"></param>
            <param name="startDate"></param>
            <param name="sRect"></param>
            <param name="ti"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetIndicatorColor(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Back color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetIndicatorBorder(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Border color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator,System.DateTime,System.Drawing.Rectangle)">
            <summary>
            CalcIndicatorRect
            </summary>
            <param name="ti"></param>
            <param name="startDate"></param>
            <param name="sRect"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.DrawContent(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            DrawContent
            </summary>
            <param name="g"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetIntervalText(System.DateTime)">
            <summary>
            Gets the interval text
            </summary>
            <param name="date">DateTime</param>
            <returns>Interval text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetMinuteIntervalText(System.DateTime)">
            <summary>
            Gets minute interval text
            </summary>
            <param name="date">DateTime</param>
            <returns>Interval text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetDayIntervalText(System.DateTime)">
            <summary>
            Gets Day interval text
            </summary>
            <param name="date"></param>
            <returns>Interval text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetYearIntervalText(System.DateTime)">
            <summary>
            Gets year interval text
            </summary>
            <param name="date"></param>
            <returns>Interval text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.GetColRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of days needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="colStart">[out] Column start index</param>
            <param name="colEnd">[out] Column end index</param>
            <returns>Day range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the TimeLineHeaderPanel specific properties to new instance of the item.
            </summary>
            <param name="copy">New TimeLineHeaderPanel instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.ColumnWidth">
            <summary>
            Gets the ColumnWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.ColumnCount">
            <summary>
            Gets the TimeLineColumnCount
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.ShowPeriodHeader">
            <summary>
            Gets the ShowPeriodHeader property
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.ShowIntervalHeader">
            <summary>
            Gets the ShowIntervalHeader property
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.IntervalHeaderHeight">
            <summary>
            Interval header height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.PeriodHeaderHeight">
            <summary>
            Period header height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.HeaderFont">
            <summary>
            Header font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.StartDate">
            <summary>
            TimeLine start date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.CalendarColor">
            <summary>
            Gets and sets the view color
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHeaderPanel.IsMarkupSupported">
            <summary>
            IsMarkupSupported
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">_CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.HookScrollEvents(System.Boolean)">
            <summary>
            Hooks our ScrollBar events
            </summary>
            <param name="hook"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.HookNavigateEvents(System.Boolean)">
            <summary>
            Hooks our PageNavigator events
            </summary>
            <param name="hook"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollBarScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            ScrollBar Scroll event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Processes ScrollBar ValueChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.NavigatePreviousPage(System.Object,System.EventArgs)">
            <summary>
            Navigates to the previous page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.NavigateToday(System.Object,System.EventArgs)">
            <summary>
            Navigates to Today
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.NavigateNextPage(System.Object,System.EventArgs)">
            <summary>
            Navigates to the Next page
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.IncreaseEndDate(System.Int32)">
            <summary>
            Increases timeline EndDate
            </summary>
            <param name="n">Amount to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.GetIncreaseEndDate(System.Int32)">
            <summary>
            Increases timeline EndDate
            </summary>
            <param name="n">Amount to add</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.DecreaseStartDate(System.Int32)">
            <summary>
            Decreases the timeline StartDate
            </summary>
            <param name="n">Amount to del</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.GetDecreaseStartDate(System.Int32)">
            <summary>
            Decreases the timeline StartDate
            </summary>
            <param name="n">Amount to del</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.BeginUpdate">
            <summary>
            Begins Update block
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.EndUpdate">
            <summary>
            Ends update block
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.SetUpPanel">
            <summary>
            Performs panel setup
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.SetupPageNavigator(System.Windows.Forms.Control)">
            <summary>
            Sets-up the PageNavigator
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.UpdatePanel">
            <summary>
            Updates the panel
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.UpdatePageNavigator">
            <summary>
            Updates the PageNavigator
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.UpdateScrollBar">
            <summary>
            Updates our ScrollBar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.OnScrollPanelUpdate">
            <summary>
            Passes the scroll onto others
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.RecalcSize">
            <summary>
            Performs control recalc
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.Copy">
            <summary>
            Returns copy of the item
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the TimeLineHScrollPanel specific properties to
            new instance of the item
            </summary>
            <param name="copy">New PageNavigatorItem instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.Bounds">
            <summary>
            Gets and sets the display bounds
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.Visible">
            <summary>
            Gets and sets the visible status
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollBar">
            <summary>
            Gets the ScrollBar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollPanelSmallChange">
            <summary>
            Gets the scrollBar SmallChange value
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollPanelLargeChange">
            <summary>
            Gets the scrollBar LargeChange value
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineHScrollPanel.ScrollPanelMaximum">
            <summary>
            Gets the scrollBar Maximum value
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.HookEvents(System.Boolean)">
            <summary>
            Routine hooks all necessary events for this control
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.SelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Processes view changes
            </summary>
            <param name="sender">object</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.TimeLineViewStartDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes StartDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.TimeLineViewEndDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes EndDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.TimeLineIntervalPeriodChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeLineIntervalPeriodChangedEventArgs)">
            <summary>
            Handles IntervalPeriodChange notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.TimeLineIntervalChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeLineIntervalChangedEventArgs)">
            <summary>
            Handles IntervalChange notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ScrollPanelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles ScrollPanel change notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse
            point (tab, header, content, etc)
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the date selection from the given point. The startDate
            and endDate will vary based upon the view type
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">out start date</param>
            <param name="endDate">out end date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ItemIsSelectedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles selected item changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.SetSelectedItem(DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Sets the current selected item
            </summary>
            <param name="pci">Previous CalendarItem</param>
            <param name="nci">New CalendarItem</param>
            <returns>New selected CalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.UpdateDateSelection">
            <summary>
            Updates our slice selection range to reflect
            the given date selection start and end values
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessSelRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes the selection time column range
            </summary>
            <param name="colStart">Column range start</param>
            <param name="colEnd">Column range end</param>
            <param name="c1">Column start limit</param>
            <param name="c2">Column end limit</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.SelectedColumns(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an array of column selection values
            over the given range of columns
            </summary>
            <param name="c1">Column start limit</param>
            <param name="c2">Column end limit</param>
            <param name="colStart">Slice range start</param>
            <param name="colEnd">Slice range end</param>
            <returns>Array of selection values</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.RecalcSize">
            <summary>
            Performs NeedRecalcSize requests
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.UpdateView">
            <summary>
            Updates our connection model view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ResetView">
            <summary>
            Disconnects and resets the Model connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.UpdateCalendarItems">
            <summary>
            Updates our CalendarItems list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.SortCalendarItems(System.Collections.Generic.IEnumerable{DevComponents.DotNetBar.Schedule.CalendarItem})">
            <summary>
            Sorts the provided CalendarItems
            </summary>
            <returns>Sorted CalendarItems</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.CalcAppointmentBounds(DevComponents.DotNetBar.Schedule.ColumnList,System.Int32,System.Boolean)">
            <summary>
            Calculates normal appointment bounds
            </summary>
            <param name="colList">Accumulated ColumnList</param>
            <param name="dy"></param>
            <param name="collate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetRowHeight(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32)">
            <summary>
            Get the RowHeight for the given CalendarItem
            </summary>
            <param name="item">CalendarItem</param>
            <param name="height">Calculated height</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.UpdateCondensedColumnList">
            <summary>
            Updates the condensed view column list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.IsAppointmentVisible(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Determines if an appointment is visible
            for the given DisplayOwner
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawTimeLine(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Initiates the drawing of the TimeLine
            </summary>
            <param name="g">Graphics</param>
            <param name="colStart">Starting column</param>
            <param name="colEnd">Ending column</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawContent(System.Drawing.Graphics,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.eSlotDisplayState[])">
            <summary>
            Draws the content area of the TimeLine
            </summary>
            <param name="g"></param>
            <param name="colStart">Starting column</param>
            <param name="colEnd">Ending column</param>
            <param name="states"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetSlotState(System.Int32)">
            <summary>
            GetSlotState
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetContentBrush(DevComponents.DotNetBar.Schedule.eSlotDisplayState)">
            <summary>
            Gets the background content brush
            for the given time slice
            </summary>
            <returns>Background brush</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.IsWorkTime(System.Int32,DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Determines if the given time is tagged as a "Work time"
            </summary>
            <param name="day">Day of week</param>
            <param name="time">WorkTime to test</param>
            <returns>true if specified "time" is a Work time</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawBorder(System.Drawing.Graphics,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.eSlotDisplayState[])">
            <summary>
            Draws the TimeLine border
            </summary>
            <param name="g"></param>
            <param name="colStart">Starting column</param>
            <param name="colEnd">Ending column</param>
            <param name="states"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawHalfHourBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState[])">
            <summary>
            DrawHalfHourBorders
            </summary>
            <param name="g"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <param name="bounds"></param>
            <param name="states"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawHourBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.eSlotDisplayState[])">
            <summary>
            DrawHourBorders
            </summary>
            <param name="g"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <param name="bounds"></param>
            <param name="states"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawTimeIndicators(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws view TimeIndicators
            </summary>
            <param name="g"></param>
            <param name="colStart"></param>
            <param name="colEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawTimeIndicator(System.Drawing.Graphics,System.DateTime,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Draws individual view TimeIndicator
            </summary>
            <param name="g"></param>
            <param name="startDate"></param>
            <param name="sRect"></param>
            <param name="ti"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetIndicatorColor(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Back color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetIndicatorBorder(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Border color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator,System.DateTime,System.Drawing.Rectangle)">
            <summary>
            Gets the TimeIndicator Rectangle
            </summary>
            <param name="ti"></param>
            <param name="startDate"></param>
            <param name="sRect"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the TimeIndicator Rectangle
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator,System.DateTime)">
            <summary>
            Gets the TimeIndicator Rectangle for the given date
            </summary>
            <param name="ti"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawCondensedLine(System.Drawing.Graphics)">
            <summary>
            Draws the condensed TimeLine
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawCondensedContent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Single)">
            <summary>
            Draws the Condensed Content area
            </summary>
            <param name="g"></param>
            <param name="vRect"></param>
            <param name="scale"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetCondensedViewPath(System.Drawing.Rectangle,System.Single)">
            <summary>
            Gets the condensed view display path
            </summary>
            <param name="scale">Scale factor</param>
            <param name="vRect">Condensed view rect</param>
            <returns>Path</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawCondensedAppointments(System.Drawing.Graphics,System.Single)">
            <summary>
            Draws condensed appointments
            </summary>
            <param name="g">Graphics</param>
            <param name="scale">Scale factor</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetCondensedPen(System.Object)">
            <summary>
            Gets the appointments condensed pen
            </summary>
            <param name="o">Appointment object</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetCategoryPen(DevComponents.DotNetBar.Schedule.eAppointmentPart)">
            <summary>
            GetCategoryPen
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DrawAppointments(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Draws TimeLine appointments
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetColRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of columns needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="colStart">[out] Column start index</param>
            <param name="colEnd">[out] Column end index</param>
            <returns>Column range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetColRect(System.Int32)">
            <summary>
            Gets the display rectangle for the given column
            </summary>
            <param name="col">Column</param>
            <returns>Display rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetCondensedRect">
            <summary>
            Gets the CondensedView rectangle
            </summary>
            <returns>CondensedView rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetDateCol(System.Nullable{System.DateTime})">
            <summary>
            Gets the absolute column value for the given date
            </summary>
            <param name="selDate">Selection date</param>
            <returns>Absolute column</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessCvlButtonDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles CondensedView Left Button Down events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessCvlPoint(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CondensedView point selection
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessCilButtonDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            CalendarItem left mouseDown processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessTvlButtonDown(System.Int32)">
            <summary>
            Handles TimeLineView left MouseDown events
            </summary>
            <param name="col">Column index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.InternalMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessCvlMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles CondensedView mouse moves
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessContentMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes content mouse moves
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DragDropAppointment(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initiates a user "DragDrop" operation - if enabled
            </summary>
            <param name="objArgs"></param>
            <returns>True if operation started</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.DragAppointment(DevComponents.DotNetBar.Schedule.TimeLineView,DevComponents.DotNetBar.Schedule.AppointmentView)">
            <summary>
            Drags the given appointment from one view to another
            </summary>
            <param name="pv">Previous view</param>
            <param name="av">Item to drag</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetContentCursor">
            <summary>
            Gets the cursor
            </summary>
            <returns>Cursor</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessMouseMove(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes user MouseMove
            </summary>
            <param name="col">DayColumn</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessTvMouseMove(System.Int32)">
            <summary>
            Processes TimeLineView mouseMove events
            </summary>
            <param name="col">Column</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessItemMove(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem mouseMove events
            </summary>
            <param name="col">Column</param>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessItemLeftResize(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem left resizing
            </summary>
            <param name="col">Column</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessItemRightResize(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem right resizing
            </summary>
            <param name="col">Column</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ResizeItem(System.DateTime,System.DateTime)">
            <summary>
            Initiates the resize of the selected item
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetDeltaMinutes(System.Int32,System.Boolean,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Gets the change from the last offset (in minutes)
            </summary>
            <param name="col">Column</param>
            <param name="left">Are we going left or right</param>
            <param name="objArg">MouseEventArgs</param>
            <returns>Change in mnutes</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetDeltaYears(System.Int32,System.Boolean,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Gets the change from the last offset (in years)
            </summary>
            <param name="col">Column</param>
            <param name="left">Are we going left or right</param>
            <param name="objArg">MouseEventArgs</param>
            <returns>Change in years</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.EnableViewScrolling(System.Boolean)">
            <summary>
            Routine to enable or disable view scrolling
            </summary>
            <param name="enable">true to enable</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.CancelScrollTimer">
            <summary>
            Cancels the view scroll timer
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ScrollAmount(System.Int32)">
            <summary>
            Determines the amount to scroll (which is
            based loosely upon the delta magnitude)
            </summary>
            <param name="delta">Point delta</param>
            <returns>Scroll amount</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ScrollViewTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles view scroll timer ticks
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.GetPointItem(System.Drawing.Point,System.Int32@,System.Boolean)">
            <summary>
            Gets the item column at the given point
            </summary>
            <param name="pt">Point in question</param>
            <param name="col">[out] Column</param>
            <param name="partial">True if partial hits are ok</param>
            <returns>True if valid item</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.IsColVisible(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Determines if a given column is visible
            </summary>
            <param name="r">Display rectangle</param>
            <param name="partial">True if partial visibility is ok</param>
            <returns>True if visible</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.PointInCondensedView(System.Drawing.Point)">
            <summary>
            Determines if the given point in in
            the CondensedView area
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.InternalKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes KeyDown events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessLeftRightKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Left and Right Key events
            </summary>
            <param name="objArg"></param>
            <param name="dx"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessHomeKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles Home key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineView.ProcessEndKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes End key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.CalendarItems">
            <summary>
            Gets array of CalendarItems
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.StartDate">
            <summary>
            Start date - readonly
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.EndDate">
            <summary>
            End date - readonly
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.ColumnWidth">
            <summary>
            Gets the ColumnWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.BaseInterval">
            <summary>
            Gets the BaseInterval (interval in total minutes)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.TimeLineColumnCount">
            <summary>
            Gets the number of Columns
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.ShowCondensed">
            <summary>
            Gets the CondensedView visibility state
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.WorkBrush">
            <summary>
            Gets and sets the Work time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.OffWorkBrush">
            <summary>
            Gets and sets the Off-hours work time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.SelectedBrush">
            <summary>
            Gets and sets the selected brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.FirstVisibleColumn">
            <summary>
            Gets the first visible timeline column
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.CondensedLineHeight">
            <summary>
            Gets the condensed time line height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineView.ModelReloaded">
            <summary>
            Gets and sets the model reload state
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.SetUpScrollBar">
            <summary>
            Performs scrollBar setup
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.UpdateScrollBar">
            <summary>
            Updates our scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.DisableScrollBar">
            <summary>
            Disables the scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.ValueChanged(System.Object,System.EventArgs)">
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.VScrollPanel.OnScrollBarUpdate">
            <summary>
            Passes the scroll onto others
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.VScrollPanel.Bounds">
            <summary>
            Gets and sets the panel Bounds
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.VScrollPanel.Visible">
            <summary>
            Gets and sets the control visibility
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.VScrollPanel.ScrollBar">
            <summary>
            Gets the scrollBar
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.VScrollPanel.ScrollPanelSmallChange">
            <summary>
            Gets the scrollBar SmallChange value
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.VScrollPanel.ScrollPanelMaximum">
            <summary>
            Gets the scrollBar Maximum value
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeLineVScrollPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineVScrollPanel.ScrollPanelSmallChange">
            <summary>
            Gets the ScrollBar SmallChange value
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeLineVScrollPanel.ScrollPanelMaximum">
            <summary>
            Gets the ScrollBar Maximum value
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.#ctor(DevComponents.DotNetBar.Schedule.WeekDayView)">
            <summary>
            Constructor
            </summary>
            <param name="weekDayView">WeekDayView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.RecalcSize">
            <summary>
            Performs panel recalc support
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.SortCalendarItems">
            <summary>
            Sorts the CalendarItems
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.CalcAppointmentBounds(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32[]@)">
            <summary>
            Calculates the display bounds for the AppointmentView
            </summary>
            <param name="item">CalendarItem</param>
            <param name="acc">Row accumulator</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.GetDayIndex(DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Gets the starting day index for the given appointment
            </summary>
            <returns>Day of week index (0-6)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.UpdateVScrollBar">
            <summary>
            Updates our vertical scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel._VExtScrollBar_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Processes Extended appointments scrollBar changes
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.ResetView">
            <summary>
            Resets the AllDayPanel view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.UpdateView">
            <summary>
            Updates the AllDayPanel view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Draws extended appointments
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.AllDayPanel.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the AllDayPanel specific properties to new instance of the item.
            </summary>
            <param name="copy">New AllDayPanel instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.Bounds">
            <summary>
            Gets and sets the panel bounding rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.PanelHeight">
            <summary>
            Gets the DayPanel Height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.CalendarItems">
            <summary>
            Gets the panel's CalendarItem list
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.WeekDayView">
            <summary>
            Gets WeekDayView
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.FixedAllDayPanelHeight">
            <summary>
            gets the Fixed AllDayPanel height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.MaximumAllDayPanelHeight">
            <summary>
            gets the Maximum AllDayPanel height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.AppointmentPadding">
            <summary>
            Gets the Appointment height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.AllDayPanel.VsWidth">
            <summary>
            Gets the width of a vertical scrollbar
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.AddColumnSlot(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32)">
            <summary>
            Adds a CalendarItem to the running slot list
            </summary>
            <param name="item">CalendarItem to add</param>
            <param name="n">Slot level to add the item to</param>
            <returns>The added slot item</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.GetColumnSlot(DevComponents.DotNetBar.Schedule.CalendarItem,System.Int32)">
            <summary>
            Returns the SlotItem (if present) in the given list for
            the CalendarItem in question
            </summary>
            <param name="item">CalendarItem</param>
            <param name="n">Slot level to scan</param>
            <returns>SlotItem, if found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.CountColumns">
            <summary>
            Counts the number of columns for
            each column zero entry slot lists
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.GetColumnCount(DevComponents.DotNetBar.Schedule.SlotItem,System.Int32)">
            <summary>
            Gets the max column count from all
            zero level slot paths
            </summary>
            <param name="si">Initial SlotItem</param>
            <param name="count">Running level count</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.SetColumnCount(DevComponents.DotNetBar.Schedule.SlotItem,System.Int32)">
            <summary>
            Sets all column entry counts to the given
            count
            </summary>
            <param name="si">Initial SlotItem</param>
            <param name="count">Count</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ColumnList.Clear">
            <summary>
            Clears the Column slot list
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ColumnList.Id">
            <summary>
            Gets the column slot Id
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ColumnList.SList">
            <summary>
            Gets the column slot list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.SlotItem.#ctor(DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Constructor
            </summary>
            <param name="cItem">CalendarItem</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.SlotItem.AddPeerSlot(DevComponents.DotNetBar.Schedule.SlotItem,System.Int32)">
            <summary>
            Adds a slot to the peer SlotItem list
            </summary>
            <param name="si">SlotItem to add</param>
            <param name="column">Slot column</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.SlotItem.CItem">
            <summary>
            Gets and sets the slots CalendarItem
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.SlotItem.SList">
            <summary>
            Gets the peer SlotItem list
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.SlotItem.Count">
            <summary>
            Gets and sets the peer level count
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.SlotItem.Column">
            <summary>
            Gets and sets the peer column
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayColumn.#ctor(System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="timeSliceHeight">Slice height</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayColumn.OffsetItemRects(System.Int32)">
            <summary>
            Offsets the bounding rectangles for the
            DayColumn's non-extended appointments
            </summary>
            <param name="yOffset">Amount to offset</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayColumn.IsBusyTime(DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Determines if the given time is tagged as a "Busy time"
            </summary>
            <param name="time">WorkTime to test</param>
            <returns>true if specified "time" is a Busy time</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayColumn.IsWorkTime(DevComponents.Schedule.Model.WorkTime)">
            <summary>
            Determines if the given time is tagged as a "Work time"
            </summary>
            <param name="time">WorkTime to test</param>
            <returns>true if specified "time" is a Work time</returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.Bounds">
            <summary>
            Gets and sets the week bounding Rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.Date">
            <summary>
            Gets and sets the column date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.TimeSliceHeight">
            <summary>
            Gets and sets the TimeSlice height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.BusyStartTime">
            <summary>
            Gets and sets the busy time start
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.BusyEndTime">
            <summary>
            Gets and sets the busy time end
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.WorkStartTime">
            <summary>
            Gets and sets the work time start
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.WorkEndTime">
            <summary>
            Gets and sets the work time end
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.DayColumn.CalendarItems">
            <summary>
            Gets the column CalendarItems list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.#ctor(DevComponents.DotNetBar.Schedule.CalendarView,DevComponents.DotNetBar.Schedule.eCalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">CalendarView</param>
            <param name="eCalendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.HookEvents(System.Boolean)">
            <summary>
            Routine hooks all necessary events for this control
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.SelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Processes view changes
            </summary>
            <param name="sender">object</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DayViewDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes DayViewDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.WeekViewStartDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes StartDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.WeekViewEndDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes EndDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.TimeSlotDurationChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeSlotDurationChangedEventArgs)">
            <summary>
            Handles TimeSlotDurationChanged events
            </summary>
            <param name="sender">object</param>
            <param name="e">TimeSlotDurationChangedEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.FixedAllDayPanelHeightChanged(System.Object,DevComponents.DotNetBar.Schedule.FixedAllDayPanelHeightChangedEventArgs)">
            <summary>
            Handles FixedAllDayPanelHeightChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.MaximumAllDayPanelHeightChanged(System.Object,DevComponents.DotNetBar.Schedule.MaximumAllDayPanelHeightChangedEventArgs)">
            <summary>
            Handles MaximumAllDayPanelHeightChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.VScrollPanelScrollBarChanged(System.Object,System.EventArgs)">
            <summary>
            Handles ScrollBarChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse
            point (tab, header, content, etc)
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the date selection from the given point. The startDate
            and endDate will vary based upon the view type (WeekDay / Month)
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">out start date</param>
            <param name="endDate">out end date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDateBounds(System.DateTime)">
            <summary>
            Gets the bounding display rectangle for the given date/time.
            </summary>
            <param name="date">The date/time</param>
            <returns>Bounding display rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDateBounds(System.DateTime,System.DateTime)">
            <summary>
            Gets the bounding display rectangle for the given
            starting and ending date/time range.
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>Bounding display rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ItemIsSelectedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles selected item changes
            </summary>
            <param name="sender">CalendarItem</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.SetSelectedItem(DevComponents.DotNetBar.Schedule.CalendarItem,DevComponents.DotNetBar.Schedule.CalendarItem)">
            <summary>
            Sets the current selected item
            </summary>
            <param name="pci">Previous CalendarItem</param>
            <param name="nci">New CalendarItem</param>
            <returns>New selected CalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.UpdateDateSelection">
            <summary>
            Updates our slice selection range to reflect
            the given date selection start and end values
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDateSlice(System.Nullable{System.DateTime})">
            <summary>
            Gets the absolute slice value for the given date
            </summary>
            <param name="selDate">Selection date</param>
            <returns>Absolute slice</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessSelRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes the selection time slice range
            </summary>
            <param name="sliceStart">Slice range start</param>
            <param name="sliceEnd">Slice range end</param>
            <param name="s1">Slice start limit</param>
            <param name="s2">Slice end limit</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.SelectedSlices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an array of slice selection values
            over the given range of column slices
            </summary>
            <param name="s1">Slice start limit</param>
            <param name="s2">Slice end limit</param>
            <param name="col">Column</param>
            <param name="sliceStart">Slice range start</param>
            <param name="sliceEnd">Slice range end</param>
            <returns>Array of selection values</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.RecalcSize">
            <summary>
            Performs NeedRecalcSize requests
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.AllocateDayColumns(System.DateTime,System.DateTime)">
            <summary>
            Allocates out DayColumns
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.UpdateView">
            <summary>
            Updates our connection model view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ResetView">
            <summary>
            Disconnects and resets the Model connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.UpdateAllDayPanelItems">
            <summary>
            Updates our AllDayPanel items
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.UpdateDayColumns(System.DateTime,System.DateTime)">
            <summary>
            Calculates and updates DayColumn bounds
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.UpdateCalendarItems">
            <summary>
            Updates our CalendarItems list
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.SortCalendarItems(System.Int32)">
            <summary>
            Sorts the DayColumn CalendarItem list
            </summary>
            <param name="col">DayColumn index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.CalcAppointmentBounds(System.Int32,System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.ColumnList})">
            <summary>
            Calculates normal appointment bounds
            </summary>
            <param name="col">DayColumn column</param>
            <param name="colList">Accumulated ColumnList</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDayRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of days needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="dayStart">[out] Day start index</param>
            <param name="dayEnd">[out] Day end index</param>
            <returns>Day range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetSliceRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of slices needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="sliceStart">[out] Slice start index</param>
            <param name="sliceEnd">[out] Slice end index</param>
            <returns>Slice range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawDayOfTheWeekHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Draws the top Day of the week header
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="dayStart">Start day index</param>
            <param name="dayEnd">End day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawColumnHeader(System.Drawing.Graphics,System.Int32,DevComponents.DotNetBar.Schedule.DaysOfTheWeek.eDayType,System.Drawing.Rectangle,System.Drawing.Brush,System.Drawing.Pen,DevComponents.DotNetBar.Schedule.eCalendarWeekDayPart)">
            <summary>
            DrawColumnHeader
            </summary>
            <param name="g"></param>
            <param name="i"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="br"></param>
            <param name="pen"></param>
            <param name="part"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDaysOfTheWeekType(System.Drawing.Graphics)">
            <summary>
            Get the index for our day of the week text
            </summary>
            <param name="g">Graphics handle</param>
            <returns>Index to header text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawSlices(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws Normal Appointment time slices
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="sliceStart">Start slice</param>
            <param name="sliceEnd">End slice</param>
            <param name="dayStart">Day start</param>
            <param name="dayEnd">Day end</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDaySlots(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the array of DaySlot information
            </summary>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
            <param name="dayStart"></param>
            <param name="dayEnd"></param>
            <returns>array of DaySlots</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawContent(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.WeekDayView.DaySlot[0:,0:])">
            <summary>
            Time slice content drawing
            </summary>
            <param name="g">Graphics</param>
            <param name="sliceStart">Start slice</param>
            <param name="sliceEnd">End slice</param>
            <param name="dayStart">Day start</param>
            <param name="dayEnd">Day end</param>
            <param name="daySlots"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetContentBrush(DevComponents.DotNetBar.Schedule.WeekDayView.DaySlot,System.Int32,System.Int32)">
            <summary>
            Gets the background content brush
            for the given time slice
            </summary>
            <param name="daySlot"></param>
            <param name="col">Column index</param>
            <param name="slice">Time slice</param>
            <returns>Background brush</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawDaySlot(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.WeekDayView.DaySlot[0:,0:],System.Boolean)">
            <summary>
            Initiates DaySlot drawing
            </summary>
            <param name="g"></param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
            <param name="dayStart"></param>
            <param name="dayEnd"></param>
            <param name="daySlots"></param>
            <param name="onTop">On top of borders</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.FlushDaySlotText(System.Drawing.Graphics,System.Int32,System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.DaySlotAppearance},System.Drawing.Rectangle@,System.Boolean)">
            <summary>
            Flushes out pending DaySlot drawing
            </summary>
            <param name="g"></param>
            <param name="dayCol"></param>
            <param name="dsaList"></param>
            <param name="dRect">Display rect</param>
            <param name="selected"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawDaySlotText(System.Drawing.Graphics,System.Int32,System.Collections.Generic.IEnumerable{DevComponents.DotNetBar.Schedule.DaySlotAppearance},System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the DaySlot Text
            </summary>
            <param name="g"></param>
            <param name="dayCol"></param>
            <param name="dsaList"></param>
            <param name="cRect"></param>
            <param name="selected"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawTimeIndicators(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draw view TimeIndicators
            </summary>
            <param name="g"></param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawTimeIndicator(System.Drawing.Graphics,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Draws individual view TimeIndicator
            </summary>
            <param name="g"></param>
            <param name="sRect"></param>
            <param name="ti"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the TimeIndicator rectangle
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator,System.DateTime)">
            <summary>
            Gets the TimeIndicator rectangle for the
            given DataTime
            </summary>
            <param name="ti"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetIndicatorColor(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Back color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetIndicatorBorder(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Border color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.WeekDayView.DaySlot[0:,0:])">
            <summary>
            Draws time slice borders
            </summary>
            <param name="g">Graphics</param>
            <param name="sliceStart">Start slice</param>
            <param name="sliceEnd">End slice</param>
            <param name="dayStart">Day start</param>
            <param name="dayEnd">Day end</param>
            <param name="daySlots"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawHorizontalBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,DevComponents.DotNetBar.Schedule.WeekDayView.DaySlot[0:,0:])">
            <summary>
            Draws horizontal borders
            </summary>
            <param name="g"></param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
            <param name="dayStart"></param>
            <param name="dayEnd"></param>
            <param name="daySlots"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawVerticalBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the vertical borders
            </summary>
            <param name="g"></param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
            <param name="dayStart"></param>
            <param name="dayEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawNowBorder(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws the Current-Day Now border
            </summary>
            <param name="g"></param>
            <param name="dayStart"></param>
            <param name="dayEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DrawWeekAppointments(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Initiates the drawing of weekly appointments
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="dayStart">Day start index</param>
            <param name="dayEnd">Day end index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessCilButtonDown(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            CalendarItem left mouseDown processing
            </summary>
            <param name="col">DayColumn col index</param>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessDvlButtonDown(System.Int32,System.Int32)">
            <summary>
            Handles DayView left MouseDown events
            </summary>
            <param name="col">DayColumn col index</param>
            <param name="slice">Time slice</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InternalMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InPanelResize(System.Drawing.Point)">
            <summary>
            Determines if the mouse is in the
            panel resize area
            </summary>
            <param name="pt">Mouse location</param>
            <returns>true if in the resize area</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessPanelMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the actual panel resizing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessContentMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes content mouse moves
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DragDropAppointment(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initiates a user "DragDrop" operation - if enabled
            </summary>
            <param name="objArgs"></param>
            <returns>True if operation started</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.DragAppointment(DevComponents.DotNetBar.Schedule.WeekDayView,DevComponents.DotNetBar.Schedule.AppointmentView)">
            <summary>
            Drags the given appointment from one view to another
            </summary>
            <param name="pv">Previous view</param>
            <param name="av">Item to move</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetContentCursor">
            <summary>
            Gets the cursor
            </summary>
            <returns>Cursor</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessMouseMove(System.Int32,System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes user MouseMove
            </summary>
            <param name="col">DayColumn</param>
            <param name="slice">Slice</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessDvMouseMove(System.Int32,System.Int32)">
            <summary>
            Processes DayView mouseMove events
            </summary>
            <param name="col">DayColumn col index</param>
            <param name="slice">Time slice</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessItemMove(System.Int32,System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem mouseMove events
            </summary>
            <param name="col">DayColumn col index</param>
            <param name="slice">Time slice</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessItemTopResize(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem left resizing
            </summary>
            <param name="slice">Time slice</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessItemBottomResize(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes CalendarItem right resizing
            </summary>
            <param name="slice">Time slice</param>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ResizeItem(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Initiates the resize of the selected item
            </summary>
            <param name="col"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetDeltaMinutes(System.Int32,System.Boolean,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Gets the changes in minutes
            from the last mouse operation (move or resize)
            </summary>
            <param name="slice">Current slice</param>
            <param name="ftop">Flag denoting top or bottom delta</param>
            <param name="objArg">MouseEventArgs</param>
            <returns>Delta minutes</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InvalidateItems(System.Int32)">
            <summary>
            Invalidates altered DayColumns
            </summary>
            <param name="col">Current column</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.EnableViewScrolling(System.Boolean)">
            <summary>
            Routine to enable or disable view scrolling
            </summary>
            <param name="enable">true to enable</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.CancelScrollTimer">
            <summary>
            Cancels the view scroll timer
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ScrollAmount(System.Int32)">
            <summary>
            Determines the amount to scroll (which is
            based loosely upon the delta magnitude)
            </summary>
            <param name="delta">Point delta</param>
            <returns>Scroll amount</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ScrollViewTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles view scroll timer ticks
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.InternalKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes KeyDown events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessUpDownKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Up and Down key events
            </summary>
            <param name="objArg"></param>
            <param name="dy"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessLeftRightKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Left and Right key events
            </summary>
            <param name="objArg"></param>
            <param name="dx"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessHomeKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes Home key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessEndKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes End Key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.ProcessPageUpDownKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Page Up and Down key events
            </summary>
            <param name="objArg"></param>
            <param name="dy">Paging direction (-1, 1)</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetHomeEndCol">
            <summary>
            Gets the Home and End column from the current
            selection range
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetColumnFromDate(System.DateTime)">
            <summary>
            Gets the view column from the given date
            </summary>
            <param name="date"></param>
            <returns>The DayColumns index, or -1 if invalid.</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.EnsureSelectionVisible">
            <summary>
            Ensures the given selection is visible
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.EnsureDateVisible(System.DateTime)">
            <summary>
            Ensures the given date is visible
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetPointItem(System.Drawing.Point,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Gets the column and slice index item for
            the given point
            </summary>
            <param name="pt">Point</param>
            <param name="col">[out] DayColumn column</param>
            <param name="slice">[out] Time slice</param>
            <param name="partial"></param>
            <returns>Item visible state</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.IsSliceVisible(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines if a given slice is visible
            </summary>
            <param name="col">DayColumn</param>
            <param name="slice">Slice in question</param>
            <param name="partial">Partially visible is ok</param>
            <returns>Slice visibility</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetSliceRect(System.Int32,System.Int32)">
            <summary>
            Gets the given slice rectangle
            </summary>
            <param name="col">Column</param>
            <param name="slice">Slice</param>
            <returns>Bounding rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetPointCol(System.Drawing.Point)">
            <summary>
            Gets the col index for the given point
            </summary>
            <param name="pt">Point</param>
            <returns>Column</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetPointSlice(System.Drawing.Point,System.Int32)">
            <summary>
            Gets the slice index for the given point
            </summary>
            <param name="pt">Point</param>
            <param name="col"></param>
            <returns>Slice index</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.GetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Gets the DateTime adjusted by the given
            slice and minutes delta
            </summary>
            <param name="date"></param>
            <param name="slice"></param>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekDayView.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the WeekDayView specific properties to new instance of the item.
            </summary>
            <param name="copy">New WeekDayView instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.DayColumns">
            <summary>
            Gets the view DayColumns
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.NumberOfColumns">
            <summary>
            Gets the view's number of DayColumns
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.ViewRect">
            <summary>
            Gets the Sub-Day view rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.WeekDayColor">
            <summary>
            Gets the CalendarColor
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.LocalStartSlice">
            <summary>
            Gets the local StartSlice
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.LocalNumberOfSlices">
            <summary>
            Gets the local NumberOfSlices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.AllDayPanel">
            <summary>
            Gets the view's AllDayPanel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.DayColumnWidth">
            <summary>
            Gets the DayColumnWidth
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.VsPanel">
            <summary>
            Gets the WeekDay vertical scroll panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.MaximumAllDayPanelHeight">
            <summary>
            Gets the maximum AllDayPanel height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.TimeSlotDuration">
            <summary>
            Gets the TimeSlotDuration
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.TimeSliceHeight">
            <summary>
            Gets the default Time Slice height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.SlotsPerHour">
            <summary>
            Gets the SlotsPerHour
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.NumberOfSlices">
            <summary>
            Gets the NumberOfSlices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.NumberOfActiveSlices">
            <summary>
            Gets the NumberOfActiveSlices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.StartSlice">
            <summary>
            Gets the StartSlice
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.BusyBrush">
            <summary>
            Gets and sets the Busy time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.WorkBrush">
            <summary>
            Gets and sets the Work time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.OffWorkBrush">
            <summary>
            Gets and sets the Off-hours work time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.AllDayBrush">
            <summary>
            Gets and sets the Off-hours work time brush
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.WeekDayView.SelectedBrush">
            <summary>
            Gets and sets the selected brush
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayView.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.DayView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.#ctor(DevComponents.Schedule.Model.CalendarModel,DevComponents.DotNetBar.Schedule.WeekDayView)">
            <summary>
            Constructor
            </summary>
            <param name="model">Assoc CalendarModel</param>
            <param name="weekDayView">Assoc WeekDayView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.Connect">
            <summary>
            Performs Model connection processing
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.Disconnect">
            <summary>
            Severs the Model/WeekDayView connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.ClearWeekDayColumn(DevComponents.DotNetBar.Schedule.DayColumn)">
            <summary>
            Clears individual DayColumn view connections
            </summary>
            <param name="dayColumn">DayColumn</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.LoadData">
            <summary>
            Loads Model/WeekDayView connection data
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.RefreshData">
            <summary>
            Refreshes the data in a previously established
            and loaded connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.ProcessRemovedData(System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentWeekDayView},System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.CustomCalendarItem})">
            <summary>
            Process any remaining removed data
            </summary>
            <param name="removedViews"></param>
            <param name="removedItems"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.UpdateColumnAppts(DevComponents.DotNetBar.Schedule.DayColumn,System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment},System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentWeekDayView})">
            <summary>
            Updates individual DayColumn views
            </summary>
            <param name="dayColumn">DayColumn</param>
            <param name="appointments">List of appointments</param>
            <param name="cachedViews">List of cached views</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.UpdateWorkDayDetails(DevComponents.DotNetBar.Schedule.DayColumn)">
            <summary>
            Updates DayColumn workday details
            </summary>
            <param name="dayColumn">DayColumn to update</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetCalendarWorkDays(DevComponents.DotNetBar.Schedule.DayColumn,DevComponents.Schedule.Model.CalendarWorkDayCollection)">
            <summary>
            GetCalendarWorkDays
            </summary>
            <param name="dayColumn"></param>
            <param name="calendarWorkDays"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetWorkDays(DevComponents.DotNetBar.Schedule.DayColumn,DevComponents.Schedule.Model.WorkDayCollection)">
            <summary>
            GetWorkDays
            </summary>
            <param name="dayColumn"></param>
            <param name="workDays"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetViewFromAll(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the view from all lists
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetViewFromColumn(DevComponents.DotNetBar.Schedule.DayColumn,DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the view from the DayColumn list
            </summary>
            <param name="dayColumn">DayColumn</param>
            <param name="appointment">Appointment</param>
            <returns>Appointment view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetViewFromAllDayPanel(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets the view from the AllDayPanel list
            </summary>
            <param name="appointment">Appointment</param>
            <returns>Appointment view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetViewFromCache(DevComponents.Schedule.Model.Appointment,System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentWeekDayView})">
            <summary>
            Gets the view from the cached list
            </summary>
            <param name="appointment">Appointment</param>
            <param name="cachedViews">Cached views</param>
            <returns>Appointment view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetItemFromAllDayPanel(DevComponents.DotNetBar.Schedule.CustomCalendarItem)">
            <summary>
            Gets the CustomCalendarItem from the AllDayPanel list
            </summary>
            <param name="item">CustomCalendarItem</param>
            <returns>CustomCalendarItem</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetNewView(DevComponents.Schedule.Model.Appointment)">
            <summary>
            Gets a new appointment view
            </summary>
            <param name="appointment">Appointment</param>
            <returns>New view</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.RemoveDuplicates(System.Collections.Generic.List{System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment}},System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Removes duplicate multi-day appointments
            </summary>
            <param name="dayAppts"></param>
            <param name="appointments"></param>
            <returns>Trimmed list</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.IsDuplicateAppointment(System.Collections.Generic.List{System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment}},DevComponents.Schedule.Model.Appointment)">
            <summary>
            Determines if an appointment is a duplicate
            </summary>
            <param name="dayAppts">List of days appointments</param>
            <param name="appointment">Appointment in question</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.RemoveOutdatedViews(System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentWeekDayView}@,DevComponents.DotNetBar.Schedule.DayColumn,System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment})">
            <summary>
            Removes out-dated views
            </summary>
            <param name="removedViews"></param>
            <param name="dayColumn"></param>
            <param name="appointments"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.RemoveOutdatedAllDayViews(System.Collections.Generic.List{DevComponents.DotNetBar.Schedule.AppointmentWeekDayView}@,System.Collections.Generic.List{System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment}})">
            <summary>
            Removes any outdated AllDayAppt views
            </summary>
            <param name="removedViews"></param>
            <param name="dayAppts">Accumulated DayAppts</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.AllDayAppFound(System.Collections.Generic.List{System.Collections.Generic.List{DevComponents.Schedule.Model.Appointment}},DevComponents.Schedule.Model.Appointment)">
            <summary>
            Looks for the given appointment in the
            accumulated dayAppts list
            </summary>
            <param name="dayAppts">Accumulated appts list</param>
            <param name="app">Appointment to look for</param>
            <returns>true if found</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.GetView">
            <summary>
            Returns the view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.VerifyModel">
            <summary>
            Verifies the Model and MonthView are valid
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.ModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles Model property change notifications
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.ModelSubPropertyChanged(System.Object,DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Handles ModelSubProperty change notifications
            </summary>
            <param name="sender">object</param>
            <param name="e">SubPropertyChangedEventArgs</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelWeekDayViewConnector.IsConnected">
            <summary>
            Gets the connection status
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.HookEvents(System.Boolean)">
            <summary>
            Routine hooks all necessary events for this control
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CalendarView_LabelTimeSlotsChanged(System.Object,DevComponents.DotNetBar.Schedule.LabelTimeSlotsChangedEventArgs)">
            <summary>
            Processes LabelTimeSlotsChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CalendarView_Is24HourFormatChanged(System.Object,DevComponents.DotNetBar.Schedule.Is24HourFormatChangedEventArgs)">
            <summary>
            Processes Is24HourFormatChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CalendarView_TimeSlotDurationChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeSlotDurationChangedEventArgs)">
            <summary>
            Processes TimeSlotDurationChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CalendarView_TimeIndicatorsChanged(System.Object,System.EventArgs)">
            <summary>
            Processes CalendarView_TimeIndicatorsChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CalendarView_TimeIndicatorTimeChanged(System.Object,DevComponents.DotNetBar.Schedule.TimeIndicatorTimeChangedEventArgs)">
            <summary>
            Processes CalendarView_TimeIndicatorTimeChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing routine
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetSliceRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of slices needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="sliceStart">[out] Slice start index</param>
            <param name="sliceEnd">[out] Slice end index</param>
            <returns>Slice range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetSliceRect(System.Int32)">
            <summary>
            Gets the given slice rectangle
            </summary>
            <param name="slice">Slice</param>
            <returns>Bounding rectangle</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.DrawTimeRuler(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32)">
            <summary>
            Draws the TimeRuler
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.DrawBackGround(System.Drawing.Graphics)">
            <summary>
            DrawBackGround
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.DrawTimeIndicators(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws TimeIndicators
            </summary>
            <param name="g"></param>
            <param name="sliceStart"></param>
            <param name="sliceEnd"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.DrawTimeIndicator(System.Drawing.Graphics,System.Drawing.Rectangle,DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Draws individual TimeIndicators
            </summary>
            <param name="g"></param>
            <param name="sRect"></param>
            <param name="ti"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetIndicatorColor(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Back color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetIndicatorBorder(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            Gets the Indicator Border color
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetViewDates(System.DateTime@,System.DateTime@)">
            <summary>
            GetViewDates
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetIndicatorRect(DevComponents.DotNetBar.Schedule.TimeIndicator)">
            <summary>
            GetIndicatorRect
            </summary>
            <param name="ti"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.DrawTimeRulerText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws the time text
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="slice"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetRulerHour(System.Int32)">
            <summary>
            Gets the hourly display text
            </summary>
            <param name="hour">Hour</param>
            <returns>Hourly text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.GetRulerMinute(System.Int32,System.Int32)">
            <summary>
            Gets the minute display text
            </summary>
            <param name="hour">Hour</param>
            <param name="minute">Minute</param>
            <returns>Minute text</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.TimeRulerPanel.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the TimeRulerPanel specific properties to new instance of the item.
            </summary>
            <param name="copy">New TimeRulerPanel instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.TimeRulerFont">
            <summary>
            Gets the TimeRuler font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.TimeRulerFontSm">
            <summary>
            Gets the TimeRuler font (small)
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.TimeSliceHeight">
            <summary>
            Gets the default Time Slice height
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.TimeSlotDuration">
            <summary>
            Gets the TimeSlotDuration
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.SlotsPerHour">
            <summary>
            Gets the SlotsPerHour
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.NumberOfSlices">
            <summary>
            Gets the NumberOfSlices
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.StartSlice">
            <summary>
            Gets the starting Time Slice
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.AmDesignator">
            <summary>
            Gets the culturally correct AM time designator
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.TimeRulerPanel.PmDesignator">
            <summary>
            Gets the culturally correct PM time designator
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekView.ProcessUpDownKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Up and Down key events
            </summary>
            <param name="objArg"></param>
            <param name="dy"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WeekView.ProcessLeftRightKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Left and Right Key events
            </summary>
            <param name="objArg"></param>
            <param name="dx"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.WinApi.GetWindowPlacement(System.IntPtr,DevComponents.DotNetBar.Schedule.WinApi.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to the WINDOWPLACEMENT structure that receives the show state and position information.
            <para>
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="T:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions">
            <summary>Options available when a form is tested for mose positions.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.Error">
            <summary>HTERROR: On the screen background or on a dividing line between windows 
            (same as HTNOWHERE, except that the DefWindowProc function produces a system 
            beep to indicate an error).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.TransparentOrCovered">
            <summary>HTTRANSPARENT: In a window currently covered by another window in the 
            same thread (the message will be sent to underlying windows in the same thread 
            until one of them returns a code that is not HTTRANSPARENT).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.NoWhere">
            <summary>HTNOWHERE: On the screen background or on a dividing line between 
            windows.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.ClientArea">
            <summary>HTCLIENT: In a client area.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.TitleBar">
            <summary>HTCAPTION: In a title bar.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.SystemMenu">
            <summary>HTSYSMENU: In a window menu or in a Close button in a child window.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.GrowBox">
            <summary>HTGROWBOX: In a size box (same as HTSIZE).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.Menu">
            <summary>HTMENU: In a menu.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.HorizontalScrollBar">
            <summary>HTHSCROLL: In a horizontal scroll bar.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.VerticalScrollBar">
            <summary>HTVSCROLL: In the vertical scroll bar.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.MinimizeButton">
            <summary>HTMINBUTTON: In a Minimize button. </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.MaximizeButton">
            <summary>HTMAXBUTTON: In a Maximize button.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.LeftSizeableBorder">
            <summary>HTLEFT: In the left border of a resizable window (the user can click 
            the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.RightSizeableBorder">
            <summary>HTRIGHT: In the right border of a resizable window (the user can click 
            the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.TopSizeableBorder">
            <summary>HTTOP: In the upper-horizontal border of a window.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.TopLeftSizeableCorner">
            <summary>HTTOPLEFT: In the upper-left corner of a window border.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.TopRightSizeableCorner">
            <summary>HTTOPRIGHT: In the upper-right corner of a window border.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.BottomSizeableBorder">
            <summary>HTBOTTOM: In the lower-horizontal border of a resizable window (the 
            user can click the mouse to resize the window vertically).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.BottomLeftSizeableCorner">
            <summary>HTBOTTOMLEFT: In the lower-left corner of a border of a resizable 
            window (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.BottomRightSizeableCorner">
            <summary>HTBOTTOMRIGHT: In the lower-right corner of a border of a resizable 
            window (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.NonSizableBorder">
            <summary>HTBORDER: In the border of a window that does not have a sizing 
            border.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.Object">
            <summary>HTOBJECT: Unknown...No Documentation Found</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.CloseButton">
            <summary>HTCLOSE: In a Close button.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.HelpButton">
            <summary>HTHELP: In a Help button.</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.SizeBox">
            <summary>HTSIZE: In a size box (same as HTGROWBOX). (Same as GrowBox).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.ReduceButton">
            <summary>HTREDUCE: In a Minimize button. (Same as MinimizeButton).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.WindowHitTestRegions.ZoomButton">
            <summary>HTZOOM: In a Maximize button. (Same as MaximizeButton).</summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Normal">
            <summary>
            Activates and displays a window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window
            for the first time.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>      
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value
            is similar to <see cref="!:Win32.ShowWindowCommand.Normal"/>, except
            the window is not actived.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level
            window in the Z order.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to
            <see cref="!:Win32.ShowWindowCommand.ShowMinimized"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is
            similar to <see cref="!:Win32.ShowWindowCommand.Show"/>, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ShowDefault">
            <summary>
            Sets the show state based on the SW_* value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.
            </summary>
        </member>
        <member name="F:DevComponents.DotNetBar.Schedule.WinApi.ShowWindowCommands.ForceMinimize">
            <summary>
             <b>Windows 2000/XP:</b> Minimizes a window, even if the thread
            that owns the window is not responding. This flag should only be
            used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.#ctor(DevComponents.Schedule.Model.CalendarModel,DevComponents.DotNetBar.Schedule.YearView)">
            <summary>
            Constructor
            </summary>
            <param name="model">Assoc CalendarModel</param>
            <param name="yearView">Assoc YearView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.Connect">
            <summary>
            Performs Model connection processing
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.Disconnect">
            <summary>
            Severs the Model/MonthView connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.LoadData(System.Boolean)">
            <summary>
            Loads Model/YearView connection data
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.UpdateCustomItems(DevComponents.DotNetBar.Schedule.YearMonth)">
            <summary>
            UpdateCustomItems
            </summary>
            <param name="yearMonth"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.CustomItemsCollectionChanged(System.Object,System.EventArgs)">
            <summary>
            Handles CustomItemCollection change events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.GetFirstAppointment(System.DateTime)">
            <summary>
            GetFirstAppointment
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.GetFirstCustomItem(System.DateTime)">
            <summary>
            GetFirstCustomItem
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.GetView">
            <summary>
            Returns the Month view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.ResetModelData">
            <summary>
            ResetModelData
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.ModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles Model property change notifications
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.ModelSubPropertyChanged(System.Object,DevComponents.Schedule.Model.SubPropertyChangedEventArgs)">
            <summary>
            Handles ModelSubProperty change notifications
            </summary>
            <param name="sender">object</param>
            <param name="e">SubPropertyChangedEventArgs</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.ModelYearViewConnector.IsConnected">
            <summary>
            Gets the connection status
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.#ctor(DevComponents.DotNetBar.Schedule.YearView,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="yearView"></param>
            <param name="date"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.CalcBoundingRects">
            <summary>
            Calculates the control's Bounding Rects
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.CalcDayRects">
            <summary>
            Calculates the day rectangles for the
            current bounding rectangle
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetDateFromIndex(System.Int32)">
            <summary>
            Gets the month date from the given day index
            </summary>
            <param name="dayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetDateFromPoint(System.Drawing.Point,System.DateTime@)">
            <summary>
            Gets the month date from the given Point
            </summary>
            <param name="pt"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the month view area from the given Point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetNormalizedDayIndex(System.Int32)">
            <summary>
            Gets the normalized month date for the given dayIndex
            </summary>
            <param name="dayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetDayIndexFromPoint(System.Drawing.Point)">
            <summary>
            Gets the month dayIndex from the given Point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetDayIndexFromDate(System.DateTime)">
            <summary>
            Gets the month dayIndex from the given date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.ContainsDate(System.DateTime)">
            <summary>
            Determines if the given date is contained in the month
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DayHasAppointments(System.Int32)">
            <summary>
            Determines if the given day of the month has
            Appointments or CustomItems associated with it
            </summary>
            <param name="day">Day of the month</param>
            <returns>true, if there are Appointments associated with this day</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DayIndexHasAppointments(System.Int32)">
            <summary>
            Determines if the given dayIndex has
            Appointments or CustomItems associated with it
            </summary>
            <param name="dayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DayIsSelected(System.Int32)">
            <summary>
            Determines if the given day of the month is selected
            </summary>
            <param name="day">Day of the month</param>
            <returns>true if selected</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.UpdateDateSelection">
            <summary>
            Updates the date selection for the month
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.ClearSelection">
            <summary>
            ClearSelection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetPreferredSize">
            <summary>
            Gets the Preferred control size for the month
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.Paint(DevComponents.DotNetBar.ItemPaintArgs,System.Boolean)">
            <summary>
            Paint
            </summary>
            <param name="e"></param>
            <param name="isNow"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawContent(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            DrawContent
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawBackground(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            DrawBackground
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawDayContent(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            DrawDayContent
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawDayContentBackground(System.Drawing.Graphics,System.DateTime,DevComponents.DotNetBar.Schedule.ItemRect,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            DrawDayContentBackground
            </summary>
            <param name="g"></param>
            <param name="date"></param>
            <param name="ir"></param>
            <param name="color1"></param>
            <param name="color2"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawDayContentText(System.Drawing.Graphics,System.DateTime,DevComponents.DotNetBar.Schedule.ItemRect)">
            <summary>
            DrawDayContentText
            </summary>
            <param name="g"></param>
            <param name="date"></param>
            <param name="ir"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawDayHighLight(System.Drawing.Graphics,DevComponents.DotNetBar.Schedule.eYearViewLinkStyle,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the day highlight
            </summary>
            <param name="g"></param>
            <param name="style"></param>
            <param name="r"></param>
            <param name="color1"></param>
            <param name="color2"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawGridLines(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            DrawGridLines
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawNowHighlight(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            DrawNowHighlight
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawMonthHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Boolean)">
            <summary>
            DrawMonthHeader
            </summary>
            <param name="e"></param>
            <param name="isNow"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawDayOfWeekHeader(DevComponents.DotNetBar.ItemPaintArgs,System.Boolean)">
            <summary>
            DrawDayOfWeekHeader
            </summary>
            <param name="e"></param>
            <param name="isNow"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.DrawBorder(DevComponents.DotNetBar.ItemPaintArgs,System.Boolean)">
            <summary>
            DrawBorder
            </summary>
            <param name="e"></param>
            <param name="isNow"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearMonth.GetDaysOfTheWeekType(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            GetDaysOfTheWeekType
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.AppBits">
            <summary>
            Appointment (and CustomItem) bit array
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.DayOfWeekHeaderHeight">
            <summary>
            DayOfWeekHeaderHeight
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.DayRects">
            <summary>
            Gets the day Rectangles
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.MonthHeaderHeight">
            <summary>
            MonthHeaderHeight
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.Bounds">
            <summary>
            Gets and sets the week bounding Rectangle
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.DaysInMonth">
            <summary>
            Gets the number of Days in the Month
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.StartDate">
            <summary>
            Gets or sets the month starting date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.EndDate">
            <summary>
            Gets the month end date
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearMonth.YearView">
            <summary>
            Gets the parent YearView
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.#ctor(DevComponents.DotNetBar.Schedule.CalendarView)">
            <summary>
            Constructor
            </summary>
            <param name="calendarView">Parent CalendarView</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.HookEvents(System.Boolean)">
            <summary>
            Hooks (or unhooks) needed events
            </summary>
            <param name="hook">True to hook, false to unhook</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.SelectedViewChanged(System.Object,DevComponents.DotNetBar.Schedule.SelectedViewEventArgs)">
            <summary>
            Processes CalendarView SelectedViewChanged events
            </summary>
            <param name="sender">CalendarView</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.YearViewStartDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes StartDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.YearViewEndDateChanged(System.Object,DevComponents.DotNetBar.Schedule.DateChangeEventArgs)">
            <summary>
            Processes EndDate changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.YearViewAllowDateSelectionChanged(System.Object,DevComponents.DotNetBar.Schedule.AllowDateSelectionChangedEventArgs)">
            <summary>
            Handles YearViewAllowDateSelectionChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.YearViewShowGridLinesChanged(System.Object,DevComponents.DotNetBar.Schedule.ShowGridLinesChangedEventArgs)">
            <summary>
            Processes CalendarView YearViewShowGridLinesChanged events
            </summary>
            <param name="sender">CalendarView</param>
            <param name="e">SelectedViewEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.VScrollPanelScrollBarChanged(System.Object,System.EventArgs)">
            <summary>
            Handles ScrollBarChanged events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetViewAreaFromPoint(System.Drawing.Point)">
            <summary>
            Gets the view area under the given mouse
            point (tab, header, content, etc)
            </summary>
            <param name="pt">Point</param>
            <returns>eViewArea</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetDateSelectionFromPoint(System.Drawing.Point,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the date selection from the given point.
            </summary>
            <param name="pt">Point in question</param>
            <param name="startDate">out start date</param>
            <param name="endDate">out end date</param>
            <returns>True if a valid selection exists
            at the given point</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.UpdateDateSelection">
            <summary>
            Updates each monthWeeks DayRects to reflect
            the date selection start and end values
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.RecalcSize">
            <summary>
            Performs NeedRecalcSize requests
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.RecalcDisplaySize">
            <summary>
            Performs all necessary recalc operations
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.NormalizeDates(System.DateTime@,System.DateTime@)">
            <summary>
            Normalizes the user specified start and end dates
            </summary>
            <param name="startDate">[out] Normalized start date</param>
            <param name="endDate">[out] Normalized end date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.UpdateView">
            <summary>
            Updates our connection model view
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ResetView">
            <summary>
            Disconnects and resets the Model connection
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.CalcYearMonths(System.DateTime,System.DateTime)">
            <summary>
            Calculates display info for the YearMonth data
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.LayoutYearMonths(System.DateTime)">
            <summary>
            Performs size and positioning layout for the control
            </summary>
            <param name="startDate"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetPreferredSize(System.DateTime)">
            <summary>
            Gets the preferred size of the control
            </summary>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.Paint(DevComponents.DotNetBar.ItemPaintArgs)">
            <summary>
            Paint processing
            </summary>
            <param name="e">ItemPaintArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.DrawContent(DevComponents.DotNetBar.ItemPaintArgs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws YearMonth header and content
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="rowStart">Row start index</param>
            <param name="rowEnd">Row end index</param>
            <param name="colStart">Col start index</param>
            <param name="colEnd">Col end index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetColRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of columns needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="colStart">[out] Col start index</param>
            <param name="colEnd">[out] COl end index</param>
            <returns>Col range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetRowRange(DevComponents.DotNetBar.ItemPaintArgs,System.Int32@,System.Int32@)">
            <summary>
            Calculates the range of rows needed to be drawn
            to satisfy the specified paint request
            </summary>
            <param name="e">ItemPaintArgs</param>
            <param name="rowStart">[out] Row start index</param>
            <param name="rowEnd">[out] Row end index</param>
            <returns>Row range count (end - start)</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.InternalMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event processing
            </summary>
            <param name="objArg">MouseEventArgs</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessMouseMove(System.Int32,System.Int32)">
            <summary>
            Processes view mouseMove events
            </summary>
            <param name="monthIndex"></param>
            <param name="dayIndex"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.InternalMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event processing
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessMouseDown(System.Int32,System.Int32)">
            <summary>
            Handles MonthView left MouseDown events
            </summary>
            <param name="monthIndex">Month index</param>
            <param name="dayIndex">Day index</param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.InternalMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles InternalMouseUp events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessMouseUp(System.Int32,System.Int32)">
            <summary>
            Process mouse up events
            </summary>
            <param name="monthIndex"></param>
            <param name="dayIndex"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.PerformLinkSelect(System.DateTime)">
            <summary>
            Performs a day link selection
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.InternalKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes KeyDown events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessUpDownKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Up and Down Key events
            </summary>
            <param name="objArg"></param>
            <param name="dy"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessLeftRightKey(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            Processes Left and Right key events
            </summary>
            <param name="objArg"></param>
            <param name="dx"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessHomeKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes Hoe key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.ProcessEndKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes End key events
            </summary>
            <param name="objArg"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetMonthFromDate(System.DateTime)">
            <summary>
            Gets the month containing the given date
            </summary>
            <param name="date"></param>
            <returns>MonthIndex or -1</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetHomeEndMonth">
            <summary>
            Gets the Home and End month from the
            current selection range
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.InternalKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            InternalKeyUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetCursor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cursor
            </summary>
            <returns>Cursor</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetPointItem(System.Drawing.Point,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the month and dey index for the given Point
            </summary>
            <param name="pt"></param>
            <param name="monthIndex">Month index</param>
            <param name="dayIndex">Day index</param>
            <param name="ndayIndex">Normalized day index</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.GetMonthIndexFromPoint(System.Drawing.Point)">
            <summary>
            Gets the month index from the given point
            </summary>
            <param name="pt">Point</param>
            <returns>month index or -1</returns>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.Copy">
            <summary>
            Returns copy of the item.
            </summary>
        </member>
        <member name="M:DevComponents.DotNetBar.Schedule.YearView.CopyToItem(DevComponents.DotNetBar.BaseItem)">
            <summary>
            Copies the YearView specific properties to new instance of the item.
            </summary>
            <param name="copy">New YearView instance</param>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.AllowDateSelection">
            <summary>
            Gets whether date selections are permitted
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.CellSize">
            <summary>
            Gets the default day cell size
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.ShowGridLines">
            <summary>
            Gets whether Grid lines are to be displayed
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.YearViewAppointmentLink">
            <summary>
            Gets the Appointment Link click style
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.YearViewNonAppointmentLink">
            <summary>
            Gets the non-Appointment Link click style
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.ViewColor">
            <summary>
            Gets the Month Color table
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.VsPanel">
            <summary>
            Gets the Year vertical scroll panel
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.Font">
            <summary>
            Gets or sets the display font
            </summary>
        </member>
        <member name="P:DevComponents.DotNetBar.Schedule.YearView.YearMonths">
            <summary>
            Gets the array of YearMonths
            </summary>
        </member>
    </members>
</doc>
